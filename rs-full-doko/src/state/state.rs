use rand::prelude::SmallRng;
use serde::{Deserialize, Serialize};
use crate::action::action::{action_to_type, FdoAction, FdoActionType};
use crate::action::allowed_actions::FdoAllowedActions;
use crate::announcement::announcement::{FdoAnnouncementProgressResult, FdoAnnouncements};
use crate::basic::color::FdoColor;
use crate::basic::phase::FdoPhase;
use crate::display::display::display_game;
use crate::game_type::game_type::FdoGameType;
use crate::hand::hand::FdoHand;
use crate::matching::is_consistent::is_consistent;
use crate::observation::observation::FdoObservation;
use crate::player::player::FdoPlayer;
use crate::player::player_set::FdoPlayerSet;
use crate::reservation::reservation::FdoReservation;
use crate::reservation::reservation_round::FdoReservationRound;
use crate::reservation::reservation_winning_logic::{FdoReservationResult, winning_player_in_reservation_round};
use crate::stats::stats::FdoEndOfGameStats;
use crate::team::team_logic::FdoTeamState;
use crate::trick::trick::FdoTrick;
use crate::util::po_zero_arr::PlayerZeroOrientedArr;

#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]
pub struct FdoState {
    /// Vorbehaltsrunde
    pub reservations_round: FdoReservationRound,

    /// Stichrunden, bis zu 12 Stiche
    pub tricks: heapless::Vec<FdoTrick, 12>,

    /// Die aktuellen Karten der Spieler
    /// ausgehend von PLAYER_BOTTOM
    pub hands: PlayerZeroOrientedArr<FdoHand>,

    /// Die Ansagen der Spieler und
    /// deren Verwaltung.
    pub announcements: FdoAnnouncements,

    // Folgende Eigenschaften sind theoretisch ableitbar,
    // wir speichern sie aber trotzdem, um die Berechnung
    // zu vereinfachen.

    /// Die wievielte Karte wird als nächstes gespielt?
    pub card_index: usize,

    /// Der Spieler, der aktuell an der Reihe ist. Oder None,
    /// wenn das Spiel vorbei ist.
    pub current_player: Option<FdoPlayer>,

    /// Die aktuelle Phase des Spiels.
    pub current_phase: FdoPhase,

    /// Ergebnis der Vorbehaltsrunde, gespeichert,
    /// damit wir es nicht immer neu berechnen. Gesetzt,
    /// wenn die Vorbehaltsrunde beendet ist.
    pub reservation_result: Option<FdoReservationResult>,

    /// Aktueller Spieltyp, der sich aus den Ergebnissen der Vorbehaltsrunde
    /// ergibt. Gesetzt, wenn die Vorbehaltsrunde beendet ist.
    pub game_type: Option<FdoGameType>,

    /// Augenzahlen der Spieler, die sie bereits gefangen haben,
    /// dabei werden nur fertige Stiche gezählt.
    pub player_eyes: PlayerZeroOrientedArr<u32>,

    /// Anzahl der Stiche, die ein Spieler gemacht hat.
    pub player_num_tricks: PlayerZeroOrientedArr<u32>,

    /// Aktueller Stand des Spiels bezüglich der Teamverteilung,
    /// bei einer Hochzeit gibt es zusätzliche Angaben.
    pub team_state: FdoTeamState,

    // Die Ergebnisse der Runde, wenn das Spiel vorbei ist.
    pub end_of_game_stats: Option<FdoEndOfGameStats>
}


impl FdoState {
    /// Erstellt ein neues Spiel basierend auf dem aktuellen Zustand und einer neuen
    /// Menge von Karten, welche die Spieler auf der Hand haben. Dient dazu, neue Zustände
    /// aus einer Informationsmenge zu erzeugen. Es wird keine Plausibilitätsprüfung durchgeführt.
    pub fn clone_with_different_hands(
        &self,
        hands: PlayerZeroOrientedArr<FdoHand>
    ) -> FdoState {
        let mut new_state = self.clone();

        new_state.hands = hands;

        return new_state
    }

    /// Erstellt ein neues Spiel basierend auf dem aktuellen Zustand und einer neuen
    /// Menge von Karten, welche die Spieler auf der Hand haben. Dient dazu, neue Zustände
    /// aus einer Informationsmenge zu erzeugen. Es wird keine Plausibilitätsprüfung durchgeführt.
    pub fn clone_with_different_hands_and_reservations(
        &self,
        card_assignments: PlayerZeroOrientedArr<FdoHand>,
        reservations: PlayerZeroOrientedArr<Option<FdoReservation>>
    ) -> FdoState {
        // Wir erstellen einen neuen State und setzen die Karten und Vorbehalte.
        let mut new_state = self.clone();

        for player in FdoPlayerSet::all().iter() {
            new_state.hands[player] = card_assignments[player].clone();
        }

        new_state.reservations_round = FdoReservationRound::existing(
            new_state.reservations_round.reservations.starting_player,
            reservations
                .rotate_to(new_state.reservations_round.reservations.starting_player)
                .all_present()
                .map(|r| *r)
                .collect()
        );

        new_state
    }


    /// Nur für Testzwecke direkt aufrufen!
    pub fn new_game_from_hand_and_start_player(
        hands: PlayerZeroOrientedArr<FdoHand>,
        start_player: FdoPlayer
    ) -> FdoState {
        FdoState {
            // Eine Vorbehaltsrunde besteht am Anfang immer und
            // beginnt mit dem Startspieler des Spiels.
            reservations_round: FdoReservationRound::empty(start_player),

            // Am Anfang gibt es noch keinen Stich.
            tricks: heapless::Vec::new(),

            // Jeder Spieler erhält 12 zufällige Karten
            hands: hands,

            // Am Anfang gibt es noch keine Ansagen.
            announcements: FdoAnnouncements::new(),

            card_index: 0,

            // Der Startspieler beginnt das Spiel
            current_player: Some(start_player),

            // Das Spiel beginnt in der Vorbehaltsphase
            current_phase: FdoPhase::Reservation,

            // Am Anfang gibt es noch kein Ergebnis der Vorbehaltsrunde.
            reservation_result: None,

            // Am Anfang ist der Spieltyp unbekannt.
            game_type: None,

            // Am Anfang hat noch kein Spieler Augen gesammelt.
            player_eyes: PlayerZeroOrientedArr::from_full([0, 0, 0, 0]),

            // Am Anfang hat noch kein Spieler Stiche gemacht.
            player_num_tricks: PlayerZeroOrientedArr::from_full([0, 0, 0, 0]),

            // Am Anfang sind die Teams noch nicht bekannt.
            team_state: FdoTeamState::InReservations,

            // Am Anfang gibt es noch kein Ergebnis.
            end_of_game_stats: None,
        }
    }

    /// Erstellt ein neues Spiel mit zufälligen Karten und einem zufälligen Startspieler.
    pub fn new_game(
        mut rng: &mut SmallRng
    ) -> FdoState {
        // Zufälliger Startspieler
        let start_player: FdoPlayer = FdoPlayer::from_rng(rng);
        // Zufällige Karten
        let hands = FdoHand::randomly_distributed(&mut rng);

        FdoState::new_game_from_hand_and_start_player(hands, start_player)
    }

    pub fn current_trick_index(&self) -> usize {
        self.tricks.len()
    }

    fn progress_next_card_or_announcement(
        &mut self
    ) {
        // Dann übergehen wir nun in die Ansagephase oder in
        // die Kartenphase.
        let start_round_result = self.announcements.start_round(
            self.card_index,
            self.current_player.unwrap(),
            self.hands.map(|hand| hand.len()),
            self.team_state
        );

        match start_round_result {
            FdoAnnouncementProgressResult::NextPlayerIs(next_player) => {
                self.current_phase = FdoPhase::Announcement;
                self.current_player = Some(next_player);
            }
            FdoAnnouncementProgressResult::RoundIsOver(next_player) => {
                self.current_phase = FdoPhase::PlayCard;
                self.current_player = Some(next_player);
            }
        }
    }

    pub fn play_action(&mut self, action: FdoAction) {
        debug_assert!(self.current_phase != FdoPhase::Finished, "Es kann keine Aktion gespielt werden, wenn das Spiel vorbei ist.");
        debug_assert!(is_consistent(self, &self.observation_for_current_player(), self.hands, self.reservations_round.reservations.to_array_remaining_option()));

        let current_player = self
            .current_player
            .unwrap();

        match action_to_type(action) {
            FdoActionType::Reservation(reservation) => {
                debug_assert!(self.current_phase == FdoPhase::Reservation, "Es kann nur eine Vorbehaltsaktion gespielt werden, wenn die Phase Reservation ist.");

                self.reservations_round.play_reservation(reservation);

                let current_player = current_player + 1;
                self.current_player = Some(current_player);

                // Die Vorbehaltsrunde ist beendet.
                if self.reservations_round.is_completed() {

                    // Wir berechnen den Gewinner der Vorbehaltsrunde
                    let reservation_result = winning_player_in_reservation_round(&self.reservations_round);
                    self.reservation_result = Some(reservation_result);
                    self.game_type = Some(reservation_result.to_game_type());

                    // Wir überprüfen, ob sich ein neuer Team-Status ergibt. (Re-Spieler
                    // könnten jetzt feststehen.)
                    if !self.team_state.is_final() {
                        self.team_state = FdoTeamState::resolve(
                            reservation_result,
                            &self.tricks,
                            self.hands
                        );
                    }

                    // Neuen Stich starten
                    self
                        .tricks
                        .push(FdoTrick::empty(current_player))
                        .unwrap();

                    self.progress_next_card_or_announcement();

                }
            }

            FdoActionType::Announcement(announcement) => {
                debug_assert!(self.current_phase == FdoPhase::Announcement, "Es kann nur eine Ansage gespielt werden, wenn die Phase Announcement ist.");

                let announcement_play_result = self.announcements.play_announcement(
                    current_player,
                    announcement,
                    self.card_index,
                    self.hands.map(|hand| hand.len()),
                    self.team_state
                );

                match announcement_play_result {
                    FdoAnnouncementProgressResult::NextPlayerIs(next_player) => {
                        self.current_player = Some(next_player);
                    }
                    FdoAnnouncementProgressResult::RoundIsOver(next_player) => {
                        self.current_phase = FdoPhase::PlayCard;
                        self.current_player = Some(next_player);
                    }
                }
            }

            FdoActionType::Card(card) => {
                let reservation_result = self.reservation_result.unwrap();

                // Karte aus der Hand des Spielers nehmen.
                self.hands[current_player].remove(card);

                // Karte im Stich hinzufügen
                let mut current_trick = self
                    .tricks
                    .last_mut()
                    .unwrap();

                current_trick.play_card(card, self.game_type.unwrap());

                self.card_index += 1;

                // Wenn der Stich vollständig ist, dann beginnen wir den nächsten Stich.
                if current_trick.is_completed() {
                    // Wir berechnen den Gewinner des Stiches.
                    let winning_player = current_trick.winning_player.unwrap();

                    // Wir erhöhen die Augenzahl des Spielers.
                    self.player_eyes[winning_player] += &current_trick.eyes();

                    // Wir erhöhen die Anzahl der Stiche des Spielers.
                    self.player_num_tricks[winning_player] += 1;

                    // Wir überprüfen, ob durch den Stich sich ein neuer Team-Status
                    // ergibt, z.B. dadurch, dass eine Hochzeit geklärt wurde.
                    if !self.team_state.is_final() {
                        self.team_state = FdoTeamState::resolve(
                            reservation_result,
                            &self.tricks,
                            self.hands
                        );
                    }

                    if self.tricks.len() == 12 {
                        // Wenn das ganze Spiel vorbei ist, dann ist die Spielphase vorbei.
                        self.current_phase = FdoPhase::Finished;
                        // Dann gibt es keinen aktuellen Spieler mehr.
                        self.current_player = None;

                        // Dann berechnen wir auch direkt die Punkte.
                        self.end_of_game_stats = Some(
                            FdoEndOfGameStats::calculate(
                                self.player_eyes,
                                self.player_num_tricks,
                                self.team_state.get_re_players().unwrap(),
                                self.announcements.re_lowest_announcement,
                                self.announcements.contra_lowest_announcement,
                                &self.tricks,
                            )
                        );

                        return;
                    }

                    // Er ist außerdem der nächste Spieler
                    self.current_player = Some(winning_player);

                    // Ansonsten: Wir beginnen den nächsten Stich mit dem
                    // Gewinner des vorherigen Stiches. Gegebenenfalls gibt es eine
                    // neue Ansagephase.
                    self
                        .tricks
                        .push(FdoTrick::empty(winning_player))
                        .unwrap();

                    self.progress_next_card_or_announcement();

                    return;
                }

                // Grundsätzlich ist der nächste Spieler dran.
                let current_player = current_player + 1;
                self.current_player = Some(current_player);

                // Ggf. gibt es eine neue Ansagephase.
                self.progress_next_card_or_announcement();
            }
        }
    }

    pub fn current_trick_color(
        &self
    ) -> Option<FdoColor> {
        if self.tricks.len() > 0 && self.tricks.len() < 12 {
            self
                .tricks
                .last()
                .unwrap()
                .color(self.game_type.unwrap())
        } else {
            None
        }
    }

    // Wählt für den aktuellen Spieler eine zufällige Aktion aus. Für Optimierungszwecke,
    // wenn wir im Rahmen des MCTS ein zufälliges Rollout durchgehen und die Observationen
    // dazwischen gar nicht benötigen. Gibt true zurück, wenn keine Aktion ausgeführt werden
    // konnte, da das Spiel vorbei ist.
    pub fn random_action_for_current_player(
        &mut self,
        rng: &mut SmallRng
    ) -> bool {
        // Spiel beendet, daher kann das Rollout abgebrochen werden.
        if self.current_phase == FdoPhase::Finished {
            return true;
        }

        let allowed_actions = FdoAllowedActions::calculate_allowed_actions(
            self.current_phase,
            self.current_trick_color(),
            self.hands[self.current_player.unwrap()],
            self.game_type,
            self.announcements.current_player_allowed_announcements
        );

        self.play_action(allowed_actions.random(rng));

        // ToDo: Rückgabe fragwürdig :O
        false
    }

    pub fn random_action_for_current_player_no_announcement(
        &mut self,
        rng: &mut SmallRng
    ) -> bool {
        // Spiel beendet, daher kann das Rollout abgebrochen werden.
        if self.current_phase == FdoPhase::Finished {
            return true;
        }

        let mut allowed_actions = FdoAllowedActions::calculate_allowed_actions(
            self.current_phase,
            self.current_trick_color(),
            self.hands[self.current_player.unwrap()],
            self.game_type,
            self.announcements.current_player_allowed_announcements
        );

        allowed_actions.remove(FdoAction::AnnouncementReContra);
        allowed_actions.remove(FdoAction::AnnouncementNo90);
        allowed_actions.remove(FdoAction::AnnouncementNo60);
        allowed_actions.remove(FdoAction::AnnouncementNo30);
        allowed_actions.remove(FdoAction::AnnouncementBlack);

        let random_action = allowed_actions.random(rng);
        // println!("{:?} {:?}", random_action, allowed_actions);
        self.play_action(random_action);


        // ToDo: Rückgabe fragwürdig :O
        false
    }


    pub fn observation_for_current_player(&self) -> FdoObservation {
        let observing_player = self
            .current_player
            .unwrap_or_else(|| { FdoPlayer::BOTTOM });

        let current_trick_color: Option<FdoColor> = self
            .current_trick_color();

        let wedding_player_if_wedding_announced = match self.team_state {
            FdoTeamState::WeddingUnsolved { wedding_player, .. } => Some(wedding_player),
            FdoTeamState::WeddingSolved { wedding_player, .. } => Some(wedding_player),
            _ => None
        };

        // // ToDo: In-Place berechnen
        let re_eyes = 0;
        let kontra_eyes = 0;

        // Wir rechnen die Punkte der Teams zusammen
        // und die Anzahl der Stiche, die sie gemacht haben.
        // let team_eyes = self.get_re_players()
        //     .map(|re_players| {
        //         let mut re_eyes = 0;
        //         let mut kontra_eyes = 0;
        //
        //         for player in 0..4 {
        //             if bitflag_contains(re_players, player) {
        //                 re_eyes += self.player_eyes[player];
        //             } else {
        //                 kontra_eyes += self.player_eyes[player];
        //             }
        //         }
        //
        //         [re_eyes, kontra_eyes]
        //     })
        //     .unwrap_or_else(|| { [0, 0] });

        let allowed_actions = if self.current_phase == FdoPhase::Finished {
            FdoAllowedActions::new()
        } else {
            FdoAllowedActions::calculate_allowed_actions(
                self.current_phase,
                current_trick_color,
                self.hands[observing_player],
                self.game_type,
                self.announcements.current_player_allowed_announcements
            )
        };

        FdoObservation {
            phase: self.current_phase,
            observing_player: observing_player,

            current_player: self.current_player,
            allowed_actions_current_player: allowed_actions,

            game_starting_player: self.reservations_round.starting_player(),

            wedding_player_if_wedding_announced,
            tricks: self.tricks.clone(),

            visible_reservations: self.reservations_round.get_visible_reservations(observing_player),

            announcements: self.announcements.announcements.clone(),

            player_eyes: self.player_eyes,
            observing_player_hand: self.hands[observing_player],

            finished_stats: self.end_of_game_stats.clone(),

            phi_re_players: self.team_state.get_re_players(),

            phi_real_reservations: self.reservations_round.clone(),

            phi_real_hands: self.hands,

            phi_team_eyes: [re_eyes, kontra_eyes],

            game_type: self.game_type,

            re_lowest_announcement: self.announcements.re_lowest_announcement,
            contra_lowest_announcement: self.announcements.contra_lowest_announcement,
        }
    }
}

#[cfg(test)]
mod tests {

}

//
// #[cfg(test)]
// mod tests {
//     use crate::action::action::FdoAction::{AnnouncementBlack, AnnouncementNo30, AnnouncementNo60, AnnouncementNo90, AnnouncementReContra, CardClubAce, CardClubJack, CardClubKing, CardClubNine, CardClubQueen, CardClubTen, CardDiamondAce, CardDiamondJack, CardDiamondKing, CardDiamondNine, CardDiamondQueen, CardDiamondTen, CardHeartAce, CardHeartJack, CardHeartKing, CardHeartNine, CardHeartQueen, CardHeartTen, CardSpadeAce, CardSpadeJack, CardSpadeKing, CardSpadeNine, CardSpadeQueen, CardSpadeTen, NoAnnouncement, ReservationClubsSolo, ReservationDiamondsSolo, ReservationHealthy, ReservationHeartsSolo, ReservationJacksSolo, ReservationQueensSolo, ReservationSpadesSolo, ReservationTrumplessSolo, ReservationWedding};
//     use crate::action::action::FdoActionType::Reservation;
//     use crate::action::allowed_actions::FdoAllowedActions;
//     use crate::announcement::announcement::FdoAnnouncement::{Black, No30, No60, No90, ReContra};
//     use crate::announcement::announcement::FdoAnnouncementOccurrence;
//     use crate::basic::phase::FdoPhase;
//     use crate::basic::phase::FdoPhase::{Announcement, PlayCard};
//     use crate::card::cards::FdoCard::{ClubAce, ClubJack, ClubKing, ClubNine, ClubQueen, ClubTen, DiamondAce, DiamondJack, DiamondKing, DiamondNine, DiamondQueen, DiamondTen, HeartAce, HeartJack, HeartKing, HeartNine, HeartQueen, HeartTen, SpadeAce, SpadeJack, SpadeKing, SpadeNine, SpadeQueen, SpadeTen};
//     use crate::hand::hand::FdoHand;
//     use crate::observation::observation::FdoObservation;
//     use crate::player::player::FdoPlayer;
//     use crate::player::player_set::FdoPlayerSet;
//     use crate::reservation::reservation::{FdoReservation, FdoVisibleReservation};
//     use crate::reservation::reservation::FdoVisibleReservation::NotRevealed;
//     use crate::reservation::reservation_round::FdoReservationRound;
//     use crate::state::state::FdoState;
//     use crate::stats::additional_points::additional_points::FdoAdditionalPointsDetails;
//     use crate::stats::basic_points::basic_winning_points::FdoBasicWinningPointsDetails;
//     use crate::stats::stats::FdoEndOfGameStats;
//     use crate::trick::trick::FdoTrick;
//     use crate::game_type::game_type::FdoGameType;
//
//     #[test]
//     fn full_normal_game() {
//         // https://www.online-doppelkopf.com/spiele/99.585.453
//         let mut state = FdoState::new_game_from_hand_and_start_player(
//             [
//                 // Bottom
//                 FdoHand::from_vec(vec![HeartTen, DiamondAce, SpadeTen, ClubQueen, DiamondNine, SpadeQueen, DiamondKing, DiamondKing, HeartJack, HeartQueen, ClubJack, SpadeNine]),
//                 // Left
//                 FdoHand::from_vec(vec![DiamondJack, SpadeQueen, HeartNine, HeartJack, SpadeJack, SpadeJack, DiamondQueen, ClubAce, ClubNine, HeartKing, ClubTen, SpadeAce]),
//                 // Top
//                 FdoHand::from_vec(vec![ClubJack, DiamondQueen, HeartNine, HeartQueen, SpadeNine, SpadeKing, ClubKing, ClubAce, ClubNine, SpadeKing, SpadeAce, HeartAce]),
//                 // Right
//                 FdoHand::from_vec(vec![DiamondAce, HeartTen, HeartAce, DiamondTen, ClubQueen, DiamondNine, DiamondJack, ClubKing, DiamondTen, SpadeTen, ClubTen, HeartKing]),
//             ],
//             FdoPlayer::BOTTOM,
//         );
//
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: None,  phase: FdoPhase::Reservation, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![ReservationHealthy, ReservationDiamondsSolo, ReservationHeartsSolo, ReservationSpadesSolo, ReservationClubsSolo, ReservationTrumplessSolo, ReservationQueensSolo, ReservationJacksSolo]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[]).unwrap(), visible_reservations: [None, None, None, None], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartTen, ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondAce, DiamondKing, DiamondKing, DiamondNine, SpadeTen, SpadeNine]), finished_stats: None, phi_re_players: None, phi_real_reservations: FdoReservationRound { reservations: [None, None, None, None], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondAce, DiamondKing, DiamondKing, DiamondNine, SpadeTen, SpadeNine]), FdoHand::from_vec(vec![SpadeQueen, DiamondQueen, SpadeJack, SpadeJack, HeartJack, DiamondJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), FdoHand::from_vec(vec![HeartTen, ClubQueen, DiamondJack, DiamondAce, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartAce, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(ReservationHealthy);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: None, phase: FdoPhase::Reservation, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![ReservationHealthy, ReservationDiamondsSolo, ReservationHeartsSolo, ReservationSpadesSolo, ReservationClubsSolo, ReservationTrumplessSolo, ReservationQueensSolo, ReservationJacksSolo]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), None, None, None], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![SpadeQueen, DiamondQueen, SpadeJack, SpadeJack, HeartJack, DiamondJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing, HeartNine]), finished_stats: None, phi_re_players: None, phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), None, None, None], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondAce, DiamondKing, DiamondKing, DiamondNine, SpadeTen, SpadeNine]), FdoHand::from_vec(vec![SpadeQueen, DiamondQueen, SpadeJack, SpadeJack, HeartJack, DiamondJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), FdoHand::from_vec(vec![HeartTen, ClubQueen, DiamondJack, DiamondAce, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartAce, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(ReservationHealthy);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: None, phase: FdoPhase::Reservation, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![ReservationHealthy, ReservationDiamondsSolo, ReservationHeartsSolo, ReservationSpadesSolo, ReservationClubsSolo, ReservationTrumplessSolo, ReservationQueensSolo, ReservationJacksSolo]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), None, None], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), finished_stats: None, phi_re_players: None, phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), None, None], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondAce, DiamondKing, DiamondKing, DiamondNine, SpadeTen, SpadeNine]), FdoHand::from_vec(vec![SpadeQueen, DiamondQueen, SpadeJack, SpadeJack, HeartJack, DiamondJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), FdoHand::from_vec(vec![HeartTen, ClubQueen, DiamondJack, DiamondAce, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartAce, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(ReservationHealthy);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: None, phase: FdoPhase::Reservation, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![ReservationHealthy, ReservationDiamondsSolo, ReservationHeartsSolo, ReservationSpadesSolo, ReservationClubsSolo, ReservationTrumplessSolo, ReservationQueensSolo, ReservationJacksSolo]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), None], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartTen, ClubQueen, DiamondJack, DiamondAce, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartAce, HeartKing]), finished_stats: None, phi_re_players: None, phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), None], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondAce, DiamondKing, DiamondKing, DiamondNine, SpadeTen, SpadeNine]), FdoHand::from_vec(vec![SpadeQueen, DiamondQueen, SpadeJack, SpadeJack, HeartJack, DiamondJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), FdoHand::from_vec(vec![HeartTen, ClubQueen, DiamondJack, DiamondAce, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartAce, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(ReservationHealthy);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartTen, ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondAce, DiamondKing, DiamondKing, DiamondNine, SpadeTen, SpadeNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondAce, DiamondKing, DiamondKing, DiamondNine, SpadeTen, SpadeNine]), FdoHand::from_vec(vec![SpadeQueen, DiamondQueen, SpadeJack, SpadeJack, HeartJack, DiamondJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), FdoHand::from_vec(vec![HeartTen, ClubQueen, DiamondJack, DiamondAce, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartAce, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![SpadeQueen, DiamondQueen, SpadeJack, SpadeJack, HeartJack, DiamondJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondAce, DiamondKing, DiamondKing, DiamondNine, SpadeTen, SpadeNine]), FdoHand::from_vec(vec![SpadeQueen, DiamondQueen, SpadeJack, SpadeJack, HeartJack, DiamondJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), FdoHand::from_vec(vec![HeartTen, ClubQueen, DiamondJack, DiamondAce, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartAce, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondAce, DiamondKing, DiamondKing, DiamondNine, SpadeTen, SpadeNine]), FdoHand::from_vec(vec![SpadeQueen, DiamondQueen, SpadeJack, SpadeJack, HeartJack, DiamondJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), FdoHand::from_vec(vec![HeartTen, ClubQueen, DiamondJack, DiamondAce, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartAce, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartTen, ClubQueen, DiamondJack, DiamondAce, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartAce, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondAce, DiamondKing, DiamondKing, DiamondNine, SpadeTen, SpadeNine]), FdoHand::from_vec(vec![SpadeQueen, DiamondQueen, SpadeJack, SpadeJack, HeartJack, DiamondJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), FdoHand::from_vec(vec![HeartTen, ClubQueen, DiamondJack, DiamondAce, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartAce, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondNine, CardDiamondKing, CardDiamondAce, CardHeartTen, CardHeartJack, CardHeartQueen, CardClubJack, CardClubQueen, CardSpadeNine, CardSpadeTen, CardSpadeQueen]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartTen, ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondAce, DiamondKing, DiamondKing, DiamondNine, SpadeTen, SpadeNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondAce, DiamondKing, DiamondKing, DiamondNine, SpadeTen, SpadeNine]), FdoHand::from_vec(vec![SpadeQueen, DiamondQueen, SpadeJack, SpadeJack, HeartJack, DiamondJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), FdoHand::from_vec(vec![HeartTen, ClubQueen, DiamondJack, DiamondAce, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartAce, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardHeartTen);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![SpadeQueen, DiamondQueen, SpadeJack, SpadeJack, HeartJack, DiamondJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondAce, DiamondKing, DiamondKing, DiamondNine, SpadeTen, SpadeNine]), FdoHand::from_vec(vec![SpadeQueen, DiamondQueen, SpadeJack, SpadeJack, HeartJack, DiamondJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), FdoHand::from_vec(vec![HeartTen, ClubQueen, DiamondJack, DiamondAce, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartAce, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondAce, DiamondKing, DiamondKing, DiamondNine, SpadeTen, SpadeNine]), FdoHand::from_vec(vec![SpadeQueen, DiamondQueen, SpadeJack, SpadeJack, HeartJack, DiamondJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), FdoHand::from_vec(vec![HeartTen, ClubQueen, DiamondJack, DiamondAce, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartAce, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartTen, ClubQueen, DiamondJack, DiamondAce, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartAce, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondAce, DiamondKing, DiamondKing, DiamondNine, SpadeTen, SpadeNine]), FdoHand::from_vec(vec![SpadeQueen, DiamondQueen, SpadeJack, SpadeJack, HeartJack, DiamondJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), FdoHand::from_vec(vec![HeartTen, ClubQueen, DiamondJack, DiamondAce, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartAce, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(AnnouncementReContra);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondAce, DiamondKing, DiamondKing, DiamondNine, SpadeTen, SpadeNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondAce, DiamondKing, DiamondKing, DiamondNine, SpadeTen, SpadeNine]), FdoHand::from_vec(vec![SpadeQueen, DiamondQueen, SpadeJack, SpadeJack, HeartJack, DiamondJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), FdoHand::from_vec(vec![HeartTen, ClubQueen, DiamondJack, DiamondAce, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartAce, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(ReContra), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![SpadeQueen, DiamondQueen, SpadeJack, SpadeJack, HeartJack, DiamondJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondAce, DiamondKing, DiamondKing, DiamondNine, SpadeTen, SpadeNine]), FdoHand::from_vec(vec![SpadeQueen, DiamondQueen, SpadeJack, SpadeJack, HeartJack, DiamondJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), FdoHand::from_vec(vec![HeartTen, ClubQueen, DiamondJack, DiamondAce, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartAce, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(ReContra), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondAce, DiamondKing, DiamondKing, DiamondNine, SpadeTen, SpadeNine]), FdoHand::from_vec(vec![SpadeQueen, DiamondQueen, SpadeJack, SpadeJack, HeartJack, DiamondJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), FdoHand::from_vec(vec![HeartTen, ClubQueen, DiamondJack, DiamondAce, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartAce, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(ReContra), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondJack, CardDiamondQueen, CardHeartJack, CardSpadeJack, CardSpadeQueen]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![SpadeQueen, DiamondQueen, SpadeJack, SpadeJack, HeartJack, DiamondJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondAce, DiamondKing, DiamondKing, DiamondNine, SpadeTen, SpadeNine]), FdoHand::from_vec(vec![SpadeQueen, DiamondQueen, SpadeJack, SpadeJack, HeartJack, DiamondJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), FdoHand::from_vec(vec![HeartTen, ClubQueen, DiamondJack, DiamondAce, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartAce, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(ReContra), contra_lowest_announcement: None });
//
//         state.play_action(CardDiamondJack);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondAce, DiamondKing, DiamondKing, DiamondNine, SpadeTen, SpadeNine]), FdoHand::from_vec(vec![SpadeQueen, DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), FdoHand::from_vec(vec![HeartTen, ClubQueen, DiamondJack, DiamondAce, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartAce, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(ReContra), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartTen, ClubQueen, DiamondJack, DiamondAce, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartAce, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondAce, DiamondKing, DiamondKing, DiamondNine, SpadeTen, SpadeNine]), FdoHand::from_vec(vec![SpadeQueen, DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), FdoHand::from_vec(vec![HeartTen, ClubQueen, DiamondJack, DiamondAce, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartAce, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(ReContra), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondAce, DiamondKing, DiamondKing, DiamondNine, SpadeTen, SpadeNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondAce, DiamondKing, DiamondKing, DiamondNine, SpadeTen, SpadeNine]), FdoHand::from_vec(vec![SpadeQueen, DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), FdoHand::from_vec(vec![HeartTen, ClubQueen, DiamondJack, DiamondAce, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartAce, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(ReContra), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![SpadeQueen, DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondAce, DiamondKing, DiamondKing, DiamondNine, SpadeTen, SpadeNine]), FdoHand::from_vec(vec![SpadeQueen, DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), FdoHand::from_vec(vec![HeartTen, ClubQueen, DiamondJack, DiamondAce, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartAce, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(ReContra), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondQueen, CardHeartQueen, CardClubJack]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondAce, DiamondKing, DiamondKing, DiamondNine, SpadeTen, SpadeNine]), FdoHand::from_vec(vec![SpadeQueen, DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), FdoHand::from_vec(vec![HeartTen, ClubQueen, DiamondJack, DiamondAce, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartAce, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(ReContra), contra_lowest_announcement: None });
//
//         state.play_action(CardClubJack);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartTen, ClubQueen, DiamondJack, DiamondAce, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartAce, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondAce, DiamondKing, DiamondKing, DiamondNine, SpadeTen, SpadeNine]), FdoHand::from_vec(vec![SpadeQueen, DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), FdoHand::from_vec(vec![HeartTen, ClubQueen, DiamondJack, DiamondAce, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartAce, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(ReContra), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondAce, DiamondKing, DiamondKing, DiamondNine, SpadeTen, SpadeNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondAce, DiamondKing, DiamondKing, DiamondNine, SpadeTen, SpadeNine]), FdoHand::from_vec(vec![SpadeQueen, DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), FdoHand::from_vec(vec![HeartTen, ClubQueen, DiamondJack, DiamondAce, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartAce, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(ReContra), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![SpadeQueen, DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondAce, DiamondKing, DiamondKing, DiamondNine, SpadeTen, SpadeNine]), FdoHand::from_vec(vec![SpadeQueen, DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), FdoHand::from_vec(vec![HeartTen, ClubQueen, DiamondJack, DiamondAce, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartAce, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(ReContra), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondAce, DiamondKing, DiamondKing, DiamondNine, SpadeTen, SpadeNine]), FdoHand::from_vec(vec![SpadeQueen, DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), FdoHand::from_vec(vec![HeartTen, ClubQueen, DiamondJack, DiamondAce, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartAce, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(ReContra), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondNine, CardDiamondTen, CardDiamondJack, CardDiamondAce, CardHeartTen, CardClubQueen]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartTen, ClubQueen, DiamondJack, DiamondAce, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartAce, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondAce, DiamondKing, DiamondKing, DiamondNine, SpadeTen, SpadeNine]), FdoHand::from_vec(vec![SpadeQueen, DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), FdoHand::from_vec(vec![HeartTen, ClubQueen, DiamondJack, DiamondAce, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartAce, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(ReContra), contra_lowest_announcement: None });
//
//         state.play_action(CardDiamondAce);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }]).unwrap(), player_eyes: [25, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondAce, DiamondKing, DiamondKing, DiamondNine, SpadeTen, SpadeNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondAce, DiamondKing, DiamondKing, DiamondNine, SpadeTen, SpadeNine]), FdoHand::from_vec(vec![SpadeQueen, DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), FdoHand::from_vec(vec![HeartTen, ClubQueen, DiamondJack, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartAce, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(ReContra), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }]).unwrap(), player_eyes: [25, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![SpadeQueen, DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondAce, DiamondKing, DiamondKing, DiamondNine, SpadeTen, SpadeNine]), FdoHand::from_vec(vec![SpadeQueen, DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), FdoHand::from_vec(vec![HeartTen, ClubQueen, DiamondJack, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartAce, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(ReContra), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }]).unwrap(), player_eyes: [25, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondAce, DiamondKing, DiamondKing, DiamondNine, SpadeTen, SpadeNine]), FdoHand::from_vec(vec![SpadeQueen, DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), FdoHand::from_vec(vec![HeartTen, ClubQueen, DiamondJack, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartAce, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(ReContra), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }]).unwrap(), player_eyes: [25, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartTen, ClubQueen, DiamondJack, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartAce, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondAce, DiamondKing, DiamondKing, DiamondNine, SpadeTen, SpadeNine]), FdoHand::from_vec(vec![SpadeQueen, DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), FdoHand::from_vec(vec![HeartTen, ClubQueen, DiamondJack, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartAce, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(ReContra), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondNine, CardDiamondKing, CardDiamondAce, CardHeartJack, CardHeartQueen, CardClubJack, CardClubQueen, CardSpadeNine, CardSpadeTen, CardSpadeQueen]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }]).unwrap(), player_eyes: [25, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondAce, DiamondKing, DiamondKing, DiamondNine, SpadeTen, SpadeNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondAce, DiamondKing, DiamondKing, DiamondNine, SpadeTen, SpadeNine]), FdoHand::from_vec(vec![SpadeQueen, DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), FdoHand::from_vec(vec![HeartTen, ClubQueen, DiamondJack, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartAce, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(ReContra), contra_lowest_announcement: None });
//
//         state.play_action(CardDiamondAce);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }]).unwrap(), player_eyes: [25, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![SpadeQueen, DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, DiamondNine, SpadeTen, SpadeNine]), FdoHand::from_vec(vec![SpadeQueen, DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), FdoHand::from_vec(vec![HeartTen, ClubQueen, DiamondJack, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartAce, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(ReContra), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }]).unwrap(), player_eyes: [25, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, DiamondNine, SpadeTen, SpadeNine]), FdoHand::from_vec(vec![SpadeQueen, DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), FdoHand::from_vec(vec![HeartTen, ClubQueen, DiamondJack, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartAce, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(ReContra), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }]).unwrap(), player_eyes: [25, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartTen, ClubQueen, DiamondJack, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartAce, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, DiamondNine, SpadeTen, SpadeNine]), FdoHand::from_vec(vec![SpadeQueen, DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), FdoHand::from_vec(vec![HeartTen, ClubQueen, DiamondJack, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartAce, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(ReContra), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }]).unwrap(), player_eyes: [25, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, DiamondNine, SpadeTen, SpadeNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, DiamondNine, SpadeTen, SpadeNine]), FdoHand::from_vec(vec![SpadeQueen, DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), FdoHand::from_vec(vec![HeartTen, ClubQueen, DiamondJack, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartAce, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(ReContra), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondQueen, CardHeartJack, CardSpadeJack, CardSpadeQueen]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }]).unwrap(), player_eyes: [25, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![SpadeQueen, DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, DiamondNine, SpadeTen, SpadeNine]), FdoHand::from_vec(vec![SpadeQueen, DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), FdoHand::from_vec(vec![HeartTen, ClubQueen, DiamondJack, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartAce, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(ReContra), contra_lowest_announcement: None });
//
//         state.play_action(CardSpadeQueen);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }]).unwrap(), player_eyes: [25, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, DiamondNine, SpadeTen, SpadeNine]), FdoHand::from_vec(vec![DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), FdoHand::from_vec(vec![HeartTen, ClubQueen, DiamondJack, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartAce, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(ReContra), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }]).unwrap(), player_eyes: [25, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartTen, ClubQueen, DiamondJack, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartAce, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, DiamondNine, SpadeTen, SpadeNine]), FdoHand::from_vec(vec![DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), FdoHand::from_vec(vec![HeartTen, ClubQueen, DiamondJack, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartAce, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(ReContra), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }]).unwrap(), player_eyes: [25, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, DiamondNine, SpadeTen, SpadeNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, DiamondNine, SpadeTen, SpadeNine]), FdoHand::from_vec(vec![DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), FdoHand::from_vec(vec![HeartTen, ClubQueen, DiamondJack, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartAce, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(ReContra), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }]).unwrap(), player_eyes: [25, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, DiamondNine, SpadeTen, SpadeNine]), FdoHand::from_vec(vec![DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), FdoHand::from_vec(vec![HeartTen, ClubQueen, DiamondJack, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartAce, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(ReContra), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondQueen, CardHeartQueen]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }]).unwrap(), player_eyes: [25, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, DiamondNine, SpadeTen, SpadeNine]), FdoHand::from_vec(vec![DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), FdoHand::from_vec(vec![HeartTen, ClubQueen, DiamondJack, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartAce, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(ReContra), contra_lowest_announcement: None });
//
//         state.play_action(CardDiamondQueen);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }]).unwrap(), player_eyes: [25, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartTen, ClubQueen, DiamondJack, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartAce, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, DiamondNine, SpadeTen, SpadeNine]), FdoHand::from_vec(vec![DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), FdoHand::from_vec(vec![HeartTen, ClubQueen, DiamondJack, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartAce, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(ReContra), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }]).unwrap(), player_eyes: [25, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, DiamondNine, SpadeTen, SpadeNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, DiamondNine, SpadeTen, SpadeNine]), FdoHand::from_vec(vec![DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), FdoHand::from_vec(vec![HeartTen, ClubQueen, DiamondJack, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartAce, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(ReContra), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }]).unwrap(), player_eyes: [25, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, DiamondNine, SpadeTen, SpadeNine]), FdoHand::from_vec(vec![DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), FdoHand::from_vec(vec![HeartTen, ClubQueen, DiamondJack, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartAce, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(ReContra), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }]).unwrap(), player_eyes: [25, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, DiamondNine, SpadeTen, SpadeNine]), FdoHand::from_vec(vec![DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), FdoHand::from_vec(vec![HeartTen, ClubQueen, DiamondJack, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartAce, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(ReContra), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondNine, CardDiamondTen, CardDiamondJack, CardHeartTen, CardClubQueen]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }]).unwrap(), player_eyes: [25, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartTen, ClubQueen, DiamondJack, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartAce, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, DiamondNine, SpadeTen, SpadeNine]), FdoHand::from_vec(vec![DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), FdoHand::from_vec(vec![HeartTen, ClubQueen, DiamondJack, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartAce, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(ReContra), contra_lowest_announcement: None });
//
//         state.play_action(CardHeartTen);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }]).unwrap(), player_eyes: [25, 0, 0, 27], observing_player_hand: FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartAce, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, DiamondNine, SpadeTen, SpadeNine]), FdoHand::from_vec(vec![DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartAce, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(ReContra), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }]).unwrap(), player_eyes: [25, 0, 0, 27], observing_player_hand: FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, DiamondNine, SpadeTen, SpadeNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, DiamondNine, SpadeTen, SpadeNine]), FdoHand::from_vec(vec![DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartAce, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(ReContra), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }]).unwrap(), player_eyes: [25, 0, 0, 27], observing_player_hand: FdoHand::from_vec(vec![DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, DiamondNine, SpadeTen, SpadeNine]), FdoHand::from_vec(vec![DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartAce, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(ReContra), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }]).unwrap(), player_eyes: [25, 0, 0, 27], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, DiamondNine, SpadeTen, SpadeNine]), FdoHand::from_vec(vec![DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartAce, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(ReContra), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondNine, CardDiamondTen, CardDiamondJack, CardHeartKing, CardHeartAce, CardClubTen, CardClubQueen, CardClubKing, CardSpadeTen]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }]).unwrap(), player_eyes: [25, 0, 0, 27], observing_player_hand: FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartAce, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, DiamondNine, SpadeTen, SpadeNine]), FdoHand::from_vec(vec![DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartAce, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(ReContra), contra_lowest_announcement: None });
//
//         state.play_action(CardHeartAce);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartAce), None, None, None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }]).unwrap(), player_eyes: [25, 0, 0, 27], observing_player_hand: FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, DiamondNine, SpadeTen, SpadeNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, DiamondNine, SpadeTen, SpadeNine]), FdoHand::from_vec(vec![DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(ReContra), contra_lowest_announcement: None });
//
//         state.play_action(AnnouncementNo90);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartAce), None, None, None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 9, player: FdoPlayer::BOTTOM, announcement: No90 }]).unwrap(), player_eyes: [25, 0, 0, 27], observing_player_hand: FdoHand::from_vec(vec![DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, DiamondNine, SpadeTen, SpadeNine]), FdoHand::from_vec(vec![DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No90), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartAce), None, None, None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 9, player: FdoPlayer::BOTTOM, announcement: No90 }]).unwrap(), player_eyes: [25, 0, 0, 27], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, DiamondNine, SpadeTen, SpadeNine]), FdoHand::from_vec(vec![DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No90), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartAce), None, None, None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 9, player: FdoPlayer::BOTTOM, announcement: No90 }]).unwrap(), player_eyes: [25, 0, 0, 27], observing_player_hand: FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, DiamondNine, SpadeTen, SpadeNine]), FdoHand::from_vec(vec![DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No90), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondNine, CardDiamondKing, CardHeartJack, CardHeartQueen, CardClubJack, CardClubQueen, CardSpadeNine, CardSpadeTen, CardSpadeQueen]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartAce), None, None, None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 9, player: FdoPlayer::BOTTOM, announcement: No90 }]).unwrap(), player_eyes: [25, 0, 0, 27], observing_player_hand: FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, DiamondNine, SpadeTen, SpadeNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, DiamondNine, SpadeTen, SpadeNine]), FdoHand::from_vec(vec![DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No90), contra_lowest_announcement: None });
//
//         state.play_action(CardSpadeTen);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeTen), None, None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 9, player: FdoPlayer::BOTTOM, announcement: No90 }]).unwrap(), player_eyes: [25, 0, 0, 27], observing_player_hand: FdoHand::from_vec(vec![DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, DiamondNine, SpadeNine]), FdoHand::from_vec(vec![DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No90), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeTen), None, None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 9, player: FdoPlayer::BOTTOM, announcement: No90 }]).unwrap(), player_eyes: [25, 0, 0, 27], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, DiamondNine, SpadeNine]), FdoHand::from_vec(vec![DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No90), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeTen), None, None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 9, player: FdoPlayer::BOTTOM, announcement: No90 }]).unwrap(), player_eyes: [25, 0, 0, 27], observing_player_hand: FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, DiamondNine, SpadeNine]), FdoHand::from_vec(vec![DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No90), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeTen), None, None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 9, player: FdoPlayer::BOTTOM, announcement: No90 }]).unwrap(), player_eyes: [25, 0, 0, 27], observing_player_hand: FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, DiamondNine, SpadeNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, DiamondNine, SpadeNine]), FdoHand::from_vec(vec![DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No90), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardHeartNine, CardHeartKing]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeTen), None, None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 9, player: FdoPlayer::BOTTOM, announcement: No90 }]).unwrap(), player_eyes: [25, 0, 0, 27], observing_player_hand: FdoHand::from_vec(vec![DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, DiamondNine, SpadeNine]), FdoHand::from_vec(vec![DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No90), contra_lowest_announcement: None });
//
//         state.play_action(CardHeartNine);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeTen), Some(HeartNine), None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 9, player: FdoPlayer::BOTTOM, announcement: No90 }]).unwrap(), player_eyes: [25, 0, 0, 27], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, DiamondNine, SpadeNine]), FdoHand::from_vec(vec![DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing]), FdoHand::from_vec(vec![HeartQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No90), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeTen), Some(HeartNine), None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 9, player: FdoPlayer::BOTTOM, announcement: No90 }]).unwrap(), player_eyes: [25, 0, 0, 27], observing_player_hand: FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, DiamondNine, SpadeNine]), FdoHand::from_vec(vec![DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing]), FdoHand::from_vec(vec![HeartQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No90), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeTen), Some(HeartNine), None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 9, player: FdoPlayer::BOTTOM, announcement: No90 }]).unwrap(), player_eyes: [25, 0, 0, 27], observing_player_hand: FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, DiamondNine, SpadeNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, DiamondNine, SpadeNine]), FdoHand::from_vec(vec![DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing]), FdoHand::from_vec(vec![HeartQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No90), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeTen), Some(HeartNine), None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 9, player: FdoPlayer::BOTTOM, announcement: No90 }]).unwrap(), player_eyes: [25, 0, 0, 27], observing_player_hand: FdoHand::from_vec(vec![DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, DiamondNine, SpadeNine]), FdoHand::from_vec(vec![DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing]), FdoHand::from_vec(vec![HeartQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No90), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardHeartNine, CardHeartAce]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeTen), Some(HeartNine), None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 9, player: FdoPlayer::BOTTOM, announcement: No90 }]).unwrap(), player_eyes: [25, 0, 0, 27], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, DiamondNine, SpadeNine]), FdoHand::from_vec(vec![DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing]), FdoHand::from_vec(vec![HeartQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartNine]), FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No90), contra_lowest_announcement: None });
//
//         state.play_action(CardHeartNine);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeTen), Some(HeartNine), Some(HeartNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartAce) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 9, player: FdoPlayer::BOTTOM, announcement: No90 }]).unwrap(), player_eyes: [25, 0, 0, 48], observing_player_hand: FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, DiamondNine, SpadeNine]), FdoHand::from_vec(vec![DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing]), FdoHand::from_vec(vec![HeartQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce]), FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No90), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeTen), Some(HeartNine), Some(HeartNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartAce) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 9, player: FdoPlayer::BOTTOM, announcement: No90 }]).unwrap(), player_eyes: [25, 0, 0, 48], observing_player_hand: FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, DiamondNine, SpadeNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, DiamondNine, SpadeNine]), FdoHand::from_vec(vec![DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing]), FdoHand::from_vec(vec![HeartQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce]), FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No90), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeTen), Some(HeartNine), Some(HeartNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartAce) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 9, player: FdoPlayer::BOTTOM, announcement: No90 }]).unwrap(), player_eyes: [25, 0, 0, 48], observing_player_hand: FdoHand::from_vec(vec![DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, DiamondNine, SpadeNine]), FdoHand::from_vec(vec![DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing]), FdoHand::from_vec(vec![HeartQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce]), FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No90), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeTen), Some(HeartNine), Some(HeartNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartAce) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 9, player: FdoPlayer::BOTTOM, announcement: No90 }]).unwrap(), player_eyes: [25, 0, 0, 48], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, DiamondNine, SpadeNine]), FdoHand::from_vec(vec![DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing]), FdoHand::from_vec(vec![HeartQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce]), FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No90), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondNine, CardDiamondTen, CardDiamondJack, CardHeartKing, CardClubTen, CardClubQueen, CardClubKing, CardSpadeTen]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeTen), Some(HeartNine), Some(HeartNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartAce) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 9, player: FdoPlayer::BOTTOM, announcement: No90 }]).unwrap(), player_eyes: [25, 0, 0, 48], observing_player_hand: FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, DiamondNine, SpadeNine]), FdoHand::from_vec(vec![DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing]), FdoHand::from_vec(vec![HeartQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce]), FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondTen, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No90), contra_lowest_announcement: None });
//
//         state.play_action(CardDiamondTen);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeTen), Some(HeartNine), Some(HeartNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(DiamondTen), None, None, None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 9, player: FdoPlayer::BOTTOM, announcement: No90 }]).unwrap(), player_eyes: [25, 0, 0, 48], observing_player_hand: FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, DiamondNine, SpadeNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, DiamondNine, SpadeNine]), FdoHand::from_vec(vec![DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing]), FdoHand::from_vec(vec![HeartQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce]), FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No90), contra_lowest_announcement: None });
//
//         state.play_action(AnnouncementNo60);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeTen), Some(HeartNine), Some(HeartNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(DiamondTen), None, None, None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 9, player: FdoPlayer::BOTTOM, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 13, player: FdoPlayer::BOTTOM, announcement: No60 }]).unwrap(), player_eyes: [25, 0, 0, 48], observing_player_hand: FdoHand::from_vec(vec![DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, DiamondNine, SpadeNine]), FdoHand::from_vec(vec![DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing]), FdoHand::from_vec(vec![HeartQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce]), FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No60), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeTen), Some(HeartNine), Some(HeartNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(DiamondTen), None, None, None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 9, player: FdoPlayer::BOTTOM, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 13, player: FdoPlayer::BOTTOM, announcement: No60 }]).unwrap(), player_eyes: [25, 0, 0, 48], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, DiamondNine, SpadeNine]), FdoHand::from_vec(vec![DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing]), FdoHand::from_vec(vec![HeartQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce]), FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No60), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeTen), Some(HeartNine), Some(HeartNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(DiamondTen), None, None, None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 9, player: FdoPlayer::BOTTOM, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 13, player: FdoPlayer::BOTTOM, announcement: No60 }]).unwrap(), player_eyes: [25, 0, 0, 48], observing_player_hand: FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, DiamondNine, SpadeNine]), FdoHand::from_vec(vec![DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing]), FdoHand::from_vec(vec![HeartQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce]), FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No60), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondNine, CardDiamondKing, CardHeartJack, CardHeartQueen, CardClubJack, CardClubQueen, CardSpadeQueen]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeTen), Some(HeartNine), Some(HeartNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(DiamondTen), None, None, None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 9, player: FdoPlayer::BOTTOM, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 13, player: FdoPlayer::BOTTOM, announcement: No60 }]).unwrap(), player_eyes: [25, 0, 0, 48], observing_player_hand: FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, DiamondNine, SpadeNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![ClubQueen, SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, DiamondNine, SpadeNine]), FdoHand::from_vec(vec![DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing]), FdoHand::from_vec(vec![HeartQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce]), FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No60), contra_lowest_announcement: None });
//
//         state.play_action(CardClubQueen);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeTen), Some(HeartNine), Some(HeartNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(DiamondTen), Some(ClubQueen), None, None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 9, player: FdoPlayer::BOTTOM, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 13, player: FdoPlayer::BOTTOM, announcement: No60 }]).unwrap(), player_eyes: [25, 0, 0, 48], observing_player_hand: FdoHand::from_vec(vec![DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, DiamondNine, SpadeNine]), FdoHand::from_vec(vec![DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing]), FdoHand::from_vec(vec![HeartQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce]), FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No60), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeTen), Some(HeartNine), Some(HeartNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(DiamondTen), Some(ClubQueen), None, None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 9, player: FdoPlayer::BOTTOM, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 13, player: FdoPlayer::BOTTOM, announcement: No60 }]).unwrap(), player_eyes: [25, 0, 0, 48], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, DiamondNine, SpadeNine]), FdoHand::from_vec(vec![DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing]), FdoHand::from_vec(vec![HeartQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce]), FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No60), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeTen), Some(HeartNine), Some(HeartNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(DiamondTen), Some(ClubQueen), None, None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 9, player: FdoPlayer::BOTTOM, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 13, player: FdoPlayer::BOTTOM, announcement: No60 }]).unwrap(), player_eyes: [25, 0, 0, 48], observing_player_hand: FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, DiamondNine, SpadeNine]), FdoHand::from_vec(vec![DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing]), FdoHand::from_vec(vec![HeartQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce]), FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No60), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeTen), Some(HeartNine), Some(HeartNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(DiamondTen), Some(ClubQueen), None, None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 9, player: FdoPlayer::BOTTOM, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 13, player: FdoPlayer::BOTTOM, announcement: No60 }]).unwrap(), player_eyes: [25, 0, 0, 48], observing_player_hand: FdoHand::from_vec(vec![SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, DiamondNine, SpadeNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, DiamondNine, SpadeNine]), FdoHand::from_vec(vec![DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing]), FdoHand::from_vec(vec![HeartQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce]), FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No60), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondQueen, CardHeartJack, CardSpadeJack]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeTen), Some(HeartNine), Some(HeartNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(DiamondTen), Some(ClubQueen), None, None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 9, player: FdoPlayer::BOTTOM, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 13, player: FdoPlayer::BOTTOM, announcement: No60 }]).unwrap(), player_eyes: [25, 0, 0, 48], observing_player_hand: FdoHand::from_vec(vec![DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, DiamondNine, SpadeNine]), FdoHand::from_vec(vec![DiamondQueen, SpadeJack, SpadeJack, HeartJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing]), FdoHand::from_vec(vec![HeartQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce]), FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No60), contra_lowest_announcement: None });
//
//         state.play_action(CardHeartJack);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeTen), Some(HeartNine), Some(HeartNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(DiamondTen), Some(ClubQueen), Some(HeartJack), None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 9, player: FdoPlayer::BOTTOM, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 13, player: FdoPlayer::BOTTOM, announcement: No60 }]).unwrap(), player_eyes: [25, 0, 0, 48], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, DiamondNine, SpadeNine]), FdoHand::from_vec(vec![DiamondQueen, SpadeJack, SpadeJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing]), FdoHand::from_vec(vec![HeartQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce]), FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No60), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeTen), Some(HeartNine), Some(HeartNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(DiamondTen), Some(ClubQueen), Some(HeartJack), None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 9, player: FdoPlayer::BOTTOM, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 13, player: FdoPlayer::BOTTOM, announcement: No60 }]).unwrap(), player_eyes: [25, 0, 0, 48], observing_player_hand: FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, DiamondNine, SpadeNine]), FdoHand::from_vec(vec![DiamondQueen, SpadeJack, SpadeJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing]), FdoHand::from_vec(vec![HeartQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce]), FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No60), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeTen), Some(HeartNine), Some(HeartNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(DiamondTen), Some(ClubQueen), Some(HeartJack), None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 9, player: FdoPlayer::BOTTOM, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 13, player: FdoPlayer::BOTTOM, announcement: No60 }]).unwrap(), player_eyes: [25, 0, 0, 48], observing_player_hand: FdoHand::from_vec(vec![SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, DiamondNine, SpadeNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, DiamondNine, SpadeNine]), FdoHand::from_vec(vec![DiamondQueen, SpadeJack, SpadeJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing]), FdoHand::from_vec(vec![HeartQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce]), FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No60), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeTen), Some(HeartNine), Some(HeartNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(DiamondTen), Some(ClubQueen), Some(HeartJack), None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 9, player: FdoPlayer::BOTTOM, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 13, player: FdoPlayer::BOTTOM, announcement: No60 }]).unwrap(), player_eyes: [25, 0, 0, 48], observing_player_hand: FdoHand::from_vec(vec![DiamondQueen, SpadeJack, SpadeJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, DiamondNine, SpadeNine]), FdoHand::from_vec(vec![DiamondQueen, SpadeJack, SpadeJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing]), FdoHand::from_vec(vec![HeartQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce]), FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No60), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardHeartQueen]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeTen), Some(HeartNine), Some(HeartNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(DiamondTen), Some(ClubQueen), Some(HeartJack), None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 9, player: FdoPlayer::BOTTOM, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 13, player: FdoPlayer::BOTTOM, announcement: No60 }]).unwrap(), player_eyes: [25, 0, 0, 48], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, DiamondNine, SpadeNine]), FdoHand::from_vec(vec![DiamondQueen, SpadeJack, SpadeJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing]), FdoHand::from_vec(vec![HeartQueen, ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce]), FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No60), contra_lowest_announcement: None });
//
//         state.play_action(CardHeartQueen);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeTen), Some(HeartNine), Some(HeartNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(DiamondTen), Some(ClubQueen), Some(HeartJack), Some(HeartQueen)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(ClubQueen) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 9, player: FdoPlayer::BOTTOM, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 13, player: FdoPlayer::BOTTOM, announcement: No60 }]).unwrap(), player_eyes: [43, 0, 0, 48], observing_player_hand: FdoHand::from_vec(vec![SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, DiamondNine, SpadeNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, DiamondNine, SpadeNine]), FdoHand::from_vec(vec![DiamondQueen, SpadeJack, SpadeJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing]), FdoHand::from_vec(vec![ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce]), FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No60), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeTen), Some(HeartNine), Some(HeartNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(DiamondTen), Some(ClubQueen), Some(HeartJack), Some(HeartQueen)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(ClubQueen) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 9, player: FdoPlayer::BOTTOM, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 13, player: FdoPlayer::BOTTOM, announcement: No60 }]).unwrap(), player_eyes: [43, 0, 0, 48], observing_player_hand: FdoHand::from_vec(vec![DiamondQueen, SpadeJack, SpadeJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, DiamondNine, SpadeNine]), FdoHand::from_vec(vec![DiamondQueen, SpadeJack, SpadeJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing]), FdoHand::from_vec(vec![ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce]), FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No60), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeTen), Some(HeartNine), Some(HeartNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(DiamondTen), Some(ClubQueen), Some(HeartJack), Some(HeartQueen)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(ClubQueen) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 9, player: FdoPlayer::BOTTOM, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 13, player: FdoPlayer::BOTTOM, announcement: No60 }]).unwrap(), player_eyes: [43, 0, 0, 48], observing_player_hand: FdoHand::from_vec(vec![ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, DiamondNine, SpadeNine]), FdoHand::from_vec(vec![DiamondQueen, SpadeJack, SpadeJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing]), FdoHand::from_vec(vec![ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce]), FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No60), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeTen), Some(HeartNine), Some(HeartNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(DiamondTen), Some(ClubQueen), Some(HeartJack), Some(HeartQueen)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(ClubQueen) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 9, player: FdoPlayer::BOTTOM, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 13, player: FdoPlayer::BOTTOM, announcement: No60 }]).unwrap(), player_eyes: [43, 0, 0, 48], observing_player_hand: FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, DiamondNine, SpadeNine]), FdoHand::from_vec(vec![DiamondQueen, SpadeJack, SpadeJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing]), FdoHand::from_vec(vec![ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce]), FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No60), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondNine, CardDiamondKing, CardHeartJack, CardHeartQueen, CardClubJack, CardSpadeNine, CardSpadeQueen]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeTen), Some(HeartNine), Some(HeartNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(DiamondTen), Some(ClubQueen), Some(HeartJack), Some(HeartQueen)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(ClubQueen) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 9, player: FdoPlayer::BOTTOM, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 13, player: FdoPlayer::BOTTOM, announcement: No60 }]).unwrap(), player_eyes: [43, 0, 0, 48], observing_player_hand: FdoHand::from_vec(vec![SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, DiamondNine, SpadeNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, DiamondNine, SpadeNine]), FdoHand::from_vec(vec![DiamondQueen, SpadeJack, SpadeJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing]), FdoHand::from_vec(vec![ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce]), FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No60), contra_lowest_announcement: None });
//
//         state.play_action(CardDiamondNine);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeTen), Some(HeartNine), Some(HeartNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(DiamondTen), Some(ClubQueen), Some(HeartJack), Some(HeartQueen)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(DiamondNine), None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 9, player: FdoPlayer::BOTTOM, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 13, player: FdoPlayer::BOTTOM, announcement: No60 }]).unwrap(), player_eyes: [43, 0, 0, 48], observing_player_hand: FdoHand::from_vec(vec![DiamondQueen, SpadeJack, SpadeJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, SpadeNine]), FdoHand::from_vec(vec![DiamondQueen, SpadeJack, SpadeJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing]), FdoHand::from_vec(vec![ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce]), FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No60), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeTen), Some(HeartNine), Some(HeartNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(DiamondTen), Some(ClubQueen), Some(HeartJack), Some(HeartQueen)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(DiamondNine), None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 9, player: FdoPlayer::BOTTOM, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 13, player: FdoPlayer::BOTTOM, announcement: No60 }]).unwrap(), player_eyes: [43, 0, 0, 48], observing_player_hand: FdoHand::from_vec(vec![ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, SpadeNine]), FdoHand::from_vec(vec![DiamondQueen, SpadeJack, SpadeJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing]), FdoHand::from_vec(vec![ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce]), FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No60), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeTen), Some(HeartNine), Some(HeartNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(DiamondTen), Some(ClubQueen), Some(HeartJack), Some(HeartQueen)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(DiamondNine), None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 9, player: FdoPlayer::BOTTOM, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 13, player: FdoPlayer::BOTTOM, announcement: No60 }]).unwrap(), player_eyes: [43, 0, 0, 48], observing_player_hand: FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, SpadeNine]), FdoHand::from_vec(vec![DiamondQueen, SpadeJack, SpadeJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing]), FdoHand::from_vec(vec![ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce]), FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No60), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondQueen, CardSpadeJack]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeTen), Some(HeartNine), Some(HeartNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(DiamondTen), Some(ClubQueen), Some(HeartJack), Some(HeartQueen)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(DiamondNine), None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 9, player: FdoPlayer::BOTTOM, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 13, player: FdoPlayer::BOTTOM, announcement: No60 }]).unwrap(), player_eyes: [43, 0, 0, 48], observing_player_hand: FdoHand::from_vec(vec![DiamondQueen, SpadeJack, SpadeJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, SpadeNine]), FdoHand::from_vec(vec![DiamondQueen, SpadeJack, SpadeJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing]), FdoHand::from_vec(vec![ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce]), FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No60), contra_lowest_announcement: None });
//
//         state.play_action(CardSpadeJack);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeTen), Some(HeartNine), Some(HeartNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(DiamondTen), Some(ClubQueen), Some(HeartJack), Some(HeartQueen)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(DiamondNine), Some(SpadeJack), None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 9, player: FdoPlayer::BOTTOM, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 13, player: FdoPlayer::BOTTOM, announcement: No60 }]).unwrap(), player_eyes: [43, 0, 0, 48], observing_player_hand: FdoHand::from_vec(vec![ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, SpadeNine]), FdoHand::from_vec(vec![DiamondQueen, SpadeJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing]), FdoHand::from_vec(vec![ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce]), FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No60), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeTen), Some(HeartNine), Some(HeartNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(DiamondTen), Some(ClubQueen), Some(HeartJack), Some(HeartQueen)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(DiamondNine), Some(SpadeJack), None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 9, player: FdoPlayer::BOTTOM, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 13, player: FdoPlayer::BOTTOM, announcement: No60 }]).unwrap(), player_eyes: [43, 0, 0, 48], observing_player_hand: FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, SpadeNine]), FdoHand::from_vec(vec![DiamondQueen, SpadeJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing]), FdoHand::from_vec(vec![ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce]), FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No60), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardHeartAce, CardClubNine, CardClubKing, CardClubAce, CardSpadeNine, CardSpadeKing, CardSpadeAce]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeTen), Some(HeartNine), Some(HeartNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(DiamondTen), Some(ClubQueen), Some(HeartJack), Some(HeartQueen)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(DiamondNine), Some(SpadeJack), None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 9, player: FdoPlayer::BOTTOM, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 13, player: FdoPlayer::BOTTOM, announcement: No60 }]).unwrap(), player_eyes: [43, 0, 0, 48], observing_player_hand: FdoHand::from_vec(vec![ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, SpadeNine]), FdoHand::from_vec(vec![DiamondQueen, SpadeJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing]), FdoHand::from_vec(vec![ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, SpadeNine, HeartAce]), FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No60), contra_lowest_announcement: None });
//
//         state.play_action(CardSpadeNine);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeTen), Some(HeartNine), Some(HeartNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(DiamondTen), Some(ClubQueen), Some(HeartJack), Some(HeartQueen)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(DiamondNine), Some(SpadeJack), Some(SpadeNine), None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 9, player: FdoPlayer::BOTTOM, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 13, player: FdoPlayer::BOTTOM, announcement: No60 }]).unwrap(), player_eyes: [43, 0, 0, 48], observing_player_hand: FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, SpadeNine]), FdoHand::from_vec(vec![DiamondQueen, SpadeJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing]), FdoHand::from_vec(vec![ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, HeartAce]), FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No60), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondNine, CardDiamondTen, CardDiamondJack, CardClubQueen]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeTen), Some(HeartNine), Some(HeartNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(DiamondTen), Some(ClubQueen), Some(HeartJack), Some(HeartQueen)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(DiamondNine), Some(SpadeJack), Some(SpadeNine), None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 9, player: FdoPlayer::BOTTOM, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 13, player: FdoPlayer::BOTTOM, announcement: No60 }]).unwrap(), player_eyes: [43, 0, 0, 48], observing_player_hand: FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, SpadeNine]), FdoHand::from_vec(vec![DiamondQueen, SpadeJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing]), FdoHand::from_vec(vec![ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, HeartAce]), FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No60), contra_lowest_announcement: None });
//
//         state.play_action(CardClubQueen);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondNine, CardDiamondTen, CardDiamondJack, CardHeartKing, CardClubTen, CardClubKing, CardSpadeTen]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeTen), Some(HeartNine), Some(HeartNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(DiamondTen), Some(ClubQueen), Some(HeartJack), Some(HeartQueen)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(DiamondNine), Some(SpadeJack), Some(SpadeNine), Some(ClubQueen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 9, player: FdoPlayer::BOTTOM, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 13, player: FdoPlayer::BOTTOM, announcement: No60 }]).unwrap(), player_eyes: [43, 0, 0, 53], observing_player_hand: FdoHand::from_vec(vec![DiamondJack, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, SpadeNine]), FdoHand::from_vec(vec![DiamondQueen, SpadeJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing]), FdoHand::from_vec(vec![ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, HeartAce]), FdoHand::from_vec(vec![DiamondJack, DiamondTen, DiamondNine, ClubTen, ClubKing, SpadeTen, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No60), contra_lowest_announcement: None });
//
//         state.play_action(CardDiamondNine);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondKing, CardHeartJack, CardHeartQueen, CardClubJack, CardSpadeQueen]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeTen), Some(HeartNine), Some(HeartNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(DiamondTen), Some(ClubQueen), Some(HeartJack), Some(HeartQueen)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(DiamondNine), Some(SpadeJack), Some(SpadeNine), Some(ClubQueen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(DiamondNine), None, None, None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 9, player: FdoPlayer::BOTTOM, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 13, player: FdoPlayer::BOTTOM, announcement: No60 }]).unwrap(), player_eyes: [43, 0, 0, 53], observing_player_hand: FdoHand::from_vec(vec![SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, SpadeNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, SpadeNine]), FdoHand::from_vec(vec![DiamondQueen, SpadeJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing]), FdoHand::from_vec(vec![ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, HeartAce]), FdoHand::from_vec(vec![DiamondJack, DiamondTen, ClubTen, ClubKing, SpadeTen, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No60), contra_lowest_announcement: None });
//
//         state.play_action(CardSpadeQueen);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondQueen, CardSpadeJack]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeTen), Some(HeartNine), Some(HeartNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(DiamondTen), Some(ClubQueen), Some(HeartJack), Some(HeartQueen)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(DiamondNine), Some(SpadeJack), Some(SpadeNine), Some(ClubQueen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(DiamondNine), Some(SpadeQueen), None, None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 9, player: FdoPlayer::BOTTOM, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 13, player: FdoPlayer::BOTTOM, announcement: No60 }]).unwrap(), player_eyes: [43, 0, 0, 53], observing_player_hand: FdoHand::from_vec(vec![DiamondQueen, SpadeJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, SpadeNine]), FdoHand::from_vec(vec![DiamondQueen, SpadeJack, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing]), FdoHand::from_vec(vec![ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, HeartAce]), FdoHand::from_vec(vec![DiamondJack, DiamondTen, ClubTen, ClubKing, SpadeTen, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No60), contra_lowest_announcement: None });
//
//         state.play_action(CardSpadeJack);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardHeartAce, CardClubNine, CardClubKing, CardClubAce, CardSpadeKing, CardSpadeAce]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeTen), Some(HeartNine), Some(HeartNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(DiamondTen), Some(ClubQueen), Some(HeartJack), Some(HeartQueen)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(DiamondNine), Some(SpadeJack), Some(SpadeNine), Some(ClubQueen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(DiamondNine), Some(SpadeQueen), Some(SpadeJack), None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 9, player: FdoPlayer::BOTTOM, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 13, player: FdoPlayer::BOTTOM, announcement: No60 }]).unwrap(), player_eyes: [43, 0, 0, 53], observing_player_hand: FdoHand::from_vec(vec![ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, HeartAce]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, SpadeNine]), FdoHand::from_vec(vec![DiamondQueen, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing]), FdoHand::from_vec(vec![ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, SpadeKing, HeartAce]), FdoHand::from_vec(vec![DiamondJack, DiamondTen, ClubTen, ClubKing, SpadeTen, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No60), contra_lowest_announcement: None });
//
//         state.play_action(CardSpadeKing);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondKing, CardHeartJack, CardHeartQueen, CardClubJack, CardSpadeNine]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeTen), Some(HeartNine), Some(HeartNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(DiamondTen), Some(ClubQueen), Some(HeartJack), Some(HeartQueen)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(DiamondNine), Some(SpadeJack), Some(SpadeNine), Some(ClubQueen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(DiamondNine), Some(SpadeQueen), Some(SpadeJack), Some(SpadeKing)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 9, player: FdoPlayer::BOTTOM, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 13, player: FdoPlayer::BOTTOM, announcement: No60 }]).unwrap(), player_eyes: [52, 0, 0, 53], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, SpadeNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, DiamondKing, DiamondKing, SpadeNine]), FdoHand::from_vec(vec![DiamondQueen, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing]), FdoHand::from_vec(vec![ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, HeartAce]), FdoHand::from_vec(vec![DiamondJack, DiamondTen, ClubTen, ClubKing, SpadeTen, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No60), contra_lowest_announcement: None });
//
//         state.play_action(CardDiamondKing);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondQueen]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeTen), Some(HeartNine), Some(HeartNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(DiamondTen), Some(ClubQueen), Some(HeartJack), Some(HeartQueen)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(DiamondNine), Some(SpadeJack), Some(SpadeNine), Some(ClubQueen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(DiamondNine), Some(SpadeQueen), Some(SpadeJack), Some(SpadeKing)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(DiamondKing), None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 9, player: FdoPlayer::BOTTOM, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 13, player: FdoPlayer::BOTTOM, announcement: No60 }]).unwrap(), player_eyes: [52, 0, 0, 53], observing_player_hand: FdoHand::from_vec(vec![DiamondQueen, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, DiamondKing, SpadeNine]), FdoHand::from_vec(vec![DiamondQueen, ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing]), FdoHand::from_vec(vec![ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, HeartAce]), FdoHand::from_vec(vec![DiamondJack, DiamondTen, ClubTen, ClubKing, SpadeTen, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No60), contra_lowest_announcement: None });
//
//         state.play_action(CardDiamondQueen);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardHeartAce, CardClubNine, CardClubKing, CardClubAce, CardSpadeKing, CardSpadeAce]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeTen), Some(HeartNine), Some(HeartNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(DiamondTen), Some(ClubQueen), Some(HeartJack), Some(HeartQueen)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(DiamondNine), Some(SpadeJack), Some(SpadeNine), Some(ClubQueen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(DiamondNine), Some(SpadeQueen), Some(SpadeJack), Some(SpadeKing)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(DiamondKing), Some(DiamondQueen), None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 9, player: FdoPlayer::BOTTOM, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 13, player: FdoPlayer::BOTTOM, announcement: No60 }]).unwrap(), player_eyes: [52, 0, 0, 53], observing_player_hand: FdoHand::from_vec(vec![ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, HeartAce]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, DiamondKing, SpadeNine]), FdoHand::from_vec(vec![ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing]), FdoHand::from_vec(vec![ClubAce, ClubKing, ClubNine, SpadeAce, SpadeKing, HeartAce]), FdoHand::from_vec(vec![DiamondJack, DiamondTen, ClubTen, ClubKing, SpadeTen, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No60), contra_lowest_announcement: None });
//
//         state.play_action(CardClubKing);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondTen, CardDiamondJack]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeTen), Some(HeartNine), Some(HeartNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(DiamondTen), Some(ClubQueen), Some(HeartJack), Some(HeartQueen)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(DiamondNine), Some(SpadeJack), Some(SpadeNine), Some(ClubQueen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(DiamondNine), Some(SpadeQueen), Some(SpadeJack), Some(SpadeKing)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(DiamondKing), Some(DiamondQueen), Some(ClubKing), None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 9, player: FdoPlayer::BOTTOM, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 13, player: FdoPlayer::BOTTOM, announcement: No60 }]).unwrap(), player_eyes: [52, 0, 0, 53], observing_player_hand: FdoHand::from_vec(vec![DiamondJack, DiamondTen, ClubTen, ClubKing, SpadeTen, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, DiamondKing, SpadeNine]), FdoHand::from_vec(vec![ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing]), FdoHand::from_vec(vec![ClubAce, ClubNine, SpadeAce, SpadeKing, HeartAce]), FdoHand::from_vec(vec![DiamondJack, DiamondTen, ClubTen, ClubKing, SpadeTen, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No60), contra_lowest_announcement: None });
//
//         state.play_action(CardDiamondJack);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardHeartKing, CardClubNine, CardClubTen, CardClubAce, CardSpadeAce]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeTen), Some(HeartNine), Some(HeartNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(DiamondTen), Some(ClubQueen), Some(HeartJack), Some(HeartQueen)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(DiamondNine), Some(SpadeJack), Some(SpadeNine), Some(ClubQueen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(DiamondNine), Some(SpadeQueen), Some(SpadeJack), Some(SpadeKing)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(DiamondKing), Some(DiamondQueen), Some(ClubKing), Some(DiamondJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(DiamondQueen) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 9, player: FdoPlayer::BOTTOM, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 13, player: FdoPlayer::BOTTOM, announcement: No60 }]).unwrap(), player_eyes: [52, 13, 0, 53], observing_player_hand: FdoHand::from_vec(vec![ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, DiamondKing, SpadeNine]), FdoHand::from_vec(vec![ClubAce, ClubTen, ClubNine, SpadeAce, HeartKing]), FdoHand::from_vec(vec![ClubAce, ClubNine, SpadeAce, SpadeKing, HeartAce]), FdoHand::from_vec(vec![DiamondTen, ClubTen, ClubKing, SpadeTen, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No60), contra_lowest_announcement: None });
//
//         state.play_action(CardClubAce);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardClubNine, CardClubAce]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeTen), Some(HeartNine), Some(HeartNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(DiamondTen), Some(ClubQueen), Some(HeartJack), Some(HeartQueen)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(DiamondNine), Some(SpadeJack), Some(SpadeNine), Some(ClubQueen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(DiamondNine), Some(SpadeQueen), Some(SpadeJack), Some(SpadeKing)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(DiamondKing), Some(DiamondQueen), Some(ClubKing), Some(DiamondJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(DiamondQueen) }, FdoTrick { cards: [Some(ClubAce), None, None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 9, player: FdoPlayer::BOTTOM, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 13, player: FdoPlayer::BOTTOM, announcement: No60 }]).unwrap(), player_eyes: [52, 13, 0, 53], observing_player_hand: FdoHand::from_vec(vec![ClubAce, ClubNine, SpadeAce, SpadeKing, HeartAce]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, DiamondKing, SpadeNine]), FdoHand::from_vec(vec![ClubTen, ClubNine, SpadeAce, HeartKing]), FdoHand::from_vec(vec![ClubAce, ClubNine, SpadeAce, SpadeKing, HeartAce]), FdoHand::from_vec(vec![DiamondTen, ClubTen, ClubKing, SpadeTen, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No60), contra_lowest_announcement: None });
//
//         state.play_action(CardClubAce);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardClubTen, CardClubKing]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeTen), Some(HeartNine), Some(HeartNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(DiamondTen), Some(ClubQueen), Some(HeartJack), Some(HeartQueen)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(DiamondNine), Some(SpadeJack), Some(SpadeNine), Some(ClubQueen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(DiamondNine), Some(SpadeQueen), Some(SpadeJack), Some(SpadeKing)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(DiamondKing), Some(DiamondQueen), Some(ClubKing), Some(DiamondJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(DiamondQueen) }, FdoTrick { cards: [Some(ClubAce), Some(ClubAce), None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 9, player: FdoPlayer::BOTTOM, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 13, player: FdoPlayer::BOTTOM, announcement: No60 }]).unwrap(), player_eyes: [52, 13, 0, 53], observing_player_hand: FdoHand::from_vec(vec![DiamondTen, ClubTen, ClubKing, SpadeTen, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, DiamondKing, SpadeNine]), FdoHand::from_vec(vec![ClubTen, ClubNine, SpadeAce, HeartKing]), FdoHand::from_vec(vec![ClubNine, SpadeAce, SpadeKing, HeartAce]), FdoHand::from_vec(vec![DiamondTen, ClubTen, ClubKing, SpadeTen, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No60), contra_lowest_announcement: None });
//
//         state.play_action(CardClubKing);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondKing, CardHeartJack, CardHeartQueen, CardClubJack, CardSpadeNine]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeTen), Some(HeartNine), Some(HeartNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(DiamondTen), Some(ClubQueen), Some(HeartJack), Some(HeartQueen)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(DiamondNine), Some(SpadeJack), Some(SpadeNine), Some(ClubQueen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(DiamondNine), Some(SpadeQueen), Some(SpadeJack), Some(SpadeKing)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(DiamondKing), Some(DiamondQueen), Some(ClubKing), Some(DiamondJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(DiamondQueen) }, FdoTrick { cards: [Some(ClubAce), Some(ClubAce), Some(ClubKing), None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 9, player: FdoPlayer::BOTTOM, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 13, player: FdoPlayer::BOTTOM, announcement: No60 }]).unwrap(), player_eyes: [52, 13, 0, 53], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, DiamondKing, SpadeNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, DiamondKing, SpadeNine]), FdoHand::from_vec(vec![ClubTen, ClubNine, SpadeAce, HeartKing]), FdoHand::from_vec(vec![ClubNine, SpadeAce, SpadeKing, HeartAce]), FdoHand::from_vec(vec![DiamondTen, ClubTen, SpadeTen, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No60), contra_lowest_announcement: None });
//
//         state.play_action(CardDiamondKing);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardHeartJack, CardHeartQueen, CardClubJack, CardSpadeNine]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeTen), Some(HeartNine), Some(HeartNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(DiamondTen), Some(ClubQueen), Some(HeartJack), Some(HeartQueen)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(DiamondNine), Some(SpadeJack), Some(SpadeNine), Some(ClubQueen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(DiamondNine), Some(SpadeQueen), Some(SpadeJack), Some(SpadeKing)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(DiamondKing), Some(DiamondQueen), Some(ClubKing), Some(DiamondJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(DiamondQueen) }, FdoTrick { cards: [Some(ClubAce), Some(ClubAce), Some(ClubKing), Some(DiamondKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondKing) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 9, player: FdoPlayer::BOTTOM, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 13, player: FdoPlayer::BOTTOM, announcement: No60 }]).unwrap(), player_eyes: [82, 13, 0, 53], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, SpadeNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, SpadeNine]), FdoHand::from_vec(vec![ClubTen, ClubNine, SpadeAce, HeartKing]), FdoHand::from_vec(vec![ClubNine, SpadeAce, SpadeKing, HeartAce]), FdoHand::from_vec(vec![DiamondTen, ClubTen, SpadeTen, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No60), contra_lowest_announcement: None });
//
//         state.play_action(CardHeartJack);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardHeartKing, CardClubNine, CardClubTen, CardSpadeAce]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeTen), Some(HeartNine), Some(HeartNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(DiamondTen), Some(ClubQueen), Some(HeartJack), Some(HeartQueen)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(DiamondNine), Some(SpadeJack), Some(SpadeNine), Some(ClubQueen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(DiamondNine), Some(SpadeQueen), Some(SpadeJack), Some(SpadeKing)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(DiamondKing), Some(DiamondQueen), Some(ClubKing), Some(DiamondJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(DiamondQueen) }, FdoTrick { cards: [Some(ClubAce), Some(ClubAce), Some(ClubKing), Some(DiamondKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondKing) }, FdoTrick { cards: [Some(HeartJack), None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 9, player: FdoPlayer::BOTTOM, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 13, player: FdoPlayer::BOTTOM, announcement: No60 }]).unwrap(), player_eyes: [82, 13, 0, 53], observing_player_hand: FdoHand::from_vec(vec![ClubTen, ClubNine, SpadeAce, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartQueen, ClubJack, SpadeNine]), FdoHand::from_vec(vec![ClubTen, ClubNine, SpadeAce, HeartKing]), FdoHand::from_vec(vec![ClubNine, SpadeAce, SpadeKing, HeartAce]), FdoHand::from_vec(vec![DiamondTen, ClubTen, SpadeTen, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No60), contra_lowest_announcement: None });
//
//         state.play_action(CardClubNine);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardHeartAce, CardClubNine, CardSpadeKing, CardSpadeAce]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeTen), Some(HeartNine), Some(HeartNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(DiamondTen), Some(ClubQueen), Some(HeartJack), Some(HeartQueen)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(DiamondNine), Some(SpadeJack), Some(SpadeNine), Some(ClubQueen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(DiamondNine), Some(SpadeQueen), Some(SpadeJack), Some(SpadeKing)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(DiamondKing), Some(DiamondQueen), Some(ClubKing), Some(DiamondJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(DiamondQueen) }, FdoTrick { cards: [Some(ClubAce), Some(ClubAce), Some(ClubKing), Some(DiamondKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondKing) }, FdoTrick { cards: [Some(HeartJack), Some(ClubNine), None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 9, player: FdoPlayer::BOTTOM, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 13, player: FdoPlayer::BOTTOM, announcement: No60 }]).unwrap(), player_eyes: [82, 13, 0, 53], observing_player_hand: FdoHand::from_vec(vec![ClubNine, SpadeAce, SpadeKing, HeartAce]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartQueen, ClubJack, SpadeNine]), FdoHand::from_vec(vec![ClubTen, SpadeAce, HeartKing]), FdoHand::from_vec(vec![ClubNine, SpadeAce, SpadeKing, HeartAce]), FdoHand::from_vec(vec![DiamondTen, ClubTen, SpadeTen, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No60), contra_lowest_announcement: None });
//
//         state.play_action(CardClubNine);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondTen]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeTen), Some(HeartNine), Some(HeartNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(DiamondTen), Some(ClubQueen), Some(HeartJack), Some(HeartQueen)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(DiamondNine), Some(SpadeJack), Some(SpadeNine), Some(ClubQueen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(DiamondNine), Some(SpadeQueen), Some(SpadeJack), Some(SpadeKing)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(DiamondKing), Some(DiamondQueen), Some(ClubKing), Some(DiamondJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(DiamondQueen) }, FdoTrick { cards: [Some(ClubAce), Some(ClubAce), Some(ClubKing), Some(DiamondKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondKing) }, FdoTrick { cards: [Some(HeartJack), Some(ClubNine), Some(ClubNine), None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 9, player: FdoPlayer::BOTTOM, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 13, player: FdoPlayer::BOTTOM, announcement: No60 }]).unwrap(), player_eyes: [82, 13, 0, 53], observing_player_hand: FdoHand::from_vec(vec![DiamondTen, ClubTen, SpadeTen, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartQueen, ClubJack, SpadeNine]), FdoHand::from_vec(vec![ClubTen, SpadeAce, HeartKing]), FdoHand::from_vec(vec![SpadeAce, SpadeKing, HeartAce]), FdoHand::from_vec(vec![DiamondTen, ClubTen, SpadeTen, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No60), contra_lowest_announcement: None });
//
//         state.play_action(CardDiamondTen);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardHeartQueen, CardClubJack, CardSpadeNine]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeTen), Some(HeartNine), Some(HeartNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(DiamondTen), Some(ClubQueen), Some(HeartJack), Some(HeartQueen)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(DiamondNine), Some(SpadeJack), Some(SpadeNine), Some(ClubQueen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(DiamondNine), Some(SpadeQueen), Some(SpadeJack), Some(SpadeKing)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(DiamondKing), Some(DiamondQueen), Some(ClubKing), Some(DiamondJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(DiamondQueen) }, FdoTrick { cards: [Some(ClubAce), Some(ClubAce), Some(ClubKing), Some(DiamondKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondKing) }, FdoTrick { cards: [Some(HeartJack), Some(ClubNine), Some(ClubNine), Some(DiamondTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartJack) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 9, player: FdoPlayer::BOTTOM, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 13, player: FdoPlayer::BOTTOM, announcement: No60 }]).unwrap(), player_eyes: [94, 13, 0, 53], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, ClubJack, SpadeNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartQueen, ClubJack, SpadeNine]), FdoHand::from_vec(vec![ClubTen, SpadeAce, HeartKing]), FdoHand::from_vec(vec![SpadeAce, SpadeKing, HeartAce]), FdoHand::from_vec(vec![ClubTen, SpadeTen, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No60), contra_lowest_announcement: None });
//
//         state.play_action(CardHeartQueen);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardHeartKing, CardClubTen, CardSpadeAce]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeTen), Some(HeartNine), Some(HeartNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(DiamondTen), Some(ClubQueen), Some(HeartJack), Some(HeartQueen)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(DiamondNine), Some(SpadeJack), Some(SpadeNine), Some(ClubQueen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(DiamondNine), Some(SpadeQueen), Some(SpadeJack), Some(SpadeKing)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(DiamondKing), Some(DiamondQueen), Some(ClubKing), Some(DiamondJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(DiamondQueen) }, FdoTrick { cards: [Some(ClubAce), Some(ClubAce), Some(ClubKing), Some(DiamondKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondKing) }, FdoTrick { cards: [Some(HeartJack), Some(ClubNine), Some(ClubNine), Some(DiamondTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartJack) }, FdoTrick { cards: [Some(HeartQueen), None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 9, player: FdoPlayer::BOTTOM, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 13, player: FdoPlayer::BOTTOM, announcement: No60 }]).unwrap(), player_eyes: [94, 13, 0, 53], observing_player_hand: FdoHand::from_vec(vec![ClubTen, SpadeAce, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![ClubJack, SpadeNine]), FdoHand::from_vec(vec![ClubTen, SpadeAce, HeartKing]), FdoHand::from_vec(vec![SpadeAce, SpadeKing, HeartAce]), FdoHand::from_vec(vec![ClubTen, SpadeTen, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No60), contra_lowest_announcement: None });
//
//         state.play_action(CardHeartKing);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardHeartAce, CardSpadeKing, CardSpadeAce]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeTen), Some(HeartNine), Some(HeartNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(DiamondTen), Some(ClubQueen), Some(HeartJack), Some(HeartQueen)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(DiamondNine), Some(SpadeJack), Some(SpadeNine), Some(ClubQueen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(DiamondNine), Some(SpadeQueen), Some(SpadeJack), Some(SpadeKing)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(DiamondKing), Some(DiamondQueen), Some(ClubKing), Some(DiamondJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(DiamondQueen) }, FdoTrick { cards: [Some(ClubAce), Some(ClubAce), Some(ClubKing), Some(DiamondKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondKing) }, FdoTrick { cards: [Some(HeartJack), Some(ClubNine), Some(ClubNine), Some(DiamondTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartJack) }, FdoTrick { cards: [Some(HeartQueen), Some(HeartKing), None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 9, player: FdoPlayer::BOTTOM, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 13, player: FdoPlayer::BOTTOM, announcement: No60 }]).unwrap(), player_eyes: [94, 13, 0, 53], observing_player_hand: FdoHand::from_vec(vec![SpadeAce, SpadeKing, HeartAce]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![ClubJack, SpadeNine]), FdoHand::from_vec(vec![ClubTen, SpadeAce]), FdoHand::from_vec(vec![SpadeAce, SpadeKing, HeartAce]), FdoHand::from_vec(vec![ClubTen, SpadeTen, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No60), contra_lowest_announcement: None });
//
//         state.play_action(CardSpadeKing);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardHeartKing, CardClubTen, CardSpadeTen]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeTen), Some(HeartNine), Some(HeartNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(DiamondTen), Some(ClubQueen), Some(HeartJack), Some(HeartQueen)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(DiamondNine), Some(SpadeJack), Some(SpadeNine), Some(ClubQueen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(DiamondNine), Some(SpadeQueen), Some(SpadeJack), Some(SpadeKing)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(DiamondKing), Some(DiamondQueen), Some(ClubKing), Some(DiamondJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(DiamondQueen) }, FdoTrick { cards: [Some(ClubAce), Some(ClubAce), Some(ClubKing), Some(DiamondKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondKing) }, FdoTrick { cards: [Some(HeartJack), Some(ClubNine), Some(ClubNine), Some(DiamondTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartJack) }, FdoTrick { cards: [Some(HeartQueen), Some(HeartKing), Some(SpadeKing), None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 9, player: FdoPlayer::BOTTOM, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 13, player: FdoPlayer::BOTTOM, announcement: No60 }]).unwrap(), player_eyes: [94, 13, 0, 53], observing_player_hand: FdoHand::from_vec(vec![ClubTen, SpadeTen, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![ClubJack, SpadeNine]), FdoHand::from_vec(vec![ClubTen, SpadeAce]), FdoHand::from_vec(vec![SpadeAce, HeartAce]), FdoHand::from_vec(vec![ClubTen, SpadeTen, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No60), contra_lowest_announcement: None });
//
//         state.play_action(CardSpadeTen);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardClubJack, CardSpadeNine]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeTen), Some(HeartNine), Some(HeartNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(DiamondTen), Some(ClubQueen), Some(HeartJack), Some(HeartQueen)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(DiamondNine), Some(SpadeJack), Some(SpadeNine), Some(ClubQueen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(DiamondNine), Some(SpadeQueen), Some(SpadeJack), Some(SpadeKing)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(DiamondKing), Some(DiamondQueen), Some(ClubKing), Some(DiamondJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(DiamondQueen) }, FdoTrick { cards: [Some(ClubAce), Some(ClubAce), Some(ClubKing), Some(DiamondKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondKing) }, FdoTrick { cards: [Some(HeartJack), Some(ClubNine), Some(ClubNine), Some(DiamondTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartJack) }, FdoTrick { cards: [Some(HeartQueen), Some(HeartKing), Some(SpadeKing), Some(SpadeTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartQueen) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 9, player: FdoPlayer::BOTTOM, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 13, player: FdoPlayer::BOTTOM, announcement: No60 }]).unwrap(), player_eyes: [115, 13, 0, 53], observing_player_hand: FdoHand::from_vec(vec![ClubJack, SpadeNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![ClubJack, SpadeNine]), FdoHand::from_vec(vec![ClubTen, SpadeAce]), FdoHand::from_vec(vec![SpadeAce, HeartAce]), FdoHand::from_vec(vec![ClubTen, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No60), contra_lowest_announcement: None });
//
//         state.play_action(CardClubJack);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardClubTen, CardSpadeAce]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeTen), Some(HeartNine), Some(HeartNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(DiamondTen), Some(ClubQueen), Some(HeartJack), Some(HeartQueen)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(DiamondNine), Some(SpadeJack), Some(SpadeNine), Some(ClubQueen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(DiamondNine), Some(SpadeQueen), Some(SpadeJack), Some(SpadeKing)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(DiamondKing), Some(DiamondQueen), Some(ClubKing), Some(DiamondJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(DiamondQueen) }, FdoTrick { cards: [Some(ClubAce), Some(ClubAce), Some(ClubKing), Some(DiamondKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondKing) }, FdoTrick { cards: [Some(HeartJack), Some(ClubNine), Some(ClubNine), Some(DiamondTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartJack) }, FdoTrick { cards: [Some(HeartQueen), Some(HeartKing), Some(SpadeKing), Some(SpadeTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartQueen) }, FdoTrick { cards: [Some(ClubJack), None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 9, player: FdoPlayer::BOTTOM, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 13, player: FdoPlayer::BOTTOM, announcement: No60 }]).unwrap(), player_eyes: [115, 13, 0, 53], observing_player_hand: FdoHand::from_vec(vec![ClubTen, SpadeAce]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeNine]), FdoHand::from_vec(vec![ClubTen, SpadeAce]), FdoHand::from_vec(vec![SpadeAce, HeartAce]), FdoHand::from_vec(vec![ClubTen, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No60), contra_lowest_announcement: None });
//
//         state.play_action(CardClubTen);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardHeartAce, CardSpadeAce]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeTen), Some(HeartNine), Some(HeartNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(DiamondTen), Some(ClubQueen), Some(HeartJack), Some(HeartQueen)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(DiamondNine), Some(SpadeJack), Some(SpadeNine), Some(ClubQueen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(DiamondNine), Some(SpadeQueen), Some(SpadeJack), Some(SpadeKing)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(DiamondKing), Some(DiamondQueen), Some(ClubKing), Some(DiamondJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(DiamondQueen) }, FdoTrick { cards: [Some(ClubAce), Some(ClubAce), Some(ClubKing), Some(DiamondKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondKing) }, FdoTrick { cards: [Some(HeartJack), Some(ClubNine), Some(ClubNine), Some(DiamondTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartJack) }, FdoTrick { cards: [Some(HeartQueen), Some(HeartKing), Some(SpadeKing), Some(SpadeTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartQueen) }, FdoTrick { cards: [Some(ClubJack), Some(ClubTen), None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 9, player: FdoPlayer::BOTTOM, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 13, player: FdoPlayer::BOTTOM, announcement: No60 }]).unwrap(), player_eyes: [115, 13, 0, 53], observing_player_hand: FdoHand::from_vec(vec![SpadeAce, HeartAce]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeNine]), FdoHand::from_vec(vec![SpadeAce]), FdoHand::from_vec(vec![SpadeAce, HeartAce]), FdoHand::from_vec(vec![ClubTen, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No60), contra_lowest_announcement: None });
//
//         state.play_action(CardSpadeAce);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardHeartKing, CardClubTen]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeTen), Some(HeartNine), Some(HeartNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(DiamondTen), Some(ClubQueen), Some(HeartJack), Some(HeartQueen)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(DiamondNine), Some(SpadeJack), Some(SpadeNine), Some(ClubQueen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(DiamondNine), Some(SpadeQueen), Some(SpadeJack), Some(SpadeKing)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(DiamondKing), Some(DiamondQueen), Some(ClubKing), Some(DiamondJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(DiamondQueen) }, FdoTrick { cards: [Some(ClubAce), Some(ClubAce), Some(ClubKing), Some(DiamondKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondKing) }, FdoTrick { cards: [Some(HeartJack), Some(ClubNine), Some(ClubNine), Some(DiamondTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartJack) }, FdoTrick { cards: [Some(HeartQueen), Some(HeartKing), Some(SpadeKing), Some(SpadeTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartQueen) }, FdoTrick { cards: [Some(ClubJack), Some(ClubTen), Some(SpadeAce), None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 9, player: FdoPlayer::BOTTOM, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 13, player: FdoPlayer::BOTTOM, announcement: No60 }]).unwrap(), player_eyes: [115, 13, 0, 53], observing_player_hand: FdoHand::from_vec(vec![ClubTen, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeNine]), FdoHand::from_vec(vec![SpadeAce]), FdoHand::from_vec(vec![HeartAce]), FdoHand::from_vec(vec![ClubTen, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No60), contra_lowest_announcement: None });
//
//         state.play_action(CardClubTen);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardSpadeNine]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeTen), Some(HeartNine), Some(HeartNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(DiamondTen), Some(ClubQueen), Some(HeartJack), Some(HeartQueen)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(DiamondNine), Some(SpadeJack), Some(SpadeNine), Some(ClubQueen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(DiamondNine), Some(SpadeQueen), Some(SpadeJack), Some(SpadeKing)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(DiamondKing), Some(DiamondQueen), Some(ClubKing), Some(DiamondJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(DiamondQueen) }, FdoTrick { cards: [Some(ClubAce), Some(ClubAce), Some(ClubKing), Some(DiamondKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondKing) }, FdoTrick { cards: [Some(HeartJack), Some(ClubNine), Some(ClubNine), Some(DiamondTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartJack) }, FdoTrick { cards: [Some(HeartQueen), Some(HeartKing), Some(SpadeKing), Some(SpadeTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartQueen) }, FdoTrick { cards: [Some(ClubJack), Some(ClubTen), Some(SpadeAce), Some(ClubTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(ClubJack) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 9, player: FdoPlayer::BOTTOM, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 13, player: FdoPlayer::BOTTOM, announcement: No60 }]).unwrap(), player_eyes: [148, 13, 0, 53], observing_player_hand: FdoHand::from_vec(vec![SpadeNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeNine]), FdoHand::from_vec(vec![SpadeAce]), FdoHand::from_vec(vec![HeartAce]), FdoHand::from_vec(vec![HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No60), contra_lowest_announcement: None });
//
//         state.play_action(CardSpadeNine);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardSpadeAce]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeTen), Some(HeartNine), Some(HeartNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(DiamondTen), Some(ClubQueen), Some(HeartJack), Some(HeartQueen)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(DiamondNine), Some(SpadeJack), Some(SpadeNine), Some(ClubQueen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(DiamondNine), Some(SpadeQueen), Some(SpadeJack), Some(SpadeKing)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(DiamondKing), Some(DiamondQueen), Some(ClubKing), Some(DiamondJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(DiamondQueen) }, FdoTrick { cards: [Some(ClubAce), Some(ClubAce), Some(ClubKing), Some(DiamondKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondKing) }, FdoTrick { cards: [Some(HeartJack), Some(ClubNine), Some(ClubNine), Some(DiamondTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartJack) }, FdoTrick { cards: [Some(HeartQueen), Some(HeartKing), Some(SpadeKing), Some(SpadeTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartQueen) }, FdoTrick { cards: [Some(ClubJack), Some(ClubTen), Some(SpadeAce), Some(ClubTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(ClubJack) }, FdoTrick { cards: [Some(SpadeNine), None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 9, player: FdoPlayer::BOTTOM, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 13, player: FdoPlayer::BOTTOM, announcement: No60 }]).unwrap(), player_eyes: [148, 13, 0, 53], observing_player_hand: FdoHand::from_vec(vec![SpadeAce]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![]), FdoHand::from_vec(vec![SpadeAce]), FdoHand::from_vec(vec![HeartAce]), FdoHand::from_vec(vec![HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No60), contra_lowest_announcement: None });
//
//         state.play_action(CardSpadeAce);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardHeartAce]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeTen), Some(HeartNine), Some(HeartNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(DiamondTen), Some(ClubQueen), Some(HeartJack), Some(HeartQueen)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(DiamondNine), Some(SpadeJack), Some(SpadeNine), Some(ClubQueen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(DiamondNine), Some(SpadeQueen), Some(SpadeJack), Some(SpadeKing)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(DiamondKing), Some(DiamondQueen), Some(ClubKing), Some(DiamondJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(DiamondQueen) }, FdoTrick { cards: [Some(ClubAce), Some(ClubAce), Some(ClubKing), Some(DiamondKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondKing) }, FdoTrick { cards: [Some(HeartJack), Some(ClubNine), Some(ClubNine), Some(DiamondTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartJack) }, FdoTrick { cards: [Some(HeartQueen), Some(HeartKing), Some(SpadeKing), Some(SpadeTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartQueen) }, FdoTrick { cards: [Some(ClubJack), Some(ClubTen), Some(SpadeAce), Some(ClubTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(ClubJack) }, FdoTrick { cards: [Some(SpadeNine), Some(SpadeAce), None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 9, player: FdoPlayer::BOTTOM, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 13, player: FdoPlayer::BOTTOM, announcement: No60 }]).unwrap(), player_eyes: [148, 13, 0, 53], observing_player_hand: FdoHand::from_vec(vec![HeartAce]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![]), FdoHand::from_vec(vec![]), FdoHand::from_vec(vec![HeartAce]), FdoHand::from_vec(vec![HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No60), contra_lowest_announcement: None });
//
//         state.play_action(CardHeartAce);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardHeartKing]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeTen), Some(HeartNine), Some(HeartNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(DiamondTen), Some(ClubQueen), Some(HeartJack), Some(HeartQueen)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(DiamondNine), Some(SpadeJack), Some(SpadeNine), Some(ClubQueen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(DiamondNine), Some(SpadeQueen), Some(SpadeJack), Some(SpadeKing)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(DiamondKing), Some(DiamondQueen), Some(ClubKing), Some(DiamondJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(DiamondQueen) }, FdoTrick { cards: [Some(ClubAce), Some(ClubAce), Some(ClubKing), Some(DiamondKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondKing) }, FdoTrick { cards: [Some(HeartJack), Some(ClubNine), Some(ClubNine), Some(DiamondTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartJack) }, FdoTrick { cards: [Some(HeartQueen), Some(HeartKing), Some(SpadeKing), Some(SpadeTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartQueen) }, FdoTrick { cards: [Some(ClubJack), Some(ClubTen), Some(SpadeAce), Some(ClubTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(ClubJack) }, FdoTrick { cards: [Some(SpadeNine), Some(SpadeAce), Some(HeartAce), None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 9, player: FdoPlayer::BOTTOM, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 13, player: FdoPlayer::BOTTOM, announcement: No60 }]).unwrap(), player_eyes: [148, 13, 0, 53], observing_player_hand: FdoHand::from_vec(vec![HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![]), FdoHand::from_vec(vec![]), FdoHand::from_vec(vec![]), FdoHand::from_vec(vec![HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No60), contra_lowest_announcement: None });
//
//         state.play_action(CardHeartKing);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Finished, observing_player: FdoPlayer::BOTTOM, current_player: None, allowed_actions_current_player: FdoAllowedActions::from_vec(vec![]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondJack), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeQueen), Some(DiamondQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeTen), Some(HeartNine), Some(HeartNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(DiamondTen), Some(ClubQueen), Some(HeartJack), Some(HeartQueen)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(DiamondNine), Some(SpadeJack), Some(SpadeNine), Some(ClubQueen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(DiamondNine), Some(SpadeQueen), Some(SpadeJack), Some(SpadeKing)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(DiamondKing), Some(DiamondQueen), Some(ClubKing), Some(DiamondJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(DiamondQueen) }, FdoTrick { cards: [Some(ClubAce), Some(ClubAce), Some(ClubKing), Some(DiamondKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondKing) }, FdoTrick { cards: [Some(HeartJack), Some(ClubNine), Some(ClubNine), Some(DiamondTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartJack) }, FdoTrick { cards: [Some(HeartQueen), Some(HeartKing), Some(SpadeKing), Some(SpadeTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartQueen) }, FdoTrick { cards: [Some(ClubJack), Some(ClubTen), Some(SpadeAce), Some(ClubTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(ClubJack) }, FdoTrick { cards: [Some(SpadeNine), Some(SpadeAce), Some(HeartAce), Some(HeartKing)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeAce) }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 1, player: FdoPlayer::RIGHT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 9, player: FdoPlayer::BOTTOM, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 13, player: FdoPlayer::BOTTOM, announcement: No60 }]).unwrap(), player_eyes: [148, 39, 0, 53], observing_player_hand: FdoHand::from_vec(vec![]), finished_stats: Some(FdoEndOfGameStats { re_players: FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT]), is_solo: false, player_eyes: [148, 39, 0, 53], re_eyes: 201, kontra_eyes: 39, re_points: 7, kontra_points: -7, player_points: [7, -7, -7, 7], basic_winning_point_details: Some(FdoBasicWinningPointsDetails { winning_points: 1, winning_under_90: 1, winning_under_60: 1, winning_under_30: 0, winning_black: 0, re_announcement: 2, kontra_announcement: 0, re_under_90_announcement: 1, re_under_60_announcement: 1, re_under_30_announcement: 0, re_black_announcement: 0, kontra_under_90_announcement: 0, kontra_under_60_announcement: 0, kontra_under_30_announcement: 0, kontra_black_announcement: 0, re_reached_120_against_no_90: 0, re_reached_90_against_no_60: 0, re_reached_60_against_no_30: 0, re_reached_30_against_black: 0, kontra_reached_120_against_no_90: 0, kontra_reached_90_against_no_60: 0, kontra_reached_60_against_no_30: 0, kontra_reached_30_against_black: 0 }), basic_draw_points_details: None, additional_points_details: Some(FdoAdditionalPointsDetails { against_club_queens: false, number_of_doppelkopf_re: 0, number_of_doppelkopf_kontra: 0, fuchs_gefangen_re: 0, fuchs_gefangen_kontra: 0, karlchen_last_trick_re: false, karlchen_last_trick_kontra: false }) }), phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![]), FdoHand::from_vec(vec![]), FdoHand::from_vec(vec![]), FdoHand::from_vec(vec![])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No60), contra_lowest_announcement: None });
//     }
//
//     #[test]
//     fn full2() {
//         // Soli, viele Ansagen
//         // https://www.online-doppelkopf.com/spiele/95.882.010
//         let mut state = FdoState::new_game_from_hand_and_start_player(
//             [
//                 // Bottom
//                 FdoHand::from_vec(vec![SpadeAce, ClubKing, ClubTen, DiamondJack, SpadeQueen, DiamondNine, DiamondNine, DiamondTen, DiamondKing, SpadeNine, HeartKing, HeartAce]),
//                 // Left
//                 FdoHand::from_vec(vec![ClubKing, SpadeQueen, ClubQueen, ClubQueen, HeartTen, HeartQueen, HeartTen, DiamondQueen, ClubNine, SpadeJack, HeartJack, DiamondJack]),
//                 // Top
//                 FdoHand::from_vec(vec![SpadeTen, HeartJack, SpadeJack, ClubJack, ClubTen, ClubJack, ClubAce, HeartQueen, DiamondAce, SpadeTen, SpadeAce, DiamondAce]),
//                 // Right
//                 FdoHand::from_vec(vec![SpadeNine, ClubAce, ClubNine, DiamondQueen, HeartNine, HeartNine, DiamondKing, DiamondTen, SpadeKing, SpadeKing, HeartKing, HeartAce]),
//             ],
//             FdoPlayer::BOTTOM,
//         );
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: None, phase: FdoPhase::Reservation, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![ReservationHealthy, ReservationDiamondsSolo, ReservationHeartsSolo, ReservationSpadesSolo, ReservationClubsSolo, ReservationTrumplessSolo, ReservationQueensSolo, ReservationJacksSolo]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[]).unwrap(), visible_reservations: [None, None, None, None], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, ClubKing, SpadeAce, SpadeNine, HeartAce, HeartKing]), finished_stats: None, phi_re_players: None, phi_real_reservations: FdoReservationRound { reservations: [None, None, None, None], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, ClubKing, SpadeAce, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, ClubQueen, SpadeQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubKing, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, SpadeJack, HeartJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, ClubAce, ClubNine, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(ReservationHealthy);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: None, phase: FdoPhase::Reservation, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![ReservationHealthy, ReservationWedding, ReservationDiamondsSolo, ReservationHeartsSolo, ReservationSpadesSolo, ReservationClubsSolo, ReservationTrumplessSolo, ReservationQueensSolo, ReservationJacksSolo]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), None, None, None], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, ClubQueen, SpadeQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubKing, ClubNine]), finished_stats: None, phi_re_players: None, phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), None, None, None], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, ClubKing, SpadeAce, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, ClubQueen, SpadeQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubKing, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, SpadeJack, HeartJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, ClubAce, ClubNine, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(ReservationClubsSolo);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: None, phase: FdoPhase::Reservation, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![ReservationHealthy, ReservationDiamondsSolo, ReservationHeartsSolo, ReservationSpadesSolo, ReservationClubsSolo, ReservationTrumplessSolo, ReservationQueensSolo, ReservationJacksSolo]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::NotRevealed), None, None], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, SpadeJack, HeartJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen, SpadeTen]), finished_stats: None, phi_re_players: None, phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), None, None], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, ClubKing, SpadeAce, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, ClubQueen, SpadeQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubKing, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, SpadeJack, HeartJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, ClubAce, ClubNine, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(ReservationDiamondsSolo);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: None, phase: FdoPhase::Reservation, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![ReservationHealthy, ReservationDiamondsSolo, ReservationHeartsSolo, ReservationSpadesSolo, ReservationClubsSolo, ReservationTrumplessSolo, ReservationQueensSolo, ReservationJacksSolo]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::NotRevealed), None], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, ClubAce, ClubNine, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartKing, HeartNine, HeartNine]), finished_stats: None, phi_re_players: None, phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), None], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, ClubKing, SpadeAce, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, ClubQueen, SpadeQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubKing, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, SpadeJack, HeartJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, ClubAce, ClubNine, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(ReservationHealthy);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::Announcement, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, ClubKing, SpadeAce, SpadeNine, HeartAce, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, ClubKing, SpadeAce, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, ClubQueen, SpadeQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubKing, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, SpadeJack, HeartJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, ClubAce, ClubNine, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::Announcement, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, ClubQueen, SpadeQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubKing, ClubNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, ClubKing, SpadeAce, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, ClubQueen, SpadeQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubKing, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, SpadeJack, HeartJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, ClubAce, ClubNine, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::Announcement, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, SpadeJack, HeartJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen, SpadeTen]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, ClubKing, SpadeAce, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, ClubQueen, SpadeQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubKing, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, SpadeJack, HeartJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, ClubAce, ClubNine, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::Announcement, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, ClubAce, ClubNine, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartKing, HeartNine, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, ClubKing, SpadeAce, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, ClubQueen, SpadeQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubKing, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, SpadeJack, HeartJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, ClubAce, ClubNine, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondNine, CardDiamondTen, CardDiamondJack, CardDiamondKing, CardHeartKing, CardHeartAce, CardClubTen, CardClubKing, CardSpadeNine, CardSpadeQueen, CardSpadeAce]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, ClubKing, SpadeAce, SpadeNine, HeartAce, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, ClubKing, SpadeAce, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, ClubQueen, SpadeQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubKing, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, SpadeJack, HeartJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, ClubAce, ClubNine, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardSpadeAce);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::Announcement, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, ClubQueen, SpadeQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubKing, ClubNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, ClubKing, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, ClubQueen, SpadeQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubKing, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, SpadeJack, HeartJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, ClubAce, ClubNine, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::Announcement, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, SpadeJack, HeartJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen, SpadeTen]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, ClubKing, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, ClubQueen, SpadeQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubKing, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, SpadeJack, HeartJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, ClubAce, ClubNine, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::Announcement, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, ClubAce, ClubNine, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartKing, HeartNine, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, ClubKing, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, ClubQueen, SpadeQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubKing, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, SpadeJack, HeartJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, ClubAce, ClubNine, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::Announcement, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, ClubKing, SpadeNine, HeartAce, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, ClubKing, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, ClubQueen, SpadeQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubKing, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, SpadeJack, HeartJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, ClubAce, ClubNine, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondJack, CardDiamondQueen, CardHeartTen, CardHeartJack, CardHeartQueen, CardClubNine, CardClubQueen, CardClubKing, CardSpadeJack, CardSpadeQueen]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, ClubQueen, SpadeQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubKing, ClubNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, ClubKing, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, ClubQueen, SpadeQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubKing, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, SpadeJack, HeartJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, ClubAce, ClubNine, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardClubKing);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::Announcement, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, SpadeJack, HeartJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen, SpadeTen]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, ClubKing, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, ClubQueen, SpadeQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, SpadeJack, HeartJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, ClubAce, ClubNine, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::Announcement, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, ClubAce, ClubNine, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartKing, HeartNine, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, ClubKing, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, ClubQueen, SpadeQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, SpadeJack, HeartJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, ClubAce, ClubNine, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::Announcement, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, ClubKing, SpadeNine, HeartAce, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, ClubKing, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, ClubQueen, SpadeQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, SpadeJack, HeartJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, ClubAce, ClubNine, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::Announcement, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, ClubQueen, SpadeQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, ClubKing, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, ClubQueen, SpadeQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, SpadeJack, HeartJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, ClubAce, ClubNine, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardSpadeTen, CardSpadeAce]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, SpadeJack, HeartJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen, SpadeTen]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, ClubKing, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, ClubQueen, SpadeQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, SpadeJack, HeartJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, ClubAce, ClubNine, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardSpadeTen);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::Announcement, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, ClubAce, ClubNine, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartKing, HeartNine, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, ClubKing, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, ClubQueen, SpadeQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, SpadeJack, HeartJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, ClubAce, ClubNine, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::Announcement, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, ClubKing, SpadeNine, HeartAce, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, ClubKing, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, ClubQueen, SpadeQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, SpadeJack, HeartJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, ClubAce, ClubNine, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::Announcement, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, ClubQueen, SpadeQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, ClubKing, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, ClubQueen, SpadeQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, SpadeJack, HeartJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, ClubAce, ClubNine, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::Announcement, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, SpadeJack, HeartJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, ClubKing, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, ClubQueen, SpadeQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, SpadeJack, HeartJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, ClubAce, ClubNine, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardSpadeNine, CardSpadeKing]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, ClubAce, ClubNine, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartKing, HeartNine, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, ClubKing, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, ClubQueen, SpadeQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, SpadeJack, HeartJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, ClubAce, ClubNine, SpadeKing, SpadeKing, SpadeNine, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardSpadeNine);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::Announcement, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 25, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, ClubQueen, SpadeQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, ClubKing, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, ClubQueen, SpadeQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, SpadeJack, HeartJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, ClubAce, ClubNine, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(AnnouncementReContra);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::Announcement, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }]).unwrap(), player_eyes: [0, 25, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, SpadeJack, HeartJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, ClubKing, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, ClubQueen, SpadeQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, SpadeJack, HeartJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, ClubAce, ClubNine, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(ReContra), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::Announcement, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }]).unwrap(), player_eyes: [0, 25, 0, 0], observing_player_hand: FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, ClubAce, ClubNine, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, ClubKing, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, ClubQueen, SpadeQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, SpadeJack, HeartJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, ClubAce, ClubNine, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(ReContra), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::Announcement, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }]).unwrap(), player_eyes: [0, 25, 0, 0], observing_player_hand: FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, ClubKing, SpadeNine, HeartAce, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, ClubKing, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, ClubQueen, SpadeQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, SpadeJack, HeartJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, ClubAce, ClubNine, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(ReContra), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondJack, CardDiamondQueen, CardHeartTen, CardHeartJack, CardHeartQueen, CardClubNine, CardClubQueen, CardSpadeJack, CardSpadeQueen]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }]).unwrap(), player_eyes: [0, 25, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, ClubQueen, SpadeQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, ClubKing, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, ClubQueen, SpadeQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, SpadeJack, HeartJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, ClubAce, ClubNine, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(ReContra), contra_lowest_announcement: None });
//
//         state.play_action(CardSpadeQueen);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::Announcement, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), None, None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }]).unwrap(), player_eyes: [0, 25, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, SpadeJack, HeartJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, ClubKing, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, ClubQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, SpadeJack, HeartJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, ClubAce, ClubNine, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(ReContra), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::Announcement, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), None, None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }]).unwrap(), player_eyes: [0, 25, 0, 0], observing_player_hand: FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, ClubAce, ClubNine, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, ClubKing, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, ClubQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, SpadeJack, HeartJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, ClubAce, ClubNine, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(ReContra), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::Announcement, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), None, None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }]).unwrap(), player_eyes: [0, 25, 0, 0], observing_player_hand: FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, ClubKing, SpadeNine, HeartAce, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, ClubKing, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, ClubQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, SpadeJack, HeartJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, ClubAce, ClubNine, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(ReContra), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::Announcement, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), None, None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }]).unwrap(), player_eyes: [0, 25, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, ClubQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, ClubKing, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, ClubQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, SpadeJack, HeartJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, ClubAce, ClubNine, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(ReContra), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardHeartJack, CardHeartQueen, CardClubTen, CardClubJack, CardClubAce, CardSpadeJack]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), None, None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }]).unwrap(), player_eyes: [0, 25, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, SpadeJack, HeartJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, ClubKing, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, ClubQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, SpadeJack, HeartJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, ClubAce, ClubNine, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(ReContra), contra_lowest_announcement: None });
//
//         state.play_action(CardHeartJack);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::Announcement, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }]).unwrap(), player_eyes: [0, 25, 0, 0], observing_player_hand: FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, ClubAce, ClubNine, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, ClubKing, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, ClubQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, SpadeJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, ClubAce, ClubNine, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(ReContra), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::Announcement, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }]).unwrap(), player_eyes: [0, 25, 0, 0], observing_player_hand: FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, ClubKing, SpadeNine, HeartAce, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, ClubKing, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, ClubQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, SpadeJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, ClubAce, ClubNine, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(ReContra), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::Announcement, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }]).unwrap(), player_eyes: [0, 25, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, ClubQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, ClubKing, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, ClubQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, SpadeJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, ClubAce, ClubNine, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(ReContra), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::Announcement, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }]).unwrap(), player_eyes: [0, 25, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, SpadeJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, ClubKing, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, ClubQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, SpadeJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, ClubAce, ClubNine, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(ReContra), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondQueen, CardClubNine, CardClubAce]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }]).unwrap(), player_eyes: [0, 25, 0, 0], observing_player_hand: FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, ClubAce, ClubNine, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, ClubKing, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, ClubQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, SpadeJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, ClubAce, ClubNine, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(ReContra), contra_lowest_announcement: None });
//
//         state.play_action(CardClubAce);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::Announcement, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }]).unwrap(), player_eyes: [0, 25, 0, 0], observing_player_hand: FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, ClubKing, SpadeNine, HeartAce, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, ClubKing, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, ClubQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, SpadeJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, ClubNine, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(ReContra), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::Announcement, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }]).unwrap(), player_eyes: [0, 25, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, ClubQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, ClubKing, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, ClubQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, SpadeJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, ClubNine, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(ReContra), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::Announcement, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }]).unwrap(), player_eyes: [0, 25, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, SpadeJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, ClubKing, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, ClubQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, SpadeJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, ClubNine, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(ReContra), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::Announcement, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }]).unwrap(), player_eyes: [0, 25, 0, 0], observing_player_hand: FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, ClubNine, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, ClubKing, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, ClubQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, SpadeJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, ClubNine, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(ReContra), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondJack, CardClubTen, CardClubKing, CardSpadeQueen]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }]).unwrap(), player_eyes: [0, 25, 0, 0], observing_player_hand: FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, ClubKing, SpadeNine, HeartAce, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, ClubKing, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, ClubQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, SpadeJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, ClubNine, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(ReContra), contra_lowest_announcement: None });
//
//         state.play_action(CardClubKing);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::Announcement, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }]).unwrap(), player_eyes: [0, 45, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, ClubQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, ClubQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, SpadeJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, ClubNine, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(ReContra), contra_lowest_announcement: None });
//
//         state.play_action(AnnouncementNo90);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::Announcement, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }]).unwrap(), player_eyes: [0, 45, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, SpadeJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, ClubQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, SpadeJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, ClubNine, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No90), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::Announcement, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }]).unwrap(), player_eyes: [0, 45, 0, 0], observing_player_hand: FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, ClubNine, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, ClubQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, SpadeJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, ClubNine, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No90), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::Announcement, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }]).unwrap(), player_eyes: [0, 45, 0, 0], observing_player_hand: FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, SpadeNine, HeartAce, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, ClubQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, SpadeJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, ClubNine, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No90), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondJack, CardDiamondQueen, CardHeartTen, CardHeartJack, CardHeartQueen, CardClubNine, CardClubQueen, CardSpadeJack]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }]).unwrap(), player_eyes: [0, 45, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, ClubQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, ClubQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, SpadeJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, ClubNine, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No90), contra_lowest_announcement: None });
//
//         state.play_action(CardClubQueen);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::Announcement, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), None, None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }]).unwrap(), player_eyes: [0, 45, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, SpadeJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, SpadeJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, ClubNine, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No90), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::Announcement, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), None, None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }]).unwrap(), player_eyes: [0, 45, 0, 0], observing_player_hand: FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, ClubNine, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, SpadeJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, ClubNine, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No90), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::Announcement, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), None, None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }]).unwrap(), player_eyes: [0, 45, 0, 0], observing_player_hand: FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, SpadeNine, HeartAce, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, SpadeJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, ClubNine, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No90), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::Announcement, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), None, None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }]).unwrap(), player_eyes: [0, 45, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, SpadeJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, ClubNine, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No90), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardHeartQueen, CardClubTen, CardClubJack, CardClubAce, CardSpadeJack]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), None, None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }]).unwrap(), player_eyes: [0, 45, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, SpadeJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, SpadeJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, ClubNine, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No90), contra_lowest_announcement: None });
//
//         state.play_action(CardSpadeJack);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::Announcement, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(SpadeJack), None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }]).unwrap(), player_eyes: [0, 45, 0, 0], observing_player_hand: FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, ClubNine, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, ClubNine, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No90), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::Announcement, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(SpadeJack), None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }]).unwrap(), player_eyes: [0, 45, 0, 0], observing_player_hand: FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, SpadeNine, HeartAce, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, ClubNine, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No90), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::Announcement, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(SpadeJack), None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }]).unwrap(), player_eyes: [0, 45, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, ClubNine, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No90), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::Announcement, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(SpadeJack), None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }]).unwrap(), player_eyes: [0, 45, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, ClubNine, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No90), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondQueen, CardClubNine]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(SpadeJack), None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }]).unwrap(), player_eyes: [0, 45, 0, 0], observing_player_hand: FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, ClubNine, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, ClubNine, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No90), contra_lowest_announcement: None });
//
//         state.play_action(CardClubNine);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::Announcement, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(SpadeJack), Some(ClubNine), None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }]).unwrap(), player_eyes: [0, 45, 0, 0], observing_player_hand: FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, SpadeNine, HeartAce, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No90), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::Announcement, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(SpadeJack), Some(ClubNine), None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }]).unwrap(), player_eyes: [0, 45, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No90), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::Announcement, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(SpadeJack), Some(ClubNine), None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }]).unwrap(), player_eyes: [0, 45, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No90), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::Announcement, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(SpadeJack), Some(ClubNine), None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }]).unwrap(), player_eyes: [0, 45, 0, 0], observing_player_hand: FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No90), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondJack, CardClubTen, CardSpadeQueen]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(SpadeJack), Some(ClubNine), None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }]).unwrap(), player_eyes: [0, 45, 0, 0], observing_player_hand: FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, SpadeNine, HeartAce, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, ClubTen, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No90), contra_lowest_announcement: None });
//
//         state.play_action(CardClubTen);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::Announcement, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(SpadeJack), Some(ClubNine), Some(ClubTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }]).unwrap(), player_eyes: [0, 60, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No90), contra_lowest_announcement: None });
//
//         state.play_action(AnnouncementNo60);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::Announcement, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(SpadeJack), Some(ClubNine), Some(ClubTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 12, player: FdoPlayer::LEFT, announcement: No60 }]).unwrap(), player_eyes: [0, 60, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No60), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::Announcement, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(SpadeJack), Some(ClubNine), Some(ClubTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 12, player: FdoPlayer::LEFT, announcement: No60 }]).unwrap(), player_eyes: [0, 60, 0, 0], observing_player_hand: FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No60), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::Announcement, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(SpadeJack), Some(ClubNine), Some(ClubTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 12, player: FdoPlayer::LEFT, announcement: No60 }]).unwrap(), player_eyes: [0, 60, 0, 0], observing_player_hand: FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, SpadeNine, HeartAce, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No60), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondJack, CardDiamondQueen, CardHeartTen, CardHeartJack, CardHeartQueen, CardClubNine, CardClubQueen, CardSpadeJack]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(SpadeJack), Some(ClubNine), Some(ClubTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 12, player: FdoPlayer::LEFT, announcement: No60 }]).unwrap(), player_eyes: [0, 60, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, ClubQueen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No60), contra_lowest_announcement: None });
//
//         state.play_action(CardClubQueen);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::Announcement, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(SpadeJack), Some(ClubNine), Some(ClubTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(ClubQueen), None, None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 12, player: FdoPlayer::LEFT, announcement: No60 }]).unwrap(), player_eyes: [0, 60, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No60), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::Announcement, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(SpadeJack), Some(ClubNine), Some(ClubTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(ClubQueen), None, None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 12, player: FdoPlayer::LEFT, announcement: No60 }]).unwrap(), player_eyes: [0, 60, 0, 0], observing_player_hand: FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No60), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::Announcement, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(SpadeJack), Some(ClubNine), Some(ClubTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(ClubQueen), None, None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 12, player: FdoPlayer::LEFT, announcement: No60 }]).unwrap(), player_eyes: [0, 60, 0, 0], observing_player_hand: FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, SpadeNine, HeartAce, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No60), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::Announcement, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(SpadeJack), Some(ClubNine), Some(ClubTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(ClubQueen), None, None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 12, player: FdoPlayer::LEFT, announcement: No60 }]).unwrap(), player_eyes: [0, 60, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartTen, HeartTen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No60), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardHeartQueen, CardClubTen, CardClubJack, CardClubAce]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(SpadeJack), Some(ClubNine), Some(ClubTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(ClubQueen), None, None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 12, player: FdoPlayer::LEFT, announcement: No60 }]).unwrap(), player_eyes: [0, 60, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No60), contra_lowest_announcement: None });
//
//         state.play_action(CardClubJack);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::Announcement, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(SpadeJack), Some(ClubNine), Some(ClubTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(ClubJack), None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 12, player: FdoPlayer::LEFT, announcement: No60 }]).unwrap(), player_eyes: [0, 60, 0, 0], observing_player_hand: FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No60), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::Announcement, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(SpadeJack), Some(ClubNine), Some(ClubTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(ClubJack), None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 12, player: FdoPlayer::LEFT, announcement: No60 }]).unwrap(), player_eyes: [0, 60, 0, 0], observing_player_hand: FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, SpadeNine, HeartAce, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No60), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::Announcement, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(SpadeJack), Some(ClubNine), Some(ClubTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(ClubJack), None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 12, player: FdoPlayer::LEFT, announcement: No60 }]).unwrap(), player_eyes: [0, 60, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartTen, HeartTen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No60), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::Announcement, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(SpadeJack), Some(ClubNine), Some(ClubTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(ClubJack), None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 12, player: FdoPlayer::LEFT, announcement: No60 }]).unwrap(), player_eyes: [0, 60, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, ClubJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No60), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondQueen]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(SpadeJack), Some(ClubNine), Some(ClubTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(ClubJack), None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 12, player: FdoPlayer::LEFT, announcement: No60 }]).unwrap(), player_eyes: [0, 60, 0, 0], observing_player_hand: FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondQueen, DiamondTen, DiamondKing, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No60), contra_lowest_announcement: None });
//
//         state.play_action(CardDiamondQueen);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::Announcement, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(SpadeJack), Some(ClubNine), Some(ClubTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(ClubJack), Some(DiamondQueen), None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 12, player: FdoPlayer::LEFT, announcement: No60 }]).unwrap(), player_eyes: [0, 60, 0, 0], observing_player_hand: FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, SpadeNine, HeartAce, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondTen, DiamondKing, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No60), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::Announcement, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(SpadeJack), Some(ClubNine), Some(ClubTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(ClubJack), Some(DiamondQueen), None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 12, player: FdoPlayer::LEFT, announcement: No60 }]).unwrap(), player_eyes: [0, 60, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartTen, HeartTen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondTen, DiamondKing, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No60), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::Announcement, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(SpadeJack), Some(ClubNine), Some(ClubTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(ClubJack), Some(DiamondQueen), None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 12, player: FdoPlayer::LEFT, announcement: No60 }]).unwrap(), player_eyes: [0, 60, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, ClubJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondTen, DiamondKing, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No60), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::Announcement, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(SpadeJack), Some(ClubNine), Some(ClubTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(ClubJack), Some(DiamondQueen), None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 12, player: FdoPlayer::LEFT, announcement: No60 }]).unwrap(), player_eyes: [0, 60, 0, 0], observing_player_hand: FdoHand::from_vec(vec![DiamondTen, DiamondKing, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondTen, DiamondKing, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No60), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondJack, CardSpadeQueen]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(SpadeJack), Some(ClubNine), Some(ClubTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(ClubJack), Some(DiamondQueen), None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 12, player: FdoPlayer::LEFT, announcement: No60 }]).unwrap(), player_eyes: [0, 60, 0, 0], observing_player_hand: FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, SpadeNine, HeartAce, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondJack, DiamondTen, DiamondKing, DiamondNine, DiamondNine, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondTen, DiamondKing, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No60), contra_lowest_announcement: None });
//
//         state.play_action(CardDiamondJack);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::Announcement, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(SpadeJack), Some(ClubNine), Some(ClubTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(ClubJack), Some(DiamondQueen), Some(DiamondJack)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 12, player: FdoPlayer::LEFT, announcement: No60 }]).unwrap(), player_eyes: [0, 70, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartTen, HeartTen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondTen, DiamondKing, DiamondNine, DiamondNine, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondTen, DiamondKing, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No60), contra_lowest_announcement: None });
//
//         state.play_action(AnnouncementNo30);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::Announcement, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(SpadeJack), Some(ClubNine), Some(ClubTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(ClubJack), Some(DiamondQueen), Some(DiamondJack)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 12, player: FdoPlayer::LEFT, announcement: No60 }, FdoAnnouncementOccurrence { card_index: 16, player: FdoPlayer::LEFT, announcement: No30 }]).unwrap(), player_eyes: [0, 70, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, ClubJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondTen, DiamondKing, DiamondNine, DiamondNine, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondTen, DiamondKing, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No30), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::Announcement, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(SpadeJack), Some(ClubNine), Some(ClubTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(ClubJack), Some(DiamondQueen), Some(DiamondJack)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 12, player: FdoPlayer::LEFT, announcement: No60 }, FdoAnnouncementOccurrence { card_index: 16, player: FdoPlayer::LEFT, announcement: No30 }]).unwrap(), player_eyes: [0, 70, 0, 0], observing_player_hand: FdoHand::from_vec(vec![DiamondTen, DiamondKing, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondTen, DiamondKing, DiamondNine, DiamondNine, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondTen, DiamondKing, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No30), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::Announcement, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(SpadeJack), Some(ClubNine), Some(ClubTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(ClubJack), Some(DiamondQueen), Some(DiamondJack)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 12, player: FdoPlayer::LEFT, announcement: No60 }, FdoAnnouncementOccurrence { card_index: 16, player: FdoPlayer::LEFT, announcement: No30 }]).unwrap(), player_eyes: [0, 70, 0, 0], observing_player_hand: FdoHand::from_vec(vec![SpadeQueen, DiamondTen, DiamondKing, DiamondNine, DiamondNine, SpadeNine, HeartAce, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondTen, DiamondKing, DiamondNine, DiamondNine, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondTen, DiamondKing, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No30), contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondJack, CardDiamondQueen, CardHeartTen, CardHeartJack, CardHeartQueen, CardClubNine, CardSpadeJack]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(SpadeJack), Some(ClubNine), Some(ClubTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(ClubJack), Some(DiamondQueen), Some(DiamondJack)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 12, player: FdoPlayer::LEFT, announcement: No60 }, FdoAnnouncementOccurrence { card_index: 16, player: FdoPlayer::LEFT, announcement: No30 }]).unwrap(), player_eyes: [0, 70, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartTen, HeartTen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondTen, DiamondKing, DiamondNine, DiamondNine, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartTen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondTen, DiamondKing, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No30), contra_lowest_announcement: None });
//
//         state.play_action(CardHeartTen);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::Announcement, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(SpadeJack), Some(ClubNine), Some(ClubTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(ClubJack), Some(DiamondQueen), Some(DiamondJack)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(HeartTen), None, None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 12, player: FdoPlayer::LEFT, announcement: No60 }, FdoAnnouncementOccurrence { card_index: 16, player: FdoPlayer::LEFT, announcement: No30 }]).unwrap(), player_eyes: [0, 70, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, ClubJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondTen, DiamondKing, DiamondNine, DiamondNine, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondTen, DiamondKing, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No30), contra_lowest_announcement: None });
//
//         state.play_action(AnnouncementReContra);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::Announcement, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(SpadeJack), Some(ClubNine), Some(ClubTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(ClubJack), Some(DiamondQueen), Some(DiamondJack)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(HeartTen), None, None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 12, player: FdoPlayer::LEFT, announcement: No60 }, FdoAnnouncementOccurrence { card_index: 16, player: FdoPlayer::LEFT, announcement: No30 }, FdoAnnouncementOccurrence { card_index: 17, player: FdoPlayer::TOP, announcement: ReContra }]).unwrap(), player_eyes: [0, 70, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartTen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondTen, DiamondKing, DiamondNine, DiamondNine, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondTen, DiamondKing, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No30), contra_lowest_announcement: Some(ReContra) });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardHeartQueen, CardClubTen, CardClubJack, CardClubAce]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(SpadeJack), Some(ClubNine), Some(ClubTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(ClubJack), Some(DiamondQueen), Some(DiamondJack)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(HeartTen), None, None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 12, player: FdoPlayer::LEFT, announcement: No60 }, FdoAnnouncementOccurrence { card_index: 16, player: FdoPlayer::LEFT, announcement: No30 }, FdoAnnouncementOccurrence { card_index: 17, player: FdoPlayer::TOP, announcement: ReContra }]).unwrap(), player_eyes: [0, 70, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, ClubJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondTen, DiamondKing, DiamondNine, DiamondNine, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, DiamondAce, DiamondAce, ClubAce, ClubTen, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondTen, DiamondKing, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No30), contra_lowest_announcement: Some(ReContra) });
//
//         state.play_action(CardClubTen);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::Announcement, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(SpadeJack), Some(ClubNine), Some(ClubTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(ClubJack), Some(DiamondQueen), Some(DiamondJack)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(HeartTen), Some(ClubTen), None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 12, player: FdoPlayer::LEFT, announcement: No60 }, FdoAnnouncementOccurrence { card_index: 16, player: FdoPlayer::LEFT, announcement: No30 }, FdoAnnouncementOccurrence { card_index: 17, player: FdoPlayer::TOP, announcement: ReContra }]).unwrap(), player_eyes: [0, 70, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartTen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondTen, DiamondKing, DiamondNine, DiamondNine, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, DiamondAce, DiamondAce, ClubAce, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondTen, DiamondKing, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No30), contra_lowest_announcement: Some(ReContra) });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondTen, CardDiamondKing, CardHeartNine, CardHeartKing, CardHeartAce, CardSpadeKing]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(SpadeJack), Some(ClubNine), Some(ClubTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(ClubJack), Some(DiamondQueen), Some(DiamondJack)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(HeartTen), Some(ClubTen), None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 12, player: FdoPlayer::LEFT, announcement: No60 }, FdoAnnouncementOccurrence { card_index: 16, player: FdoPlayer::LEFT, announcement: No30 }, FdoAnnouncementOccurrence { card_index: 17, player: FdoPlayer::TOP, announcement: ReContra }]).unwrap(), player_eyes: [0, 70, 0, 0], observing_player_hand: FdoHand::from_vec(vec![DiamondTen, DiamondKing, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondTen, DiamondKing, DiamondNine, DiamondNine, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, DiamondAce, DiamondAce, ClubAce, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondTen, DiamondKing, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No30), contra_lowest_announcement: Some(ReContra) });
//
//         state.play_action(CardHeartNine);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::Announcement, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(SpadeJack), Some(ClubNine), Some(ClubTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(ClubJack), Some(DiamondQueen), Some(DiamondJack)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(HeartTen), Some(ClubTen), Some(HeartNine), None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 12, player: FdoPlayer::LEFT, announcement: No60 }, FdoAnnouncementOccurrence { card_index: 16, player: FdoPlayer::LEFT, announcement: No30 }, FdoAnnouncementOccurrence { card_index: 17, player: FdoPlayer::TOP, announcement: ReContra }]).unwrap(), player_eyes: [0, 70, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartTen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondTen, DiamondKing, DiamondNine, DiamondNine, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, DiamondAce, DiamondAce, ClubAce, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondTen, DiamondKing, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No30), contra_lowest_announcement: Some(ReContra) });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardSpadeQueen]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(SpadeJack), Some(ClubNine), Some(ClubTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(ClubJack), Some(DiamondQueen), Some(DiamondJack)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(HeartTen), Some(ClubTen), Some(HeartNine), None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 12, player: FdoPlayer::LEFT, announcement: No60 }, FdoAnnouncementOccurrence { card_index: 16, player: FdoPlayer::LEFT, announcement: No30 }, FdoAnnouncementOccurrence { card_index: 17, player: FdoPlayer::TOP, announcement: ReContra }]).unwrap(), player_eyes: [0, 70, 0, 0], observing_player_hand: FdoHand::from_vec(vec![SpadeQueen, DiamondTen, DiamondKing, DiamondNine, DiamondNine, SpadeNine, HeartAce, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeQueen, DiamondTen, DiamondKing, DiamondNine, DiamondNine, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, DiamondAce, DiamondAce, ClubAce, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondTen, DiamondKing, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No30), contra_lowest_announcement: Some(ReContra) });
//
//         state.play_action(CardSpadeQueen);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::Announcement, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(SpadeJack), Some(ClubNine), Some(ClubTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(ClubJack), Some(DiamondQueen), Some(DiamondJack)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(HeartTen), Some(ClubTen), Some(HeartNine), Some(SpadeQueen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartTen) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 12, player: FdoPlayer::LEFT, announcement: No60 }, FdoAnnouncementOccurrence { card_index: 16, player: FdoPlayer::LEFT, announcement: No30 }, FdoAnnouncementOccurrence { card_index: 17, player: FdoPlayer::TOP, announcement: ReContra }]).unwrap(), player_eyes: [0, 93, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartTen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![DiamondTen, DiamondKing, DiamondNine, DiamondNine, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, DiamondAce, DiamondAce, ClubAce, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondTen, DiamondKing, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No30), contra_lowest_announcement: Some(ReContra) });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondJack, CardDiamondQueen, CardHeartTen, CardHeartJack, CardHeartQueen, CardClubNine, CardSpadeJack]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(SpadeJack), Some(ClubNine), Some(ClubTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(ClubJack), Some(DiamondQueen), Some(DiamondJack)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(HeartTen), Some(ClubTen), Some(HeartNine), Some(SpadeQueen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartTen) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 12, player: FdoPlayer::LEFT, announcement: No60 }, FdoAnnouncementOccurrence { card_index: 16, player: FdoPlayer::LEFT, announcement: No30 }, FdoAnnouncementOccurrence { card_index: 17, player: FdoPlayer::TOP, announcement: ReContra }]).unwrap(), player_eyes: [0, 93, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartTen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![DiamondTen, DiamondKing, DiamondNine, DiamondNine, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, HeartQueen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, DiamondAce, DiamondAce, ClubAce, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondTen, DiamondKing, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No30), contra_lowest_announcement: Some(ReContra) });
//
//         state.play_action(CardHeartQueen);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardHeartQueen, CardClubJack, CardClubAce]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(SpadeJack), Some(ClubNine), Some(ClubTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(ClubJack), Some(DiamondQueen), Some(DiamondJack)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(HeartTen), Some(ClubTen), Some(HeartNine), Some(SpadeQueen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartQueen), None, None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 12, player: FdoPlayer::LEFT, announcement: No60 }, FdoAnnouncementOccurrence { card_index: 16, player: FdoPlayer::LEFT, announcement: No30 }, FdoAnnouncementOccurrence { card_index: 17, player: FdoPlayer::TOP, announcement: ReContra }]).unwrap(), player_eyes: [0, 93, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, ClubJack, DiamondAce, DiamondAce, ClubAce, SpadeAce, SpadeTen]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![DiamondTen, DiamondKing, DiamondNine, DiamondNine, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, DiamondAce, DiamondAce, ClubAce, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondTen, DiamondKing, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No30), contra_lowest_announcement: Some(ReContra) });
//
//         state.play_action(CardClubJack);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondTen, CardDiamondKing, CardHeartNine, CardHeartKing, CardHeartAce, CardSpadeKing]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(SpadeJack), Some(ClubNine), Some(ClubTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(ClubJack), Some(DiamondQueen), Some(DiamondJack)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(HeartTen), Some(ClubTen), Some(HeartNine), Some(SpadeQueen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartQueen), Some(ClubJack), None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 12, player: FdoPlayer::LEFT, announcement: No60 }, FdoAnnouncementOccurrence { card_index: 16, player: FdoPlayer::LEFT, announcement: No30 }, FdoAnnouncementOccurrence { card_index: 17, player: FdoPlayer::TOP, announcement: ReContra }]).unwrap(), player_eyes: [0, 93, 0, 0], observing_player_hand: FdoHand::from_vec(vec![DiamondTen, DiamondKing, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![DiamondTen, DiamondKing, DiamondNine, DiamondNine, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, DiamondAce, DiamondAce, ClubAce, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondTen, DiamondKing, SpadeKing, SpadeKing, HeartAce, HeartKing, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No30), contra_lowest_announcement: Some(ReContra) });
//
//         state.play_action(CardHeartNine);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondNine, CardDiamondTen, CardDiamondKing, CardHeartKing, CardHeartAce, CardSpadeNine]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(SpadeJack), Some(ClubNine), Some(ClubTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(ClubJack), Some(DiamondQueen), Some(DiamondJack)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(HeartTen), Some(ClubTen), Some(HeartNine), Some(SpadeQueen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartQueen), Some(ClubJack), Some(HeartNine), None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 12, player: FdoPlayer::LEFT, announcement: No60 }, FdoAnnouncementOccurrence { card_index: 16, player: FdoPlayer::LEFT, announcement: No30 }, FdoAnnouncementOccurrence { card_index: 17, player: FdoPlayer::TOP, announcement: ReContra }]).unwrap(), player_eyes: [0, 93, 0, 0], observing_player_hand: FdoHand::from_vec(vec![DiamondTen, DiamondKing, DiamondNine, DiamondNine, SpadeNine, HeartAce, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![DiamondTen, DiamondKing, DiamondNine, DiamondNine, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, DiamondAce, DiamondAce, ClubAce, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondTen, DiamondKing, SpadeKing, SpadeKing, HeartAce, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No30), contra_lowest_announcement: Some(ReContra) });
//
//         state.play_action(CardDiamondNine);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondJack, CardDiamondQueen, CardHeartTen, CardHeartJack, CardClubNine, CardSpadeJack]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(SpadeJack), Some(ClubNine), Some(ClubTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(ClubJack), Some(DiamondQueen), Some(DiamondJack)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(HeartTen), Some(ClubTen), Some(HeartNine), Some(SpadeQueen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartQueen), Some(ClubJack), Some(HeartNine), Some(DiamondNine)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartQueen) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 12, player: FdoPlayer::LEFT, announcement: No60 }, FdoAnnouncementOccurrence { card_index: 16, player: FdoPlayer::LEFT, announcement: No30 }, FdoAnnouncementOccurrence { card_index: 17, player: FdoPlayer::TOP, announcement: ReContra }]).unwrap(), player_eyes: [0, 98, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartTen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![DiamondTen, DiamondKing, DiamondNine, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, DiamondAce, DiamondAce, ClubAce, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondTen, DiamondKing, SpadeKing, SpadeKing, HeartAce, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No30), contra_lowest_announcement: Some(ReContra) });
//
//         state.play_action(CardHeartTen);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardHeartQueen, CardClubAce]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(SpadeJack), Some(ClubNine), Some(ClubTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(ClubJack), Some(DiamondQueen), Some(DiamondJack)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(HeartTen), Some(ClubTen), Some(HeartNine), Some(SpadeQueen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartQueen), Some(ClubJack), Some(HeartNine), Some(DiamondNine)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartQueen) }, FdoTrick { cards: [Some(HeartTen), None, None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 12, player: FdoPlayer::LEFT, announcement: No60 }, FdoAnnouncementOccurrence { card_index: 16, player: FdoPlayer::LEFT, announcement: No30 }, FdoAnnouncementOccurrence { card_index: 17, player: FdoPlayer::TOP, announcement: ReContra }]).unwrap(), player_eyes: [0, 98, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, DiamondAce, DiamondAce, ClubAce, SpadeAce, SpadeTen]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![DiamondTen, DiamondKing, DiamondNine, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, DiamondAce, DiamondAce, ClubAce, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondTen, DiamondKing, SpadeKing, SpadeKing, HeartAce, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No30), contra_lowest_announcement: Some(ReContra) });
//
//         state.play_action(CardClubAce);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondTen, CardDiamondKing, CardHeartKing, CardHeartAce, CardSpadeKing]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(SpadeJack), Some(ClubNine), Some(ClubTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(ClubJack), Some(DiamondQueen), Some(DiamondJack)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(HeartTen), Some(ClubTen), Some(HeartNine), Some(SpadeQueen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartQueen), Some(ClubJack), Some(HeartNine), Some(DiamondNine)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartQueen) }, FdoTrick { cards: [Some(HeartTen), Some(ClubAce), None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 12, player: FdoPlayer::LEFT, announcement: No60 }, FdoAnnouncementOccurrence { card_index: 16, player: FdoPlayer::LEFT, announcement: No30 }, FdoAnnouncementOccurrence { card_index: 17, player: FdoPlayer::TOP, announcement: ReContra }]).unwrap(), player_eyes: [0, 98, 0, 0], observing_player_hand: FdoHand::from_vec(vec![DiamondTen, DiamondKing, SpadeKing, SpadeKing, HeartAce, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![DiamondTen, DiamondKing, DiamondNine, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, DiamondAce, DiamondAce, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondTen, DiamondKing, SpadeKing, SpadeKing, HeartAce, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No30), contra_lowest_announcement: Some(ReContra) });
//
//         state.play_action(CardDiamondKing);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondNine, CardDiamondTen, CardDiamondKing, CardHeartKing, CardHeartAce, CardSpadeNine]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(SpadeJack), Some(ClubNine), Some(ClubTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(ClubJack), Some(DiamondQueen), Some(DiamondJack)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(HeartTen), Some(ClubTen), Some(HeartNine), Some(SpadeQueen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartQueen), Some(ClubJack), Some(HeartNine), Some(DiamondNine)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartQueen) }, FdoTrick { cards: [Some(HeartTen), Some(ClubAce), Some(DiamondKing), None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 12, player: FdoPlayer::LEFT, announcement: No60 }, FdoAnnouncementOccurrence { card_index: 16, player: FdoPlayer::LEFT, announcement: No30 }, FdoAnnouncementOccurrence { card_index: 17, player: FdoPlayer::TOP, announcement: ReContra }]).unwrap(), player_eyes: [0, 98, 0, 0], observing_player_hand: FdoHand::from_vec(vec![DiamondTen, DiamondKing, DiamondNine, SpadeNine, HeartAce, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![DiamondTen, DiamondKing, DiamondNine, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, DiamondAce, DiamondAce, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondTen, SpadeKing, SpadeKing, HeartAce, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No30), contra_lowest_announcement: Some(ReContra) });
//
//         state.play_action(CardDiamondNine);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondJack, CardDiamondQueen, CardHeartJack, CardClubNine, CardSpadeJack]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(SpadeJack), Some(ClubNine), Some(ClubTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(ClubJack), Some(DiamondQueen), Some(DiamondJack)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(HeartTen), Some(ClubTen), Some(HeartNine), Some(SpadeQueen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartQueen), Some(ClubJack), Some(HeartNine), Some(DiamondNine)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartQueen) }, FdoTrick { cards: [Some(HeartTen), Some(ClubAce), Some(DiamondKing), Some(DiamondNine)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartTen) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 12, player: FdoPlayer::LEFT, announcement: No60 }, FdoAnnouncementOccurrence { card_index: 16, player: FdoPlayer::LEFT, announcement: No30 }, FdoAnnouncementOccurrence { card_index: 17, player: FdoPlayer::TOP, announcement: ReContra }]).unwrap(), player_eyes: [0, 123, 0, 0], observing_player_hand: FdoHand::from_vec(vec![DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![DiamondTen, DiamondKing, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![DiamondQueen, SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, DiamondAce, DiamondAce, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondTen, SpadeKing, SpadeKing, HeartAce, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No30), contra_lowest_announcement: Some(ReContra) });
//
//         state.play_action(CardDiamondQueen);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardHeartQueen]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(SpadeJack), Some(ClubNine), Some(ClubTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(ClubJack), Some(DiamondQueen), Some(DiamondJack)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(HeartTen), Some(ClubTen), Some(HeartNine), Some(SpadeQueen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartQueen), Some(ClubJack), Some(HeartNine), Some(DiamondNine)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartQueen) }, FdoTrick { cards: [Some(HeartTen), Some(ClubAce), Some(DiamondKing), Some(DiamondNine)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondQueen), None, None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 12, player: FdoPlayer::LEFT, announcement: No60 }, FdoAnnouncementOccurrence { card_index: 16, player: FdoPlayer::LEFT, announcement: No30 }, FdoAnnouncementOccurrence { card_index: 17, player: FdoPlayer::TOP, announcement: ReContra }]).unwrap(), player_eyes: [0, 123, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, DiamondAce, DiamondAce, SpadeAce, SpadeTen]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![DiamondTen, DiamondKing, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![HeartQueen, DiamondAce, DiamondAce, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondTen, SpadeKing, SpadeKing, HeartAce, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No30), contra_lowest_announcement: Some(ReContra) });
//
//         state.play_action(CardHeartQueen);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondTen, CardHeartKing, CardHeartAce, CardSpadeKing]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(SpadeJack), Some(ClubNine), Some(ClubTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(ClubJack), Some(DiamondQueen), Some(DiamondJack)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(HeartTen), Some(ClubTen), Some(HeartNine), Some(SpadeQueen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartQueen), Some(ClubJack), Some(HeartNine), Some(DiamondNine)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartQueen) }, FdoTrick { cards: [Some(HeartTen), Some(ClubAce), Some(DiamondKing), Some(DiamondNine)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondQueen), Some(HeartQueen), None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 12, player: FdoPlayer::LEFT, announcement: No60 }, FdoAnnouncementOccurrence { card_index: 16, player: FdoPlayer::LEFT, announcement: No30 }, FdoAnnouncementOccurrence { card_index: 17, player: FdoPlayer::TOP, announcement: ReContra }]).unwrap(), player_eyes: [0, 123, 0, 0], observing_player_hand: FdoHand::from_vec(vec![DiamondTen, SpadeKing, SpadeKing, HeartAce, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![DiamondTen, DiamondKing, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![DiamondAce, DiamondAce, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![DiamondTen, SpadeKing, SpadeKing, HeartAce, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No30), contra_lowest_announcement: Some(ReContra) });
//
//         state.play_action(CardDiamondTen);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondTen, CardDiamondKing, CardHeartKing, CardHeartAce, CardSpadeNine]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(SpadeJack), Some(ClubNine), Some(ClubTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(ClubJack), Some(DiamondQueen), Some(DiamondJack)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(HeartTen), Some(ClubTen), Some(HeartNine), Some(SpadeQueen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartQueen), Some(ClubJack), Some(HeartNine), Some(DiamondNine)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartQueen) }, FdoTrick { cards: [Some(HeartTen), Some(ClubAce), Some(DiamondKing), Some(DiamondNine)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondQueen), Some(HeartQueen), Some(DiamondTen), None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 12, player: FdoPlayer::LEFT, announcement: No60 }, FdoAnnouncementOccurrence { card_index: 16, player: FdoPlayer::LEFT, announcement: No30 }, FdoAnnouncementOccurrence { card_index: 17, player: FdoPlayer::TOP, announcement: ReContra }]).unwrap(), player_eyes: [0, 123, 0, 0], observing_player_hand: FdoHand::from_vec(vec![DiamondTen, DiamondKing, SpadeNine, HeartAce, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![DiamondTen, DiamondKing, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![DiamondAce, DiamondAce, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![SpadeKing, SpadeKing, HeartAce, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No30), contra_lowest_announcement: Some(ReContra) });
//
//         state.play_action(CardDiamondTen);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondAce, CardSpadeTen, CardSpadeAce]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(SpadeJack), Some(ClubNine), Some(ClubTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(ClubJack), Some(DiamondQueen), Some(DiamondJack)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(HeartTen), Some(ClubTen), Some(HeartNine), Some(SpadeQueen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartQueen), Some(ClubJack), Some(HeartNine), Some(DiamondNine)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartQueen) }, FdoTrick { cards: [Some(HeartTen), Some(ClubAce), Some(DiamondKing), Some(DiamondNine)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondQueen), Some(HeartQueen), Some(DiamondTen), Some(DiamondTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartQueen) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::TOP, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 12, player: FdoPlayer::LEFT, announcement: No60 }, FdoAnnouncementOccurrence { card_index: 16, player: FdoPlayer::LEFT, announcement: No30 }, FdoAnnouncementOccurrence { card_index: 17, player: FdoPlayer::TOP, announcement: ReContra }]).unwrap(), player_eyes: [0, 123, 26, 0], observing_player_hand: FdoHand::from_vec(vec![DiamondAce, DiamondAce, SpadeAce, SpadeTen]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![DiamondKing, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![DiamondAce, DiamondAce, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![SpadeKing, SpadeKing, HeartAce, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No30), contra_lowest_announcement: Some(ReContra) });
//
//         state.play_action(CardDiamondAce);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardHeartKing, CardHeartAce, CardSpadeKing]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(SpadeJack), Some(ClubNine), Some(ClubTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(ClubJack), Some(DiamondQueen), Some(DiamondJack)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(HeartTen), Some(ClubTen), Some(HeartNine), Some(SpadeQueen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartQueen), Some(ClubJack), Some(HeartNine), Some(DiamondNine)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartQueen) }, FdoTrick { cards: [Some(HeartTen), Some(ClubAce), Some(DiamondKing), Some(DiamondNine)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondQueen), Some(HeartQueen), Some(DiamondTen), Some(DiamondTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartQueen) }, FdoTrick { cards: [Some(DiamondAce), None, None, None], start_player: FdoPlayer::TOP, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 12, player: FdoPlayer::LEFT, announcement: No60 }, FdoAnnouncementOccurrence { card_index: 16, player: FdoPlayer::LEFT, announcement: No30 }, FdoAnnouncementOccurrence { card_index: 17, player: FdoPlayer::TOP, announcement: ReContra }]).unwrap(), player_eyes: [0, 123, 26, 0], observing_player_hand: FdoHand::from_vec(vec![SpadeKing, SpadeKing, HeartAce, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![DiamondKing, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![DiamondAce, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![SpadeKing, SpadeKing, HeartAce, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No30), contra_lowest_announcement: Some(ReContra) });
//
//         state.play_action(CardSpadeKing);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondKing]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(SpadeJack), Some(ClubNine), Some(ClubTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(ClubJack), Some(DiamondQueen), Some(DiamondJack)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(HeartTen), Some(ClubTen), Some(HeartNine), Some(SpadeQueen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartQueen), Some(ClubJack), Some(HeartNine), Some(DiamondNine)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartQueen) }, FdoTrick { cards: [Some(HeartTen), Some(ClubAce), Some(DiamondKing), Some(DiamondNine)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondQueen), Some(HeartQueen), Some(DiamondTen), Some(DiamondTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartQueen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeKing), None, None], start_player: FdoPlayer::TOP, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 12, player: FdoPlayer::LEFT, announcement: No60 }, FdoAnnouncementOccurrence { card_index: 16, player: FdoPlayer::LEFT, announcement: No30 }, FdoAnnouncementOccurrence { card_index: 17, player: FdoPlayer::TOP, announcement: ReContra }]).unwrap(), player_eyes: [0, 123, 26, 0], observing_player_hand: FdoHand::from_vec(vec![DiamondKing, SpadeNine, HeartAce, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![DiamondKing, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![DiamondAce, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![SpadeKing, HeartAce, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No30), contra_lowest_announcement: Some(ReContra) });
//
//         state.play_action(CardDiamondKing);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondJack, CardHeartJack, CardClubNine, CardSpadeJack]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(SpadeJack), Some(ClubNine), Some(ClubTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(ClubJack), Some(DiamondQueen), Some(DiamondJack)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(HeartTen), Some(ClubTen), Some(HeartNine), Some(SpadeQueen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartQueen), Some(ClubJack), Some(HeartNine), Some(DiamondNine)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartQueen) }, FdoTrick { cards: [Some(HeartTen), Some(ClubAce), Some(DiamondKing), Some(DiamondNine)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondQueen), Some(HeartQueen), Some(DiamondTen), Some(DiamondTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartQueen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeKing), Some(DiamondKing), None], start_player: FdoPlayer::TOP, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 12, player: FdoPlayer::LEFT, announcement: No60 }, FdoAnnouncementOccurrence { card_index: 16, player: FdoPlayer::LEFT, announcement: No30 }, FdoAnnouncementOccurrence { card_index: 17, player: FdoPlayer::TOP, announcement: ReContra }]).unwrap(), player_eyes: [0, 123, 26, 0], observing_player_hand: FdoHand::from_vec(vec![SpadeJack, HeartJack, DiamondJack, ClubNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![SpadeJack, HeartJack, DiamondJack, ClubNine]), FdoHand::from_vec(vec![DiamondAce, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![SpadeKing, HeartAce, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No30), contra_lowest_announcement: Some(ReContra) });
//
//         state.play_action(CardClubNine);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondJack, CardHeartJack, CardSpadeJack]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(SpadeJack), Some(ClubNine), Some(ClubTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(ClubJack), Some(DiamondQueen), Some(DiamondJack)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(HeartTen), Some(ClubTen), Some(HeartNine), Some(SpadeQueen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartQueen), Some(ClubJack), Some(HeartNine), Some(DiamondNine)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartQueen) }, FdoTrick { cards: [Some(HeartTen), Some(ClubAce), Some(DiamondKing), Some(DiamondNine)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondQueen), Some(HeartQueen), Some(DiamondTen), Some(DiamondTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartQueen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeKing), Some(DiamondKing), Some(ClubNine)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubNine) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 12, player: FdoPlayer::LEFT, announcement: No60 }, FdoAnnouncementOccurrence { card_index: 16, player: FdoPlayer::LEFT, announcement: No30 }, FdoAnnouncementOccurrence { card_index: 17, player: FdoPlayer::TOP, announcement: ReContra }]).unwrap(), player_eyes: [0, 142, 26, 0], observing_player_hand: FdoHand::from_vec(vec![SpadeJack, HeartJack, DiamondJack]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![SpadeJack, HeartJack, DiamondJack]), FdoHand::from_vec(vec![DiamondAce, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![SpadeKing, HeartAce, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No30), contra_lowest_announcement: Some(ReContra) });
//
//         state.play_action(CardSpadeJack);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondAce, CardSpadeTen, CardSpadeAce]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(SpadeJack), Some(ClubNine), Some(ClubTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(ClubJack), Some(DiamondQueen), Some(DiamondJack)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(HeartTen), Some(ClubTen), Some(HeartNine), Some(SpadeQueen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartQueen), Some(ClubJack), Some(HeartNine), Some(DiamondNine)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartQueen) }, FdoTrick { cards: [Some(HeartTen), Some(ClubAce), Some(DiamondKing), Some(DiamondNine)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondQueen), Some(HeartQueen), Some(DiamondTen), Some(DiamondTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartQueen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeKing), Some(DiamondKing), Some(ClubNine)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubNine) }, FdoTrick { cards: [Some(SpadeJack), None, None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 12, player: FdoPlayer::LEFT, announcement: No60 }, FdoAnnouncementOccurrence { card_index: 16, player: FdoPlayer::LEFT, announcement: No30 }, FdoAnnouncementOccurrence { card_index: 17, player: FdoPlayer::TOP, announcement: ReContra }]).unwrap(), player_eyes: [0, 142, 26, 0], observing_player_hand: FdoHand::from_vec(vec![DiamondAce, SpadeAce, SpadeTen]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartJack, DiamondJack]), FdoHand::from_vec(vec![DiamondAce, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![SpadeKing, HeartAce, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No30), contra_lowest_announcement: Some(ReContra) });
//
//         state.play_action(CardSpadeTen);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardHeartKing, CardHeartAce, CardSpadeKing]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(SpadeJack), Some(ClubNine), Some(ClubTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(ClubJack), Some(DiamondQueen), Some(DiamondJack)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(HeartTen), Some(ClubTen), Some(HeartNine), Some(SpadeQueen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartQueen), Some(ClubJack), Some(HeartNine), Some(DiamondNine)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartQueen) }, FdoTrick { cards: [Some(HeartTen), Some(ClubAce), Some(DiamondKing), Some(DiamondNine)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondQueen), Some(HeartQueen), Some(DiamondTen), Some(DiamondTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartQueen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeKing), Some(DiamondKing), Some(ClubNine)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubNine) }, FdoTrick { cards: [Some(SpadeJack), Some(SpadeTen), None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 12, player: FdoPlayer::LEFT, announcement: No60 }, FdoAnnouncementOccurrence { card_index: 16, player: FdoPlayer::LEFT, announcement: No30 }, FdoAnnouncementOccurrence { card_index: 17, player: FdoPlayer::TOP, announcement: ReContra }]).unwrap(), player_eyes: [0, 142, 26, 0], observing_player_hand: FdoHand::from_vec(vec![SpadeKing, HeartAce, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartJack, DiamondJack]), FdoHand::from_vec(vec![DiamondAce, SpadeAce]), FdoHand::from_vec(vec![SpadeKing, HeartAce, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No30), contra_lowest_announcement: Some(ReContra) });
//
//         state.play_action(CardSpadeKing);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardHeartKing, CardHeartAce, CardSpadeNine]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(SpadeJack), Some(ClubNine), Some(ClubTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(ClubJack), Some(DiamondQueen), Some(DiamondJack)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(HeartTen), Some(ClubTen), Some(HeartNine), Some(SpadeQueen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartQueen), Some(ClubJack), Some(HeartNine), Some(DiamondNine)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartQueen) }, FdoTrick { cards: [Some(HeartTen), Some(ClubAce), Some(DiamondKing), Some(DiamondNine)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondQueen), Some(HeartQueen), Some(DiamondTen), Some(DiamondTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartQueen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeKing), Some(DiamondKing), Some(ClubNine)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubNine) }, FdoTrick { cards: [Some(SpadeJack), Some(SpadeTen), Some(SpadeKing), None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 12, player: FdoPlayer::LEFT, announcement: No60 }, FdoAnnouncementOccurrence { card_index: 16, player: FdoPlayer::LEFT, announcement: No30 }, FdoAnnouncementOccurrence { card_index: 17, player: FdoPlayer::TOP, announcement: ReContra }]).unwrap(), player_eyes: [0, 142, 26, 0], observing_player_hand: FdoHand::from_vec(vec![SpadeNine, HeartAce, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartJack, DiamondJack]), FdoHand::from_vec(vec![DiamondAce, SpadeAce]), FdoHand::from_vec(vec![HeartAce, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No30), contra_lowest_announcement: Some(ReContra) });
//
//         state.play_action(CardSpadeNine);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondJack, CardHeartJack]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(SpadeJack), Some(ClubNine), Some(ClubTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(ClubJack), Some(DiamondQueen), Some(DiamondJack)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(HeartTen), Some(ClubTen), Some(HeartNine), Some(SpadeQueen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartQueen), Some(ClubJack), Some(HeartNine), Some(DiamondNine)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartQueen) }, FdoTrick { cards: [Some(HeartTen), Some(ClubAce), Some(DiamondKing), Some(DiamondNine)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondQueen), Some(HeartQueen), Some(DiamondTen), Some(DiamondTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartQueen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeKing), Some(DiamondKing), Some(ClubNine)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubNine) }, FdoTrick { cards: [Some(SpadeJack), Some(SpadeTen), Some(SpadeKing), Some(SpadeNine)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeJack) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 12, player: FdoPlayer::LEFT, announcement: No60 }, FdoAnnouncementOccurrence { card_index: 16, player: FdoPlayer::LEFT, announcement: No30 }, FdoAnnouncementOccurrence { card_index: 17, player: FdoPlayer::TOP, announcement: ReContra }]).unwrap(), player_eyes: [0, 158, 26, 0], observing_player_hand: FdoHand::from_vec(vec![HeartJack, DiamondJack]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartJack, DiamondJack]), FdoHand::from_vec(vec![DiamondAce, SpadeAce]), FdoHand::from_vec(vec![HeartAce, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No30), contra_lowest_announcement: Some(ReContra) });
//
//         state.play_action(CardHeartJack);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondAce, CardSpadeAce]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(SpadeJack), Some(ClubNine), Some(ClubTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(ClubJack), Some(DiamondQueen), Some(DiamondJack)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(HeartTen), Some(ClubTen), Some(HeartNine), Some(SpadeQueen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartQueen), Some(ClubJack), Some(HeartNine), Some(DiamondNine)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartQueen) }, FdoTrick { cards: [Some(HeartTen), Some(ClubAce), Some(DiamondKing), Some(DiamondNine)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondQueen), Some(HeartQueen), Some(DiamondTen), Some(DiamondTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartQueen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeKing), Some(DiamondKing), Some(ClubNine)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubNine) }, FdoTrick { cards: [Some(SpadeJack), Some(SpadeTen), Some(SpadeKing), Some(SpadeNine)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeJack) }, FdoTrick { cards: [Some(HeartJack), None, None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 12, player: FdoPlayer::LEFT, announcement: No60 }, FdoAnnouncementOccurrence { card_index: 16, player: FdoPlayer::LEFT, announcement: No30 }, FdoAnnouncementOccurrence { card_index: 17, player: FdoPlayer::TOP, announcement: ReContra }]).unwrap(), player_eyes: [0, 158, 26, 0], observing_player_hand: FdoHand::from_vec(vec![DiamondAce, SpadeAce]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartAce, HeartKing]), FdoHand::from_vec(vec![DiamondJack]), FdoHand::from_vec(vec![DiamondAce, SpadeAce]), FdoHand::from_vec(vec![HeartAce, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No30), contra_lowest_announcement: Some(ReContra) });
//
//         state.play_action(CardSpadeAce);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardHeartKing, CardHeartAce]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(SpadeJack), Some(ClubNine), Some(ClubTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(ClubJack), Some(DiamondQueen), Some(DiamondJack)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(HeartTen), Some(ClubTen), Some(HeartNine), Some(SpadeQueen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartQueen), Some(ClubJack), Some(HeartNine), Some(DiamondNine)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartQueen) }, FdoTrick { cards: [Some(HeartTen), Some(ClubAce), Some(DiamondKing), Some(DiamondNine)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondQueen), Some(HeartQueen), Some(DiamondTen), Some(DiamondTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartQueen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeKing), Some(DiamondKing), Some(ClubNine)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubNine) }, FdoTrick { cards: [Some(SpadeJack), Some(SpadeTen), Some(SpadeKing), Some(SpadeNine)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeJack) }, FdoTrick { cards: [Some(HeartJack), Some(SpadeAce), None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 12, player: FdoPlayer::LEFT, announcement: No60 }, FdoAnnouncementOccurrence { card_index: 16, player: FdoPlayer::LEFT, announcement: No30 }, FdoAnnouncementOccurrence { card_index: 17, player: FdoPlayer::TOP, announcement: ReContra }]).unwrap(), player_eyes: [0, 158, 26, 0], observing_player_hand: FdoHand::from_vec(vec![HeartAce, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartAce, HeartKing]), FdoHand::from_vec(vec![DiamondJack]), FdoHand::from_vec(vec![DiamondAce]), FdoHand::from_vec(vec![HeartAce, HeartKing])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No30), contra_lowest_announcement: Some(ReContra) });
//
//         state.play_action(CardHeartKing);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardHeartKing, CardHeartAce]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(SpadeJack), Some(ClubNine), Some(ClubTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(ClubJack), Some(DiamondQueen), Some(DiamondJack)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(HeartTen), Some(ClubTen), Some(HeartNine), Some(SpadeQueen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartQueen), Some(ClubJack), Some(HeartNine), Some(DiamondNine)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartQueen) }, FdoTrick { cards: [Some(HeartTen), Some(ClubAce), Some(DiamondKing), Some(DiamondNine)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondQueen), Some(HeartQueen), Some(DiamondTen), Some(DiamondTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartQueen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeKing), Some(DiamondKing), Some(ClubNine)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubNine) }, FdoTrick { cards: [Some(SpadeJack), Some(SpadeTen), Some(SpadeKing), Some(SpadeNine)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeJack) }, FdoTrick { cards: [Some(HeartJack), Some(SpadeAce), Some(HeartKing), None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 12, player: FdoPlayer::LEFT, announcement: No60 }, FdoAnnouncementOccurrence { card_index: 16, player: FdoPlayer::LEFT, announcement: No30 }, FdoAnnouncementOccurrence { card_index: 17, player: FdoPlayer::TOP, announcement: ReContra }]).unwrap(), player_eyes: [0, 158, 26, 0], observing_player_hand: FdoHand::from_vec(vec![HeartAce, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartAce, HeartKing]), FdoHand::from_vec(vec![DiamondJack]), FdoHand::from_vec(vec![DiamondAce]), FdoHand::from_vec(vec![HeartAce])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No30), contra_lowest_announcement: Some(ReContra) });
//
//         state.play_action(CardHeartKing);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondJack]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(SpadeJack), Some(ClubNine), Some(ClubTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(ClubJack), Some(DiamondQueen), Some(DiamondJack)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(HeartTen), Some(ClubTen), Some(HeartNine), Some(SpadeQueen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartQueen), Some(ClubJack), Some(HeartNine), Some(DiamondNine)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartQueen) }, FdoTrick { cards: [Some(HeartTen), Some(ClubAce), Some(DiamondKing), Some(DiamondNine)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondQueen), Some(HeartQueen), Some(DiamondTen), Some(DiamondTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartQueen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeKing), Some(DiamondKing), Some(ClubNine)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubNine) }, FdoTrick { cards: [Some(SpadeJack), Some(SpadeTen), Some(SpadeKing), Some(SpadeNine)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeJack) }, FdoTrick { cards: [Some(HeartJack), Some(SpadeAce), Some(HeartKing), Some(HeartKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartJack) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 12, player: FdoPlayer::LEFT, announcement: No60 }, FdoAnnouncementOccurrence { card_index: 16, player: FdoPlayer::LEFT, announcement: No30 }, FdoAnnouncementOccurrence { card_index: 17, player: FdoPlayer::TOP, announcement: ReContra }]).unwrap(), player_eyes: [0, 179, 26, 0], observing_player_hand: FdoHand::from_vec(vec![DiamondJack]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartAce]), FdoHand::from_vec(vec![DiamondJack]), FdoHand::from_vec(vec![DiamondAce]), FdoHand::from_vec(vec![HeartAce])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No30), contra_lowest_announcement: Some(ReContra) });
//
//         state.play_action(CardDiamondJack);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondAce]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(SpadeJack), Some(ClubNine), Some(ClubTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(ClubJack), Some(DiamondQueen), Some(DiamondJack)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(HeartTen), Some(ClubTen), Some(HeartNine), Some(SpadeQueen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartQueen), Some(ClubJack), Some(HeartNine), Some(DiamondNine)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartQueen) }, FdoTrick { cards: [Some(HeartTen), Some(ClubAce), Some(DiamondKing), Some(DiamondNine)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondQueen), Some(HeartQueen), Some(DiamondTen), Some(DiamondTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartQueen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeKing), Some(DiamondKing), Some(ClubNine)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubNine) }, FdoTrick { cards: [Some(SpadeJack), Some(SpadeTen), Some(SpadeKing), Some(SpadeNine)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeJack) }, FdoTrick { cards: [Some(HeartJack), Some(SpadeAce), Some(HeartKing), Some(HeartKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartJack) }, FdoTrick { cards: [Some(DiamondJack), None, None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 12, player: FdoPlayer::LEFT, announcement: No60 }, FdoAnnouncementOccurrence { card_index: 16, player: FdoPlayer::LEFT, announcement: No30 }, FdoAnnouncementOccurrence { card_index: 17, player: FdoPlayer::TOP, announcement: ReContra }]).unwrap(), player_eyes: [0, 179, 26, 0], observing_player_hand: FdoHand::from_vec(vec![DiamondAce]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartAce]), FdoHand::from_vec(vec![]), FdoHand::from_vec(vec![DiamondAce]), FdoHand::from_vec(vec![HeartAce])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No30), contra_lowest_announcement: Some(ReContra) });
//
//         state.play_action(CardDiamondAce);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardHeartAce]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(SpadeJack), Some(ClubNine), Some(ClubTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(ClubJack), Some(DiamondQueen), Some(DiamondJack)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(HeartTen), Some(ClubTen), Some(HeartNine), Some(SpadeQueen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartQueen), Some(ClubJack), Some(HeartNine), Some(DiamondNine)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartQueen) }, FdoTrick { cards: [Some(HeartTen), Some(ClubAce), Some(DiamondKing), Some(DiamondNine)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondQueen), Some(HeartQueen), Some(DiamondTen), Some(DiamondTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartQueen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeKing), Some(DiamondKing), Some(ClubNine)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubNine) }, FdoTrick { cards: [Some(SpadeJack), Some(SpadeTen), Some(SpadeKing), Some(SpadeNine)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeJack) }, FdoTrick { cards: [Some(HeartJack), Some(SpadeAce), Some(HeartKing), Some(HeartKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartJack) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondAce), None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 12, player: FdoPlayer::LEFT, announcement: No60 }, FdoAnnouncementOccurrence { card_index: 16, player: FdoPlayer::LEFT, announcement: No30 }, FdoAnnouncementOccurrence { card_index: 17, player: FdoPlayer::TOP, announcement: ReContra }]).unwrap(), player_eyes: [0, 179, 26, 0], observing_player_hand: FdoHand::from_vec(vec![HeartAce]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartAce]), FdoHand::from_vec(vec![]), FdoHand::from_vec(vec![]), FdoHand::from_vec(vec![HeartAce])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No30), contra_lowest_announcement: Some(ReContra) });
//
//         state.play_action(CardHeartAce);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardHeartAce]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(SpadeJack), Some(ClubNine), Some(ClubTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(ClubJack), Some(DiamondQueen), Some(DiamondJack)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(HeartTen), Some(ClubTen), Some(HeartNine), Some(SpadeQueen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartQueen), Some(ClubJack), Some(HeartNine), Some(DiamondNine)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartQueen) }, FdoTrick { cards: [Some(HeartTen), Some(ClubAce), Some(DiamondKing), Some(DiamondNine)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondQueen), Some(HeartQueen), Some(DiamondTen), Some(DiamondTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartQueen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeKing), Some(DiamondKing), Some(ClubNine)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubNine) }, FdoTrick { cards: [Some(SpadeJack), Some(SpadeTen), Some(SpadeKing), Some(SpadeNine)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeJack) }, FdoTrick { cards: [Some(HeartJack), Some(SpadeAce), Some(HeartKing), Some(HeartKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartJack) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondAce), Some(HeartAce), None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 12, player: FdoPlayer::LEFT, announcement: No60 }, FdoAnnouncementOccurrence { card_index: 16, player: FdoPlayer::LEFT, announcement: No30 }, FdoAnnouncementOccurrence { card_index: 17, player: FdoPlayer::TOP, announcement: ReContra }]).unwrap(), player_eyes: [0, 179, 26, 0], observing_player_hand: FdoHand::from_vec(vec![HeartAce]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartAce]), FdoHand::from_vec(vec![]), FdoHand::from_vec(vec![]), FdoHand::from_vec(vec![])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No30), contra_lowest_announcement: Some(ReContra) });
//
//         state.play_action(CardHeartAce);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::ClubsSolo), phase: FdoPhase::Finished, observing_player: FdoPlayer::BOTTOM, current_player: None, allowed_actions_current_player: FdoAllowedActions::from_vec(vec![]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(SpadeAce), Some(ClubKing), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubKing) }, FdoTrick { cards: [Some(SpadeQueen), Some(HeartJack), Some(ClubAce), Some(ClubKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(SpadeJack), Some(ClubNine), Some(ClubTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(ClubJack), Some(DiamondQueen), Some(DiamondJack)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(HeartTen), Some(ClubTen), Some(HeartNine), Some(SpadeQueen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartQueen), Some(ClubJack), Some(HeartNine), Some(DiamondNine)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartQueen) }, FdoTrick { cards: [Some(HeartTen), Some(ClubAce), Some(DiamondKing), Some(DiamondNine)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondQueen), Some(HeartQueen), Some(DiamondTen), Some(DiamondTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartQueen) }, FdoTrick { cards: [Some(DiamondAce), Some(SpadeKing), Some(DiamondKing), Some(ClubNine)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(ClubNine) }, FdoTrick { cards: [Some(SpadeJack), Some(SpadeTen), Some(SpadeKing), Some(SpadeNine)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(SpadeJack) }, FdoTrick { cards: [Some(HeartJack), Some(SpadeAce), Some(HeartKing), Some(HeartKing)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartJack) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondAce), Some(HeartAce), Some(HeartAce)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(DiamondJack) }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::ClubsSolo), Some(FdoVisibleReservation::NotRevealed), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[FdoAnnouncementOccurrence { card_index: 4, player: FdoPlayer::LEFT, announcement: ReContra }, FdoAnnouncementOccurrence { card_index: 8, player: FdoPlayer::LEFT, announcement: No90 }, FdoAnnouncementOccurrence { card_index: 12, player: FdoPlayer::LEFT, announcement: No60 }, FdoAnnouncementOccurrence { card_index: 16, player: FdoPlayer::LEFT, announcement: No30 }, FdoAnnouncementOccurrence { card_index: 17, player: FdoPlayer::TOP, announcement: ReContra }]).unwrap(), player_eyes: [0, 214, 26, 0], observing_player_hand: FdoHand::from_vec(vec![]), finished_stats: Some(FdoEndOfGameStats { re_players: FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT]), is_solo: true, player_eyes: [0, 214, 26, 0], re_eyes: 214, kontra_eyes: 26, re_points: 33, kontra_points: -11, player_points: [-11, 33, -11, -11], basic_winning_point_details: Some(FdoBasicWinningPointsDetails { winning_points: 1, winning_under_90: 1, winning_under_60: 1, winning_under_30: 1, winning_black: 0, re_announcement: 2, kontra_announcement: 2, re_under_90_announcement: 1, re_under_60_announcement: 1, re_under_30_announcement: 1, re_black_announcement: 0, kontra_under_90_announcement: 0, kontra_under_60_announcement: 0, kontra_under_30_announcement: 0, kontra_black_announcement: 0, re_reached_120_against_no_90: 0, re_reached_90_against_no_60: 0, re_reached_60_against_no_30: 0, re_reached_30_against_black: 0, kontra_reached_120_against_no_90: 0, kontra_reached_90_against_no_60: 0, kontra_reached_60_against_no_30: 0, kontra_reached_30_against_black: 0 }), basic_draw_points_details: None, additional_points_details: None }), phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::LEFT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::ClubsSolo), Some(FdoReservation::DiamondsSolo), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![]), FdoHand::from_vec(vec![]), FdoHand::from_vec(vec![]), FdoHand::from_vec(vec![])], phi_team_eyes: [0, 0], re_lowest_announcement: Some(No30), contra_lowest_announcement: Some(ReContra) });
//     }
//
//     #[test]
//     pub fn test_full3() {
//         // Hochzeit
//         // https://www.online-doppelkopf.com/spiele/99.589.890
//         let mut state = FdoState::new_game_from_hand_and_start_player(
//             [
//                 // Bottom
//                 FdoHand::from_vec(vec![HeartTen, DiamondJack, ClubKing, SpadeKing, HeartNine, HeartKing, SpadeTen, HeartQueen, SpadeTen, DiamondTen, DiamondQueen, ClubJack]),
//                 // Left
//                 FdoHand::from_vec(vec![DiamondKing, DiamondKing, ClubTen, SpadeAce, ClubKing, DiamondTen, ClubNine, HeartJack, SpadeJack, ClubJack, DiamondQueen, HeartQueen]),
//                 // Top
//                 FdoHand::from_vec(vec![DiamondNine, HeartTen, ClubAce, SpadeAce, HeartAce, HeartKing, ClubTen, SpadeQueen, SpadeKing, DiamondNine, DiamondAce, SpadeNine]),
//                 // Right
//                 FdoHand::from_vec(vec![DiamondJack, HeartJack, ClubNine, SpadeNine, HeartNine, HeartAce, ClubAce, SpadeJack, SpadeQueen, ClubQueen, ClubQueen, DiamondAce]),
//             ],
//             FdoPlayer::BOTTOM,
//         );
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: None, phase: FdoPhase::Reservation, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![ReservationHealthy, ReservationDiamondsSolo, ReservationHeartsSolo, ReservationSpadesSolo, ReservationClubsSolo, ReservationTrumplessSolo, ReservationQueensSolo, ReservationJacksSolo]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[]).unwrap(), visible_reservations: [None, None, None, None], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartTen, HeartQueen, DiamondQueen, ClubJack, DiamondJack, DiamondTen, ClubKing, SpadeTen, SpadeTen, SpadeKing, HeartKing, HeartNine]), finished_stats: None, phi_re_players: None, phi_real_reservations: FdoReservationRound { reservations: [None, None, None, None], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, HeartQueen, DiamondQueen, ClubJack, DiamondJack, DiamondTen, ClubKing, SpadeTen, SpadeTen, SpadeKing, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondTen, DiamondKing, DiamondKing, ClubTen, ClubKing, ClubNine, SpadeAce]), FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondAce, DiamondNine, DiamondNine, ClubAce, ClubTen, SpadeAce, SpadeKing, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, SpadeQueen, SpadeJack, HeartJack, DiamondJack, DiamondAce, ClubAce, ClubNine, SpadeNine, HeartAce, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(ReservationHealthy);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: None, phase: FdoPhase::Reservation, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![ReservationHealthy, ReservationDiamondsSolo, ReservationHeartsSolo, ReservationSpadesSolo, ReservationClubsSolo, ReservationTrumplessSolo, ReservationQueensSolo, ReservationJacksSolo]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), None, None, None], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondTen, DiamondKing, DiamondKing, ClubTen, ClubKing, ClubNine, SpadeAce]), finished_stats: None, phi_re_players: None, phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), None, None, None], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, HeartQueen, DiamondQueen, ClubJack, DiamondJack, DiamondTen, ClubKing, SpadeTen, SpadeTen, SpadeKing, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondTen, DiamondKing, DiamondKing, ClubTen, ClubKing, ClubNine, SpadeAce]), FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondAce, DiamondNine, DiamondNine, ClubAce, ClubTen, SpadeAce, SpadeKing, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, SpadeQueen, SpadeJack, HeartJack, DiamondJack, DiamondAce, ClubAce, ClubNine, SpadeNine, HeartAce, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(ReservationHealthy);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: None, phase: FdoPhase::Reservation, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![ReservationHealthy, ReservationDiamondsSolo, ReservationHeartsSolo, ReservationSpadesSolo, ReservationClubsSolo, ReservationTrumplessSolo, ReservationQueensSolo, ReservationJacksSolo]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), None, None], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondAce, DiamondNine, DiamondNine, ClubAce, ClubTen, SpadeAce, SpadeKing, SpadeNine, HeartAce, HeartKing]), finished_stats: None, phi_re_players: None, phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), None, None], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, HeartQueen, DiamondQueen, ClubJack, DiamondJack, DiamondTen, ClubKing, SpadeTen, SpadeTen, SpadeKing, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondTen, DiamondKing, DiamondKing, ClubTen, ClubKing, ClubNine, SpadeAce]), FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondAce, DiamondNine, DiamondNine, ClubAce, ClubTen, SpadeAce, SpadeKing, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, SpadeQueen, SpadeJack, HeartJack, DiamondJack, DiamondAce, ClubAce, ClubNine, SpadeNine, HeartAce, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(ReservationHealthy);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: None, phase: FdoPhase::Reservation, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![ReservationHealthy, ReservationWedding, ReservationDiamondsSolo, ReservationHeartsSolo, ReservationSpadesSolo, ReservationClubsSolo, ReservationTrumplessSolo, ReservationQueensSolo, ReservationJacksSolo]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), None], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![ClubQueen, ClubQueen, SpadeQueen, SpadeJack, HeartJack, DiamondJack, DiamondAce, ClubAce, ClubNine, SpadeNine, HeartAce, HeartNine]), finished_stats: None, phi_re_players: None, phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), None], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, HeartQueen, DiamondQueen, ClubJack, DiamondJack, DiamondTen, ClubKing, SpadeTen, SpadeTen, SpadeKing, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondTen, DiamondKing, DiamondKing, ClubTen, ClubKing, ClubNine, SpadeAce]), FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondAce, DiamondNine, DiamondNine, ClubAce, ClubTen, SpadeAce, SpadeKing, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, SpadeQueen, SpadeJack, HeartJack, DiamondJack, DiamondAce, ClubAce, ClubNine, SpadeNine, HeartAce, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(ReservationWedding);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Wedding), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondTen, CardDiamondJack, CardDiamondQueen, CardHeartNine, CardHeartTen, CardHeartQueen, CardHeartKing, CardClubJack, CardClubKing, CardSpadeTen, CardSpadeKing]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: Some(FdoPlayer::RIGHT), tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Wedding)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartTen, HeartQueen, DiamondQueen, ClubJack, DiamondJack, DiamondTen, ClubKing, SpadeTen, SpadeTen, SpadeKing, HeartKing, HeartNine]), finished_stats: None, phi_re_players: None, phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Wedding)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, HeartQueen, DiamondQueen, ClubJack, DiamondJack, DiamondTen, ClubKing, SpadeTen, SpadeTen, SpadeKing, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondTen, DiamondKing, DiamondKing, ClubTen, ClubKing, ClubNine, SpadeAce]), FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondAce, DiamondNine, DiamondNine, ClubAce, ClubTen, SpadeAce, SpadeKing, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, SpadeQueen, SpadeJack, HeartJack, DiamondJack, DiamondAce, ClubAce, ClubNine, SpadeNine, HeartAce, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardHeartTen);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Wedding), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondTen, CardDiamondQueen, CardDiamondKing, CardHeartJack, CardHeartQueen, CardClubJack, CardSpadeJack]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: Some(FdoPlayer::RIGHT), tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Wedding)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondTen, DiamondKing, DiamondKing, ClubTen, ClubKing, ClubNine, SpadeAce]), finished_stats: None, phi_re_players: None, phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Wedding)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, DiamondJack, DiamondTen, ClubKing, SpadeTen, SpadeTen, SpadeKing, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondTen, DiamondKing, DiamondKing, ClubTen, ClubKing, ClubNine, SpadeAce]), FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondAce, DiamondNine, DiamondNine, ClubAce, ClubTen, SpadeAce, SpadeKing, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, SpadeQueen, SpadeJack, HeartJack, DiamondJack, DiamondAce, ClubAce, ClubNine, SpadeNine, HeartAce, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardDiamondKing);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Wedding), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondNine, CardDiamondAce, CardHeartTen, CardSpadeQueen]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: Some(FdoPlayer::RIGHT), tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondKing), None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Wedding)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondAce, DiamondNine, DiamondNine, ClubAce, ClubTen, SpadeAce, SpadeKing, SpadeNine, HeartAce, HeartKing]), finished_stats: None, phi_re_players: None, phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Wedding)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, DiamondJack, DiamondTen, ClubKing, SpadeTen, SpadeTen, SpadeKing, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondTen, DiamondKing, ClubTen, ClubKing, ClubNine, SpadeAce]), FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondAce, DiamondNine, DiamondNine, ClubAce, ClubTen, SpadeAce, SpadeKing, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, SpadeQueen, SpadeJack, HeartJack, DiamondJack, DiamondAce, ClubAce, ClubNine, SpadeNine, HeartAce, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardDiamondNine);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Wedding), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondJack, CardDiamondAce, CardHeartJack, CardClubQueen, CardSpadeJack, CardSpadeQueen]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: Some(FdoPlayer::RIGHT), tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondKing), Some(DiamondNine), None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Wedding)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![ClubQueen, ClubQueen, SpadeQueen, SpadeJack, HeartJack, DiamondJack, DiamondAce, ClubAce, ClubNine, SpadeNine, HeartAce, HeartNine]), finished_stats: None, phi_re_players: None, phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Wedding)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, DiamondJack, DiamondTen, ClubKing, SpadeTen, SpadeTen, SpadeKing, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondTen, DiamondKing, ClubTen, ClubKing, ClubNine, SpadeAce]), FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondAce, DiamondNine, ClubAce, ClubTen, SpadeAce, SpadeKing, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, SpadeQueen, SpadeJack, HeartJack, DiamondJack, DiamondAce, ClubAce, ClubNine, SpadeNine, HeartAce, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardDiamondJack);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Wedding), phase: FdoPhase::Announcement, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: Some(FdoPlayer::RIGHT), tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondKing), Some(DiamondNine), Some(DiamondJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Wedding)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [16, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, DiamondJack, DiamondTen, ClubKing, SpadeTen, SpadeTen, SpadeKing, HeartKing, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Wedding)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, DiamondJack, DiamondTen, ClubKing, SpadeTen, SpadeTen, SpadeKing, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondTen, DiamondKing, ClubTen, ClubKing, ClubNine, SpadeAce]), FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondAce, DiamondNine, ClubAce, ClubTen, SpadeAce, SpadeKing, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, SpadeQueen, SpadeJack, HeartJack, DiamondAce, ClubAce, ClubNine, SpadeNine, HeartAce, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Wedding), phase: FdoPhase::Announcement, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: Some(FdoPlayer::RIGHT), tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondKing), Some(DiamondNine), Some(DiamondJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Wedding)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [16, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondTen, DiamondKing, ClubTen, ClubKing, ClubNine, SpadeAce]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Wedding)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, DiamondJack, DiamondTen, ClubKing, SpadeTen, SpadeTen, SpadeKing, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondTen, DiamondKing, ClubTen, ClubKing, ClubNine, SpadeAce]), FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondAce, DiamondNine, ClubAce, ClubTen, SpadeAce, SpadeKing, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, SpadeQueen, SpadeJack, HeartJack, DiamondAce, ClubAce, ClubNine, SpadeNine, HeartAce, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Wedding), phase: FdoPhase::Announcement, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: Some(FdoPlayer::RIGHT), tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondKing), Some(DiamondNine), Some(DiamondJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Wedding)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [16, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondAce, DiamondNine, ClubAce, ClubTen, SpadeAce, SpadeKing, SpadeNine, HeartAce, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Wedding)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, DiamondJack, DiamondTen, ClubKing, SpadeTen, SpadeTen, SpadeKing, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondTen, DiamondKing, ClubTen, ClubKing, ClubNine, SpadeAce]), FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondAce, DiamondNine, ClubAce, ClubTen, SpadeAce, SpadeKing, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, SpadeQueen, SpadeJack, HeartJack, DiamondAce, ClubAce, ClubNine, SpadeNine, HeartAce, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Wedding), phase: FdoPhase::Announcement, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: Some(FdoPlayer::RIGHT), tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondKing), Some(DiamondNine), Some(DiamondJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Wedding)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [16, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![ClubQueen, ClubQueen, SpadeQueen, SpadeJack, HeartJack, DiamondAce, ClubAce, ClubNine, SpadeNine, HeartAce, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Wedding)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, DiamondJack, DiamondTen, ClubKing, SpadeTen, SpadeTen, SpadeKing, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondTen, DiamondKing, ClubTen, ClubKing, ClubNine, SpadeAce]), FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondAce, DiamondNine, ClubAce, ClubTen, SpadeAce, SpadeKing, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, SpadeQueen, SpadeJack, HeartJack, DiamondAce, ClubAce, ClubNine, SpadeNine, HeartAce, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Wedding), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondTen, CardDiamondJack, CardDiamondQueen, CardHeartNine, CardHeartQueen, CardHeartKing, CardClubJack, CardClubKing, CardSpadeTen, CardSpadeKing]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: Some(FdoPlayer::RIGHT), tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondKing), Some(DiamondNine), Some(DiamondJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Wedding)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [16, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, DiamondJack, DiamondTen, ClubKing, SpadeTen, SpadeTen, SpadeKing, HeartKing, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Wedding)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, DiamondJack, DiamondTen, ClubKing, SpadeTen, SpadeTen, SpadeKing, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondTen, DiamondKing, ClubTen, ClubKing, ClubNine, SpadeAce]), FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondAce, DiamondNine, ClubAce, ClubTen, SpadeAce, SpadeKing, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, SpadeQueen, SpadeJack, HeartJack, DiamondAce, ClubAce, ClubNine, SpadeNine, HeartAce, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardDiamondJack);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Wedding), phase: FdoPhase::Announcement, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: Some(FdoPlayer::RIGHT), tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondKing), Some(DiamondNine), Some(DiamondJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondJack), None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Wedding)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [16, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondTen, DiamondKing, ClubTen, ClubKing, ClubNine, SpadeAce]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Wedding)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, DiamondTen, ClubKing, SpadeTen, SpadeTen, SpadeKing, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondTen, DiamondKing, ClubTen, ClubKing, ClubNine, SpadeAce]), FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondAce, DiamondNine, ClubAce, ClubTen, SpadeAce, SpadeKing, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, SpadeQueen, SpadeJack, HeartJack, DiamondAce, ClubAce, ClubNine, SpadeNine, HeartAce, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Wedding), phase: FdoPhase::Announcement, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: Some(FdoPlayer::RIGHT), tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondKing), Some(DiamondNine), Some(DiamondJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondJack), None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Wedding)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [16, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondAce, DiamondNine, ClubAce, ClubTen, SpadeAce, SpadeKing, SpadeNine, HeartAce, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Wedding)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, DiamondTen, ClubKing, SpadeTen, SpadeTen, SpadeKing, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondTen, DiamondKing, ClubTen, ClubKing, ClubNine, SpadeAce]), FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondAce, DiamondNine, ClubAce, ClubTen, SpadeAce, SpadeKing, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, SpadeQueen, SpadeJack, HeartJack, DiamondAce, ClubAce, ClubNine, SpadeNine, HeartAce, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Wedding), phase: FdoPhase::Announcement, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: Some(FdoPlayer::RIGHT), tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondKing), Some(DiamondNine), Some(DiamondJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondJack), None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Wedding)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [16, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![ClubQueen, ClubQueen, SpadeQueen, SpadeJack, HeartJack, DiamondAce, ClubAce, ClubNine, SpadeNine, HeartAce, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Wedding)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, DiamondTen, ClubKing, SpadeTen, SpadeTen, SpadeKing, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondTen, DiamondKing, ClubTen, ClubKing, ClubNine, SpadeAce]), FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondAce, DiamondNine, ClubAce, ClubTen, SpadeAce, SpadeKing, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, SpadeQueen, SpadeJack, HeartJack, DiamondAce, ClubAce, ClubNine, SpadeNine, HeartAce, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Wedding), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondTen, CardDiamondQueen, CardDiamondKing, CardHeartJack, CardHeartQueen, CardClubJack, CardSpadeJack]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: Some(FdoPlayer::RIGHT), tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondKing), Some(DiamondNine), Some(DiamondJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondJack), None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Wedding)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [16, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondTen, DiamondKing, ClubTen, ClubKing, ClubNine, SpadeAce]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Wedding)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, DiamondTen, ClubKing, SpadeTen, SpadeTen, SpadeKing, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondTen, DiamondKing, ClubTen, ClubKing, ClubNine, SpadeAce]), FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondAce, DiamondNine, ClubAce, ClubTen, SpadeAce, SpadeKing, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, SpadeQueen, SpadeJack, HeartJack, DiamondAce, ClubAce, ClubNine, SpadeNine, HeartAce, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardDiamondKing);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Wedding), phase: FdoPhase::Announcement, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: Some(FdoPlayer::RIGHT), tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondKing), Some(DiamondNine), Some(DiamondJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondKing), None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Wedding)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [16, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondAce, DiamondNine, ClubAce, ClubTen, SpadeAce, SpadeKing, SpadeNine, HeartAce, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Wedding)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, DiamondTen, ClubKing, SpadeTen, SpadeTen, SpadeKing, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondTen, ClubTen, ClubKing, ClubNine, SpadeAce]), FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondAce, DiamondNine, ClubAce, ClubTen, SpadeAce, SpadeKing, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, SpadeQueen, SpadeJack, HeartJack, DiamondAce, ClubAce, ClubNine, SpadeNine, HeartAce, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Wedding), phase: FdoPhase::Announcement, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: Some(FdoPlayer::RIGHT), tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondKing), Some(DiamondNine), Some(DiamondJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondKing), None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Wedding)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [16, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![ClubQueen, ClubQueen, SpadeQueen, SpadeJack, HeartJack, DiamondAce, ClubAce, ClubNine, SpadeNine, HeartAce, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Wedding)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, DiamondTen, ClubKing, SpadeTen, SpadeTen, SpadeKing, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondTen, ClubTen, ClubKing, ClubNine, SpadeAce]), FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondAce, DiamondNine, ClubAce, ClubTen, SpadeAce, SpadeKing, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, SpadeQueen, SpadeJack, HeartJack, DiamondAce, ClubAce, ClubNine, SpadeNine, HeartAce, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Wedding), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondNine, CardDiamondAce, CardHeartTen, CardSpadeQueen]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: Some(FdoPlayer::RIGHT), tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondKing), Some(DiamondNine), Some(DiamondJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondKing), None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Wedding)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [16, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondAce, DiamondNine, ClubAce, ClubTen, SpadeAce, SpadeKing, SpadeNine, HeartAce, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Wedding)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, DiamondTen, ClubKing, SpadeTen, SpadeTen, SpadeKing, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondTen, ClubTen, ClubKing, ClubNine, SpadeAce]), FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondAce, DiamondNine, ClubAce, ClubTen, SpadeAce, SpadeKing, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, SpadeQueen, SpadeJack, HeartJack, DiamondAce, ClubAce, ClubNine, SpadeNine, HeartAce, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardHeartTen);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Wedding), phase: FdoPhase::Announcement, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: Some(FdoPlayer::RIGHT), tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondKing), Some(DiamondNine), Some(DiamondJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondKing), Some(HeartTen), None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Wedding)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [16, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![ClubQueen, ClubQueen, SpadeQueen, SpadeJack, HeartJack, DiamondAce, ClubAce, ClubNine, SpadeNine, HeartAce, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Wedding)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, DiamondTen, ClubKing, SpadeTen, SpadeTen, SpadeKing, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondTen, ClubTen, ClubKing, ClubNine, SpadeAce]), FdoHand::from_vec(vec![SpadeQueen, DiamondAce, DiamondNine, ClubAce, ClubTen, SpadeAce, SpadeKing, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, SpadeQueen, SpadeJack, HeartJack, DiamondAce, ClubAce, ClubNine, SpadeNine, HeartAce, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Wedding), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondAce, CardHeartJack, CardClubQueen, CardSpadeJack, CardSpadeQueen]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: Some(FdoPlayer::RIGHT), tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondKing), Some(DiamondNine), Some(DiamondJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondKing), Some(HeartTen), None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Wedding)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [16, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![ClubQueen, ClubQueen, SpadeQueen, SpadeJack, HeartJack, DiamondAce, ClubAce, ClubNine, SpadeNine, HeartAce, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Wedding)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, DiamondTen, ClubKing, SpadeTen, SpadeTen, SpadeKing, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondTen, ClubTen, ClubKing, ClubNine, SpadeAce]), FdoHand::from_vec(vec![SpadeQueen, DiamondAce, DiamondNine, ClubAce, ClubTen, SpadeAce, SpadeKing, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, SpadeQueen, SpadeJack, HeartJack, DiamondAce, ClubAce, ClubNine, SpadeNine, HeartAce, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardHeartJack);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Wedding), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondNine, CardDiamondAce, CardHeartKing, CardHeartAce, CardClubTen, CardClubAce, CardSpadeNine, CardSpadeQueen, CardSpadeKing, CardSpadeAce]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: Some(FdoPlayer::RIGHT), tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondKing), Some(DiamondNine), Some(DiamondJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondKing), Some(HeartTen), Some(HeartJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartTen) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::TOP, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Wedding)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [16, 0, 18, 0], observing_player_hand: FdoHand::from_vec(vec![SpadeQueen, DiamondAce, DiamondNine, ClubAce, ClubTen, SpadeAce, SpadeKing, SpadeNine, HeartAce, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Wedding)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, DiamondTen, ClubKing, SpadeTen, SpadeTen, SpadeKing, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondTen, ClubTen, ClubKing, ClubNine, SpadeAce]), FdoHand::from_vec(vec![SpadeQueen, DiamondAce, DiamondNine, ClubAce, ClubTen, SpadeAce, SpadeKing, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, SpadeQueen, SpadeJack, DiamondAce, ClubAce, ClubNine, SpadeNine, HeartAce, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardClubAce);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Wedding), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardClubNine, CardClubAce]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: Some(FdoPlayer::RIGHT), tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondKing), Some(DiamondNine), Some(DiamondJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondKing), Some(HeartTen), Some(HeartJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(ClubAce), None, None, None], start_player: FdoPlayer::TOP, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Wedding)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [16, 0, 18, 0], observing_player_hand: FdoHand::from_vec(vec![ClubQueen, ClubQueen, SpadeQueen, SpadeJack, DiamondAce, ClubAce, ClubNine, SpadeNine, HeartAce, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Wedding)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, DiamondTen, ClubKing, SpadeTen, SpadeTen, SpadeKing, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondTen, ClubTen, ClubKing, ClubNine, SpadeAce]), FdoHand::from_vec(vec![SpadeQueen, DiamondAce, DiamondNine, ClubTen, SpadeAce, SpadeKing, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, SpadeQueen, SpadeJack, DiamondAce, ClubAce, ClubNine, SpadeNine, HeartAce, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardClubNine);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Wedding), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardClubKing]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: Some(FdoPlayer::RIGHT), tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondKing), Some(DiamondNine), Some(DiamondJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondKing), Some(HeartTen), Some(HeartJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(ClubAce), Some(ClubNine), None, None], start_player: FdoPlayer::TOP, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Wedding)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [16, 0, 18, 0], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, DiamondTen, ClubKing, SpadeTen, SpadeTen, SpadeKing, HeartKing, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Wedding)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, DiamondTen, ClubKing, SpadeTen, SpadeTen, SpadeKing, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondTen, ClubTen, ClubKing, ClubNine, SpadeAce]), FdoHand::from_vec(vec![SpadeQueen, DiamondAce, DiamondNine, ClubTen, SpadeAce, SpadeKing, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, SpadeQueen, SpadeJack, DiamondAce, ClubAce, SpadeNine, HeartAce, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardClubKing);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Wedding), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardClubNine, CardClubTen, CardClubKing]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: Some(FdoPlayer::RIGHT), tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondKing), Some(DiamondNine), Some(DiamondJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondKing), Some(HeartTen), Some(HeartJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(ClubAce), Some(ClubNine), Some(ClubKing), None], start_player: FdoPlayer::TOP, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Wedding)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [16, 0, 18, 0], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondTen, ClubTen, ClubKing, ClubNine, SpadeAce]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Wedding)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, DiamondTen, SpadeTen, SpadeTen, SpadeKing, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondTen, ClubTen, ClubKing, ClubNine, SpadeAce]), FdoHand::from_vec(vec![SpadeQueen, DiamondAce, DiamondNine, ClubTen, SpadeAce, SpadeKing, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, SpadeQueen, SpadeJack, DiamondAce, ClubAce, SpadeNine, HeartAce, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardClubTen);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Wedding), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondNine, CardDiamondAce, CardHeartKing, CardHeartAce, CardClubTen, CardSpadeNine, CardSpadeQueen, CardSpadeKing, CardSpadeAce]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: Some(FdoPlayer::RIGHT), tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondKing), Some(DiamondNine), Some(DiamondJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondKing), Some(HeartTen), Some(HeartJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(ClubAce), Some(ClubNine), Some(ClubKing), Some(ClubTen)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(ClubAce) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::TOP, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Wedding)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [16, 0, 43, 0], observing_player_hand: FdoHand::from_vec(vec![SpadeQueen, DiamondAce, DiamondNine, ClubTen, SpadeAce, SpadeKing, SpadeNine, HeartAce, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Wedding)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, DiamondTen, SpadeTen, SpadeTen, SpadeKing, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondTen, ClubKing, ClubNine, SpadeAce]), FdoHand::from_vec(vec![SpadeQueen, DiamondAce, DiamondNine, ClubTen, SpadeAce, SpadeKing, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, SpadeQueen, SpadeJack, DiamondAce, ClubAce, SpadeNine, HeartAce, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardSpadeAce);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Wedding), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardSpadeNine]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: Some(FdoPlayer::RIGHT), tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondKing), Some(DiamondNine), Some(DiamondJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondKing), Some(HeartTen), Some(HeartJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(ClubAce), Some(ClubNine), Some(ClubKing), Some(ClubTen)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(ClubAce) }, FdoTrick { cards: [Some(SpadeAce), None, None, None], start_player: FdoPlayer::TOP, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Wedding)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [16, 0, 43, 0], observing_player_hand: FdoHand::from_vec(vec![ClubQueen, ClubQueen, SpadeQueen, SpadeJack, DiamondAce, ClubAce, SpadeNine, HeartAce, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Wedding)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, DiamondTen, SpadeTen, SpadeTen, SpadeKing, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondTen, ClubKing, ClubNine, SpadeAce]), FdoHand::from_vec(vec![SpadeQueen, DiamondAce, DiamondNine, ClubTen, SpadeKing, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, SpadeQueen, SpadeJack, DiamondAce, ClubAce, SpadeNine, HeartAce, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardSpadeNine);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Wedding), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardSpadeTen, CardSpadeKing]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: Some(FdoPlayer::RIGHT), tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondKing), Some(DiamondNine), Some(DiamondJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondKing), Some(HeartTen), Some(HeartJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(ClubAce), Some(ClubNine), Some(ClubKing), Some(ClubTen)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(ClubAce) }, FdoTrick { cards: [Some(SpadeAce), Some(SpadeNine), None, None], start_player: FdoPlayer::TOP, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Wedding)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [16, 0, 43, 0], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, DiamondTen, SpadeTen, SpadeTen, SpadeKing, HeartKing, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Wedding)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, DiamondTen, SpadeTen, SpadeTen, SpadeKing, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondTen, ClubKing, ClubNine, SpadeAce]), FdoHand::from_vec(vec![SpadeQueen, DiamondAce, DiamondNine, ClubTen, SpadeKing, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, SpadeQueen, SpadeJack, DiamondAce, ClubAce, HeartAce, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardSpadeKing);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Wedding), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardSpadeAce]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: Some(FdoPlayer::RIGHT), tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondKing), Some(DiamondNine), Some(DiamondJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondKing), Some(HeartTen), Some(HeartJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(ClubAce), Some(ClubNine), Some(ClubKing), Some(ClubTen)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(ClubAce) }, FdoTrick { cards: [Some(SpadeAce), Some(SpadeNine), Some(SpadeKing), None], start_player: FdoPlayer::TOP, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Wedding)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [16, 0, 43, 0], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondTen, ClubKing, ClubNine, SpadeAce]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Wedding)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, DiamondTen, SpadeTen, SpadeTen, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondTen, ClubKing, ClubNine, SpadeAce]), FdoHand::from_vec(vec![SpadeQueen, DiamondAce, DiamondNine, ClubTen, SpadeKing, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, SpadeQueen, SpadeJack, DiamondAce, ClubAce, HeartAce, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardSpadeAce);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Wedding), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondNine, CardDiamondAce, CardHeartKing, CardHeartAce, CardClubTen, CardSpadeNine, CardSpadeQueen, CardSpadeKing]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: Some(FdoPlayer::RIGHT), tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondKing), Some(DiamondNine), Some(DiamondJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondKing), Some(HeartTen), Some(HeartJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(ClubAce), Some(ClubNine), Some(ClubKing), Some(ClubTen)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(ClubAce) }, FdoTrick { cards: [Some(SpadeAce), Some(SpadeNine), Some(SpadeKing), Some(SpadeAce)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(SpadeAce) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::TOP, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Wedding)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [16, 0, 69, 0], observing_player_hand: FdoHand::from_vec(vec![SpadeQueen, DiamondAce, DiamondNine, ClubTen, SpadeKing, SpadeNine, HeartAce, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Wedding)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, DiamondTen, SpadeTen, SpadeTen, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondTen, ClubKing, ClubNine]), FdoHand::from_vec(vec![SpadeQueen, DiamondAce, DiamondNine, ClubTen, SpadeKing, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, SpadeQueen, SpadeJack, DiamondAce, ClubAce, HeartAce, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardHeartAce);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Wedding), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardHeartNine, CardHeartAce]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: Some(FdoPlayer::RIGHT), tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondKing), Some(DiamondNine), Some(DiamondJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondKing), Some(HeartTen), Some(HeartJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(ClubAce), Some(ClubNine), Some(ClubKing), Some(ClubTen)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(ClubAce) }, FdoTrick { cards: [Some(SpadeAce), Some(SpadeNine), Some(SpadeKing), Some(SpadeAce)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(SpadeAce) }, FdoTrick { cards: [Some(HeartAce), None, None, None], start_player: FdoPlayer::TOP, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Wedding)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [16, 0, 69, 0], observing_player_hand: FdoHand::from_vec(vec![ClubQueen, ClubQueen, SpadeQueen, SpadeJack, DiamondAce, ClubAce, HeartAce, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Wedding)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, DiamondTen, SpadeTen, SpadeTen, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondTen, ClubKing, ClubNine]), FdoHand::from_vec(vec![SpadeQueen, DiamondAce, DiamondNine, ClubTen, SpadeKing, SpadeNine, HeartKing]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, SpadeQueen, SpadeJack, DiamondAce, ClubAce, HeartAce, HeartNine])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardHeartNine);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Wedding), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardHeartNine, CardHeartKing]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: Some(FdoPlayer::RIGHT), tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondKing), Some(DiamondNine), Some(DiamondJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondKing), Some(HeartTen), Some(HeartJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(ClubAce), Some(ClubNine), Some(ClubKing), Some(ClubTen)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(ClubAce) }, FdoTrick { cards: [Some(SpadeAce), Some(SpadeNine), Some(SpadeKing), Some(SpadeAce)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(SpadeAce) }, FdoTrick { cards: [Some(HeartAce), Some(HeartNine), None, None], start_player: FdoPlayer::TOP, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Wedding)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [16, 0, 69, 0], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, DiamondTen, SpadeTen, SpadeTen, HeartKing, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Wedding)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, DiamondTen, SpadeTen, SpadeTen, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondTen, ClubKing, ClubNine]), FdoHand::from_vec(vec![SpadeQueen, DiamondAce, DiamondNine, ClubTen, SpadeKing, SpadeNine, HeartKing]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, SpadeQueen, SpadeJack, DiamondAce, ClubAce, HeartAce])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardHeartNine);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Wedding), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondTen, CardDiamondQueen, CardHeartJack, CardHeartQueen, CardClubNine, CardClubJack, CardClubKing, CardSpadeJack]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: Some(FdoPlayer::RIGHT), tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondKing), Some(DiamondNine), Some(DiamondJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondKing), Some(HeartTen), Some(HeartJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(ClubAce), Some(ClubNine), Some(ClubKing), Some(ClubTen)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(ClubAce) }, FdoTrick { cards: [Some(SpadeAce), Some(SpadeNine), Some(SpadeKing), Some(SpadeAce)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(SpadeAce) }, FdoTrick { cards: [Some(HeartAce), Some(HeartNine), Some(HeartNine), None], start_player: FdoPlayer::TOP, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Wedding)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [16, 0, 69, 0], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondTen, ClubKing, ClubNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Wedding)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, DiamondTen, SpadeTen, SpadeTen, HeartKing]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondTen, ClubKing, ClubNine]), FdoHand::from_vec(vec![SpadeQueen, DiamondAce, DiamondNine, ClubTen, SpadeKing, SpadeNine, HeartKing]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, SpadeQueen, SpadeJack, DiamondAce, ClubAce, HeartAce])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardClubKing);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Wedding), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondNine, CardDiamondAce, CardHeartKing, CardClubTen, CardSpadeNine, CardSpadeQueen, CardSpadeKing]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: Some(FdoPlayer::RIGHT), tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondKing), Some(DiamondNine), Some(DiamondJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondKing), Some(HeartTen), Some(HeartJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(ClubAce), Some(ClubNine), Some(ClubKing), Some(ClubTen)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(ClubAce) }, FdoTrick { cards: [Some(SpadeAce), Some(SpadeNine), Some(SpadeKing), Some(SpadeAce)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(SpadeAce) }, FdoTrick { cards: [Some(HeartAce), Some(HeartNine), Some(HeartNine), Some(ClubKing)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartAce) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::TOP, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Wedding)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [16, 0, 84, 0], observing_player_hand: FdoHand::from_vec(vec![SpadeQueen, DiamondAce, DiamondNine, ClubTen, SpadeKing, SpadeNine, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Wedding)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, DiamondTen, SpadeTen, SpadeTen, HeartKing]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondTen, ClubNine]), FdoHand::from_vec(vec![SpadeQueen, DiamondAce, DiamondNine, ClubTen, SpadeKing, SpadeNine, HeartKing]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, SpadeQueen, SpadeJack, DiamondAce, ClubAce, HeartAce])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardHeartKing);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Wedding), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardHeartAce]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: Some(FdoPlayer::RIGHT), tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondKing), Some(DiamondNine), Some(DiamondJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondKing), Some(HeartTen), Some(HeartJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(ClubAce), Some(ClubNine), Some(ClubKing), Some(ClubTen)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(ClubAce) }, FdoTrick { cards: [Some(SpadeAce), Some(SpadeNine), Some(SpadeKing), Some(SpadeAce)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(SpadeAce) }, FdoTrick { cards: [Some(HeartAce), Some(HeartNine), Some(HeartNine), Some(ClubKing)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(HeartKing), None, None, None], start_player: FdoPlayer::TOP, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Wedding)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [16, 0, 84, 0], observing_player_hand: FdoHand::from_vec(vec![ClubQueen, ClubQueen, SpadeQueen, SpadeJack, DiamondAce, ClubAce, HeartAce]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Wedding)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, DiamondTen, SpadeTen, SpadeTen, HeartKing]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondTen, ClubNine]), FdoHand::from_vec(vec![SpadeQueen, DiamondAce, DiamondNine, ClubTen, SpadeKing, SpadeNine]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, SpadeQueen, SpadeJack, DiamondAce, ClubAce, HeartAce])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardHeartAce);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Wedding), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardHeartKing]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: Some(FdoPlayer::RIGHT), tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondKing), Some(DiamondNine), Some(DiamondJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondKing), Some(HeartTen), Some(HeartJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(ClubAce), Some(ClubNine), Some(ClubKing), Some(ClubTen)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(ClubAce) }, FdoTrick { cards: [Some(SpadeAce), Some(SpadeNine), Some(SpadeKing), Some(SpadeAce)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(SpadeAce) }, FdoTrick { cards: [Some(HeartAce), Some(HeartNine), Some(HeartNine), Some(ClubKing)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(HeartKing), Some(HeartAce), None, None], start_player: FdoPlayer::TOP, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Wedding)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [16, 0, 84, 0], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, DiamondTen, SpadeTen, SpadeTen, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Wedding)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, DiamondTen, SpadeTen, SpadeTen, HeartKing]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondTen, ClubNine]), FdoHand::from_vec(vec![SpadeQueen, DiamondAce, DiamondNine, ClubTen, SpadeKing, SpadeNine]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, SpadeQueen, SpadeJack, DiamondAce, ClubAce])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardHeartKing);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Wedding), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondTen, CardDiamondQueen, CardHeartJack, CardHeartQueen, CardClubNine, CardClubJack, CardSpadeJack]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: Some(FdoPlayer::RIGHT), tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondKing), Some(DiamondNine), Some(DiamondJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondKing), Some(HeartTen), Some(HeartJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(ClubAce), Some(ClubNine), Some(ClubKing), Some(ClubTen)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(ClubAce) }, FdoTrick { cards: [Some(SpadeAce), Some(SpadeNine), Some(SpadeKing), Some(SpadeAce)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(SpadeAce) }, FdoTrick { cards: [Some(HeartAce), Some(HeartNine), Some(HeartNine), Some(ClubKing)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(HeartKing), Some(HeartAce), Some(HeartKing), None], start_player: FdoPlayer::TOP, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Wedding)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [16, 0, 84, 0], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondTen, ClubNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Wedding)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, DiamondTen, SpadeTen, SpadeTen]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondTen, ClubNine]), FdoHand::from_vec(vec![SpadeQueen, DiamondAce, DiamondNine, ClubTen, SpadeKing, SpadeNine]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, SpadeQueen, SpadeJack, DiamondAce, ClubAce])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardDiamondTen);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Wedding), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondQueen, CardHeartJack, CardHeartQueen, CardClubNine, CardClubJack, CardSpadeJack]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: Some(FdoPlayer::RIGHT), tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondKing), Some(DiamondNine), Some(DiamondJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondKing), Some(HeartTen), Some(HeartJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(ClubAce), Some(ClubNine), Some(ClubKing), Some(ClubTen)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(ClubAce) }, FdoTrick { cards: [Some(SpadeAce), Some(SpadeNine), Some(SpadeKing), Some(SpadeAce)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(SpadeAce) }, FdoTrick { cards: [Some(HeartAce), Some(HeartNine), Some(HeartNine), Some(ClubKing)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(HeartKing), Some(HeartAce), Some(HeartKing), Some(DiamondTen)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(DiamondTen) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Wedding)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [16, 29, 84, 0], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, ClubNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Wedding)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, DiamondTen, SpadeTen, SpadeTen]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, ClubNine]), FdoHand::from_vec(vec![SpadeQueen, DiamondAce, DiamondNine, ClubTen, SpadeKing, SpadeNine]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, SpadeQueen, SpadeJack, DiamondAce, ClubAce])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardClubNine);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Wedding), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardClubTen]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: Some(FdoPlayer::RIGHT), tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondKing), Some(DiamondNine), Some(DiamondJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondKing), Some(HeartTen), Some(HeartJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(ClubAce), Some(ClubNine), Some(ClubKing), Some(ClubTen)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(ClubAce) }, FdoTrick { cards: [Some(SpadeAce), Some(SpadeNine), Some(SpadeKing), Some(SpadeAce)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(SpadeAce) }, FdoTrick { cards: [Some(HeartAce), Some(HeartNine), Some(HeartNine), Some(ClubKing)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(HeartKing), Some(HeartAce), Some(HeartKing), Some(DiamondTen)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(DiamondTen) }, FdoTrick { cards: [Some(ClubNine), None, None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Wedding)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [16, 29, 84, 0], observing_player_hand: FdoHand::from_vec(vec![SpadeQueen, DiamondAce, DiamondNine, ClubTen, SpadeKing, SpadeNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Wedding)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, DiamondTen, SpadeTen, SpadeTen]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack]), FdoHand::from_vec(vec![SpadeQueen, DiamondAce, DiamondNine, ClubTen, SpadeKing, SpadeNine]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, SpadeQueen, SpadeJack, DiamondAce, ClubAce])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardClubTen);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Wedding), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardClubAce]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: Some(FdoPlayer::RIGHT), tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondKing), Some(DiamondNine), Some(DiamondJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondKing), Some(HeartTen), Some(HeartJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(ClubAce), Some(ClubNine), Some(ClubKing), Some(ClubTen)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(ClubAce) }, FdoTrick { cards: [Some(SpadeAce), Some(SpadeNine), Some(SpadeKing), Some(SpadeAce)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(SpadeAce) }, FdoTrick { cards: [Some(HeartAce), Some(HeartNine), Some(HeartNine), Some(ClubKing)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(HeartKing), Some(HeartAce), Some(HeartKing), Some(DiamondTen)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(DiamondTen) }, FdoTrick { cards: [Some(ClubNine), Some(ClubTen), None, None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Wedding)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [16, 29, 84, 0], observing_player_hand: FdoHand::from_vec(vec![ClubQueen, ClubQueen, SpadeQueen, SpadeJack, DiamondAce, ClubAce]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Wedding)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, DiamondTen, SpadeTen, SpadeTen]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack]), FdoHand::from_vec(vec![SpadeQueen, DiamondAce, DiamondNine, SpadeKing, SpadeNine]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, SpadeQueen, SpadeJack, DiamondAce, ClubAce])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardClubAce);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Wedding), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondTen, CardDiamondQueen, CardHeartQueen, CardClubJack, CardSpadeTen]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: Some(FdoPlayer::RIGHT), tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondKing), Some(DiamondNine), Some(DiamondJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondKing), Some(HeartTen), Some(HeartJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(ClubAce), Some(ClubNine), Some(ClubKing), Some(ClubTen)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(ClubAce) }, FdoTrick { cards: [Some(SpadeAce), Some(SpadeNine), Some(SpadeKing), Some(SpadeAce)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(SpadeAce) }, FdoTrick { cards: [Some(HeartAce), Some(HeartNine), Some(HeartNine), Some(ClubKing)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(HeartKing), Some(HeartAce), Some(HeartKing), Some(DiamondTen)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(DiamondTen) }, FdoTrick { cards: [Some(ClubNine), Some(ClubTen), Some(ClubAce), None], start_player: FdoPlayer::LEFT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Wedding)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [16, 29, 84, 0], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, DiamondTen, SpadeTen, SpadeTen]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Wedding)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, DiamondTen, SpadeTen, SpadeTen]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack]), FdoHand::from_vec(vec![SpadeQueen, DiamondAce, DiamondNine, SpadeKing, SpadeNine]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, SpadeQueen, SpadeJack, DiamondAce])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardSpadeTen);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Wedding), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondAce, CardClubQueen, CardSpadeJack, CardSpadeQueen]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: Some(FdoPlayer::RIGHT), tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondKing), Some(DiamondNine), Some(DiamondJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondKing), Some(HeartTen), Some(HeartJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(ClubAce), Some(ClubNine), Some(ClubKing), Some(ClubTen)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(ClubAce) }, FdoTrick { cards: [Some(SpadeAce), Some(SpadeNine), Some(SpadeKing), Some(SpadeAce)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(SpadeAce) }, FdoTrick { cards: [Some(HeartAce), Some(HeartNine), Some(HeartNine), Some(ClubKing)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(HeartKing), Some(HeartAce), Some(HeartKing), Some(DiamondTen)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(DiamondTen) }, FdoTrick { cards: [Some(ClubNine), Some(ClubTen), Some(ClubAce), Some(SpadeTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(ClubAce) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Wedding)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [16, 29, 84, 31], observing_player_hand: FdoHand::from_vec(vec![ClubQueen, ClubQueen, SpadeQueen, SpadeJack, DiamondAce]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Wedding)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, DiamondTen, SpadeTen]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack]), FdoHand::from_vec(vec![SpadeQueen, DiamondAce, DiamondNine, SpadeKing, SpadeNine]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, SpadeQueen, SpadeJack, DiamondAce])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardSpadeJack);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Wedding), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondTen, CardDiamondQueen, CardHeartQueen, CardClubJack]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: Some(FdoPlayer::RIGHT), tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondKing), Some(DiamondNine), Some(DiamondJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondKing), Some(HeartTen), Some(HeartJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(ClubAce), Some(ClubNine), Some(ClubKing), Some(ClubTen)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(ClubAce) }, FdoTrick { cards: [Some(SpadeAce), Some(SpadeNine), Some(SpadeKing), Some(SpadeAce)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(SpadeAce) }, FdoTrick { cards: [Some(HeartAce), Some(HeartNine), Some(HeartNine), Some(ClubKing)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(HeartKing), Some(HeartAce), Some(HeartKing), Some(DiamondTen)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(DiamondTen) }, FdoTrick { cards: [Some(ClubNine), Some(ClubTen), Some(ClubAce), Some(SpadeTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(ClubAce) }, FdoTrick { cards: [Some(SpadeJack), None, None, None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Wedding)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [16, 29, 84, 31], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, DiamondTen, SpadeTen]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Wedding)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, DiamondTen, SpadeTen]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack]), FdoHand::from_vec(vec![SpadeQueen, DiamondAce, DiamondNine, SpadeKing, SpadeNine]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, SpadeQueen, DiamondAce])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardHeartQueen);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Wedding), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondQueen, CardHeartJack, CardHeartQueen, CardClubJack, CardSpadeJack]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: Some(FdoPlayer::RIGHT), tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondKing), Some(DiamondNine), Some(DiamondJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondKing), Some(HeartTen), Some(HeartJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(ClubAce), Some(ClubNine), Some(ClubKing), Some(ClubTen)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(ClubAce) }, FdoTrick { cards: [Some(SpadeAce), Some(SpadeNine), Some(SpadeKing), Some(SpadeAce)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(SpadeAce) }, FdoTrick { cards: [Some(HeartAce), Some(HeartNine), Some(HeartNine), Some(ClubKing)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(HeartKing), Some(HeartAce), Some(HeartKing), Some(DiamondTen)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(DiamondTen) }, FdoTrick { cards: [Some(ClubNine), Some(ClubTen), Some(ClubAce), Some(SpadeTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(ClubAce) }, FdoTrick { cards: [Some(SpadeJack), Some(HeartQueen), None, None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Wedding)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [16, 29, 84, 31], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Wedding)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![DiamondQueen, ClubJack, DiamondTen, SpadeTen]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack]), FdoHand::from_vec(vec![SpadeQueen, DiamondAce, DiamondNine, SpadeKing, SpadeNine]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, SpadeQueen, DiamondAce])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardHeartJack);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Wedding), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondNine, CardDiamondAce, CardSpadeQueen]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: Some(FdoPlayer::RIGHT), tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondKing), Some(DiamondNine), Some(DiamondJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondKing), Some(HeartTen), Some(HeartJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(ClubAce), Some(ClubNine), Some(ClubKing), Some(ClubTen)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(ClubAce) }, FdoTrick { cards: [Some(SpadeAce), Some(SpadeNine), Some(SpadeKing), Some(SpadeAce)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(SpadeAce) }, FdoTrick { cards: [Some(HeartAce), Some(HeartNine), Some(HeartNine), Some(ClubKing)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(HeartKing), Some(HeartAce), Some(HeartKing), Some(DiamondTen)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(DiamondTen) }, FdoTrick { cards: [Some(ClubNine), Some(ClubTen), Some(ClubAce), Some(SpadeTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(ClubAce) }, FdoTrick { cards: [Some(SpadeJack), Some(HeartQueen), Some(HeartJack), None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Wedding)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [16, 29, 84, 31], observing_player_hand: FdoHand::from_vec(vec![SpadeQueen, DiamondAce, DiamondNine, SpadeKing, SpadeNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Wedding)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![DiamondQueen, ClubJack, DiamondTen, SpadeTen]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, SpadeJack]), FdoHand::from_vec(vec![SpadeQueen, DiamondAce, DiamondNine, SpadeKing, SpadeNine]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, SpadeQueen, DiamondAce])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardSpadeQueen);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Wedding), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondNine, CardDiamondAce, CardSpadeNine, CardSpadeKing]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: Some(FdoPlayer::RIGHT), tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondKing), Some(DiamondNine), Some(DiamondJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondKing), Some(HeartTen), Some(HeartJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(ClubAce), Some(ClubNine), Some(ClubKing), Some(ClubTen)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(ClubAce) }, FdoTrick { cards: [Some(SpadeAce), Some(SpadeNine), Some(SpadeKing), Some(SpadeAce)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(SpadeAce) }, FdoTrick { cards: [Some(HeartAce), Some(HeartNine), Some(HeartNine), Some(ClubKing)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(HeartKing), Some(HeartAce), Some(HeartKing), Some(DiamondTen)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(DiamondTen) }, FdoTrick { cards: [Some(ClubNine), Some(ClubTen), Some(ClubAce), Some(SpadeTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(ClubAce) }, FdoTrick { cards: [Some(SpadeJack), Some(HeartQueen), Some(HeartJack), Some(SpadeQueen)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::TOP), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::TOP, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Wedding)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [16, 29, 94, 31], observing_player_hand: FdoHand::from_vec(vec![DiamondAce, DiamondNine, SpadeKing, SpadeNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Wedding)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![DiamondQueen, ClubJack, DiamondTen, SpadeTen]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, SpadeJack]), FdoHand::from_vec(vec![DiamondAce, DiamondNine, SpadeKing, SpadeNine]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, SpadeQueen, DiamondAce])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardSpadeKing);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Wedding), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondAce, CardClubQueen, CardSpadeQueen]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: Some(FdoPlayer::RIGHT), tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondKing), Some(DiamondNine), Some(DiamondJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondKing), Some(HeartTen), Some(HeartJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(ClubAce), Some(ClubNine), Some(ClubKing), Some(ClubTen)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(ClubAce) }, FdoTrick { cards: [Some(SpadeAce), Some(SpadeNine), Some(SpadeKing), Some(SpadeAce)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(SpadeAce) }, FdoTrick { cards: [Some(HeartAce), Some(HeartNine), Some(HeartNine), Some(ClubKing)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(HeartKing), Some(HeartAce), Some(HeartKing), Some(DiamondTen)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(DiamondTen) }, FdoTrick { cards: [Some(ClubNine), Some(ClubTen), Some(ClubAce), Some(SpadeTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(ClubAce) }, FdoTrick { cards: [Some(SpadeJack), Some(HeartQueen), Some(HeartJack), Some(SpadeQueen)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::TOP), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(SpadeKing), None, None, None], start_player: FdoPlayer::TOP, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Wedding)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [16, 29, 94, 31], observing_player_hand: FdoHand::from_vec(vec![ClubQueen, ClubQueen, SpadeQueen, DiamondAce]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Wedding)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![DiamondQueen, ClubJack, DiamondTen, SpadeTen]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, SpadeJack]), FdoHand::from_vec(vec![DiamondAce, DiamondNine, SpadeNine]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, SpadeQueen, DiamondAce])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardSpadeQueen);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Wedding), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardSpadeTen]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: Some(FdoPlayer::RIGHT), tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondKing), Some(DiamondNine), Some(DiamondJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondKing), Some(HeartTen), Some(HeartJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(ClubAce), Some(ClubNine), Some(ClubKing), Some(ClubTen)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(ClubAce) }, FdoTrick { cards: [Some(SpadeAce), Some(SpadeNine), Some(SpadeKing), Some(SpadeAce)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(SpadeAce) }, FdoTrick { cards: [Some(HeartAce), Some(HeartNine), Some(HeartNine), Some(ClubKing)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(HeartKing), Some(HeartAce), Some(HeartKing), Some(DiamondTen)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(DiamondTen) }, FdoTrick { cards: [Some(ClubNine), Some(ClubTen), Some(ClubAce), Some(SpadeTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(ClubAce) }, FdoTrick { cards: [Some(SpadeJack), Some(HeartQueen), Some(HeartJack), Some(SpadeQueen)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::TOP), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(SpadeKing), Some(SpadeQueen), None, None], start_player: FdoPlayer::TOP, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Wedding)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [16, 29, 94, 31], observing_player_hand: FdoHand::from_vec(vec![DiamondQueen, ClubJack, DiamondTen, SpadeTen]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Wedding)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![DiamondQueen, ClubJack, DiamondTen, SpadeTen]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, SpadeJack]), FdoHand::from_vec(vec![DiamondAce, DiamondNine, SpadeNine]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, DiamondAce])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardSpadeTen);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Wedding), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondQueen, CardHeartQueen, CardClubJack, CardSpadeJack]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: Some(FdoPlayer::RIGHT), tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondKing), Some(DiamondNine), Some(DiamondJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondKing), Some(HeartTen), Some(HeartJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(ClubAce), Some(ClubNine), Some(ClubKing), Some(ClubTen)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(ClubAce) }, FdoTrick { cards: [Some(SpadeAce), Some(SpadeNine), Some(SpadeKing), Some(SpadeAce)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(SpadeAce) }, FdoTrick { cards: [Some(HeartAce), Some(HeartNine), Some(HeartNine), Some(ClubKing)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(HeartKing), Some(HeartAce), Some(HeartKing), Some(DiamondTen)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(DiamondTen) }, FdoTrick { cards: [Some(ClubNine), Some(ClubTen), Some(ClubAce), Some(SpadeTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(ClubAce) }, FdoTrick { cards: [Some(SpadeJack), Some(HeartQueen), Some(HeartJack), Some(SpadeQueen)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::TOP), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(SpadeKing), Some(SpadeQueen), Some(SpadeTen), None], start_player: FdoPlayer::TOP, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Wedding)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [16, 29, 94, 31], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, SpadeJack]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Wedding)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![DiamondQueen, ClubJack, DiamondTen]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack, SpadeJack]), FdoHand::from_vec(vec![DiamondAce, DiamondNine, SpadeNine]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, DiamondAce])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardSpadeJack);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Wedding), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondAce, CardClubQueen]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: Some(FdoPlayer::RIGHT), tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondKing), Some(DiamondNine), Some(DiamondJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondKing), Some(HeartTen), Some(HeartJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(ClubAce), Some(ClubNine), Some(ClubKing), Some(ClubTen)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(ClubAce) }, FdoTrick { cards: [Some(SpadeAce), Some(SpadeNine), Some(SpadeKing), Some(SpadeAce)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(SpadeAce) }, FdoTrick { cards: [Some(HeartAce), Some(HeartNine), Some(HeartNine), Some(ClubKing)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(HeartKing), Some(HeartAce), Some(HeartKing), Some(DiamondTen)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(DiamondTen) }, FdoTrick { cards: [Some(ClubNine), Some(ClubTen), Some(ClubAce), Some(SpadeTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(ClubAce) }, FdoTrick { cards: [Some(SpadeJack), Some(HeartQueen), Some(HeartJack), Some(SpadeQueen)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::TOP), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(SpadeKing), Some(SpadeQueen), Some(SpadeTen), Some(SpadeJack)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Wedding)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [16, 29, 94, 50], observing_player_hand: FdoHand::from_vec(vec![ClubQueen, ClubQueen, DiamondAce]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Wedding)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![DiamondQueen, ClubJack, DiamondTen]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack]), FdoHand::from_vec(vec![DiamondAce, DiamondNine, SpadeNine]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, DiamondAce])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardClubQueen);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Wedding), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondTen, CardDiamondQueen, CardClubJack]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: Some(FdoPlayer::RIGHT), tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondKing), Some(DiamondNine), Some(DiamondJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondKing), Some(HeartTen), Some(HeartJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(ClubAce), Some(ClubNine), Some(ClubKing), Some(ClubTen)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(ClubAce) }, FdoTrick { cards: [Some(SpadeAce), Some(SpadeNine), Some(SpadeKing), Some(SpadeAce)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(SpadeAce) }, FdoTrick { cards: [Some(HeartAce), Some(HeartNine), Some(HeartNine), Some(ClubKing)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(HeartKing), Some(HeartAce), Some(HeartKing), Some(DiamondTen)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(DiamondTen) }, FdoTrick { cards: [Some(ClubNine), Some(ClubTen), Some(ClubAce), Some(SpadeTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(ClubAce) }, FdoTrick { cards: [Some(SpadeJack), Some(HeartQueen), Some(HeartJack), Some(SpadeQueen)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::TOP), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(SpadeKing), Some(SpadeQueen), Some(SpadeTen), Some(SpadeJack)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), None, None, None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Wedding)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [16, 29, 94, 50], observing_player_hand: FdoHand::from_vec(vec![DiamondQueen, ClubJack, DiamondTen]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Wedding)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![DiamondQueen, ClubJack, DiamondTen]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack]), FdoHand::from_vec(vec![DiamondAce, DiamondNine, SpadeNine]), FdoHand::from_vec(vec![ClubQueen, DiamondAce])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardDiamondTen);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Wedding), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondQueen, CardHeartQueen, CardClubJack]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: Some(FdoPlayer::RIGHT), tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondKing), Some(DiamondNine), Some(DiamondJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondKing), Some(HeartTen), Some(HeartJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(ClubAce), Some(ClubNine), Some(ClubKing), Some(ClubTen)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(ClubAce) }, FdoTrick { cards: [Some(SpadeAce), Some(SpadeNine), Some(SpadeKing), Some(SpadeAce)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(SpadeAce) }, FdoTrick { cards: [Some(HeartAce), Some(HeartNine), Some(HeartNine), Some(ClubKing)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(HeartKing), Some(HeartAce), Some(HeartKing), Some(DiamondTen)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(DiamondTen) }, FdoTrick { cards: [Some(ClubNine), Some(ClubTen), Some(ClubAce), Some(SpadeTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(ClubAce) }, FdoTrick { cards: [Some(SpadeJack), Some(HeartQueen), Some(HeartJack), Some(SpadeQueen)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::TOP), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(SpadeKing), Some(SpadeQueen), Some(SpadeTen), Some(SpadeJack)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(DiamondTen), None, None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Wedding)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [16, 29, 94, 50], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Wedding)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![DiamondQueen, ClubJack]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen, ClubJack]), FdoHand::from_vec(vec![DiamondAce, DiamondNine, SpadeNine]), FdoHand::from_vec(vec![ClubQueen, DiamondAce])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardClubJack);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Wedding), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondNine, CardDiamondAce]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: Some(FdoPlayer::RIGHT), tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondKing), Some(DiamondNine), Some(DiamondJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondKing), Some(HeartTen), Some(HeartJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(ClubAce), Some(ClubNine), Some(ClubKing), Some(ClubTen)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(ClubAce) }, FdoTrick { cards: [Some(SpadeAce), Some(SpadeNine), Some(SpadeKing), Some(SpadeAce)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(SpadeAce) }, FdoTrick { cards: [Some(HeartAce), Some(HeartNine), Some(HeartNine), Some(ClubKing)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(HeartKing), Some(HeartAce), Some(HeartKing), Some(DiamondTen)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(DiamondTen) }, FdoTrick { cards: [Some(ClubNine), Some(ClubTen), Some(ClubAce), Some(SpadeTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(ClubAce) }, FdoTrick { cards: [Some(SpadeJack), Some(HeartQueen), Some(HeartJack), Some(SpadeQueen)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::TOP), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(SpadeKing), Some(SpadeQueen), Some(SpadeTen), Some(SpadeJack)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(DiamondTen), Some(ClubJack), None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Wedding)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [16, 29, 94, 50], observing_player_hand: FdoHand::from_vec(vec![DiamondAce, DiamondNine, SpadeNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Wedding)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![DiamondQueen, ClubJack]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen]), FdoHand::from_vec(vec![DiamondAce, DiamondNine, SpadeNine]), FdoHand::from_vec(vec![ClubQueen, DiamondAce])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardDiamondNine);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Wedding), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondAce, CardClubQueen]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: Some(FdoPlayer::RIGHT), tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondKing), Some(DiamondNine), Some(DiamondJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondKing), Some(HeartTen), Some(HeartJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(ClubAce), Some(ClubNine), Some(ClubKing), Some(ClubTen)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(ClubAce) }, FdoTrick { cards: [Some(SpadeAce), Some(SpadeNine), Some(SpadeKing), Some(SpadeAce)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(SpadeAce) }, FdoTrick { cards: [Some(HeartAce), Some(HeartNine), Some(HeartNine), Some(ClubKing)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(HeartKing), Some(HeartAce), Some(HeartKing), Some(DiamondTen)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(DiamondTen) }, FdoTrick { cards: [Some(ClubNine), Some(ClubTen), Some(ClubAce), Some(SpadeTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(ClubAce) }, FdoTrick { cards: [Some(SpadeJack), Some(HeartQueen), Some(HeartJack), Some(SpadeQueen)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::TOP), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(SpadeKing), Some(SpadeQueen), Some(SpadeTen), Some(SpadeJack)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(DiamondTen), Some(ClubJack), Some(DiamondNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Wedding)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [16, 29, 94, 65], observing_player_hand: FdoHand::from_vec(vec![ClubQueen, DiamondAce]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Wedding)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![DiamondQueen, ClubJack]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen]), FdoHand::from_vec(vec![DiamondAce, SpadeNine]), FdoHand::from_vec(vec![ClubQueen, DiamondAce])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardClubQueen);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Wedding), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondQueen, CardClubJack]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: Some(FdoPlayer::RIGHT), tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondKing), Some(DiamondNine), Some(DiamondJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondKing), Some(HeartTen), Some(HeartJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(ClubAce), Some(ClubNine), Some(ClubKing), Some(ClubTen)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(ClubAce) }, FdoTrick { cards: [Some(SpadeAce), Some(SpadeNine), Some(SpadeKing), Some(SpadeAce)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(SpadeAce) }, FdoTrick { cards: [Some(HeartAce), Some(HeartNine), Some(HeartNine), Some(ClubKing)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(HeartKing), Some(HeartAce), Some(HeartKing), Some(DiamondTen)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(DiamondTen) }, FdoTrick { cards: [Some(ClubNine), Some(ClubTen), Some(ClubAce), Some(SpadeTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(ClubAce) }, FdoTrick { cards: [Some(SpadeJack), Some(HeartQueen), Some(HeartJack), Some(SpadeQueen)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::TOP), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(SpadeKing), Some(SpadeQueen), Some(SpadeTen), Some(SpadeJack)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(DiamondTen), Some(ClubJack), Some(DiamondNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(ClubQueen), None, None, None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Wedding)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [16, 29, 94, 65], observing_player_hand: FdoHand::from_vec(vec![DiamondQueen, ClubJack]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Wedding)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![DiamondQueen, ClubJack]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen]), FdoHand::from_vec(vec![DiamondAce, SpadeNine]), FdoHand::from_vec(vec![DiamondAce])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardDiamondQueen);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Wedding), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondQueen, CardHeartQueen]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: Some(FdoPlayer::RIGHT), tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondKing), Some(DiamondNine), Some(DiamondJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondKing), Some(HeartTen), Some(HeartJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(ClubAce), Some(ClubNine), Some(ClubKing), Some(ClubTen)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(ClubAce) }, FdoTrick { cards: [Some(SpadeAce), Some(SpadeNine), Some(SpadeKing), Some(SpadeAce)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(SpadeAce) }, FdoTrick { cards: [Some(HeartAce), Some(HeartNine), Some(HeartNine), Some(ClubKing)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(HeartKing), Some(HeartAce), Some(HeartKing), Some(DiamondTen)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(DiamondTen) }, FdoTrick { cards: [Some(ClubNine), Some(ClubTen), Some(ClubAce), Some(SpadeTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(ClubAce) }, FdoTrick { cards: [Some(SpadeJack), Some(HeartQueen), Some(HeartJack), Some(SpadeQueen)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::TOP), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(SpadeKing), Some(SpadeQueen), Some(SpadeTen), Some(SpadeJack)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(DiamondTen), Some(ClubJack), Some(DiamondNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(DiamondQueen), None, None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Wedding)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [16, 29, 94, 65], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, DiamondQueen]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Wedding)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![ClubJack]), FdoHand::from_vec(vec![HeartQueen, DiamondQueen]), FdoHand::from_vec(vec![DiamondAce, SpadeNine]), FdoHand::from_vec(vec![DiamondAce])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardDiamondQueen);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Wedding), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondAce]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: Some(FdoPlayer::RIGHT), tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondKing), Some(DiamondNine), Some(DiamondJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondKing), Some(HeartTen), Some(HeartJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(ClubAce), Some(ClubNine), Some(ClubKing), Some(ClubTen)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(ClubAce) }, FdoTrick { cards: [Some(SpadeAce), Some(SpadeNine), Some(SpadeKing), Some(SpadeAce)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(SpadeAce) }, FdoTrick { cards: [Some(HeartAce), Some(HeartNine), Some(HeartNine), Some(ClubKing)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(HeartKing), Some(HeartAce), Some(HeartKing), Some(DiamondTen)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(DiamondTen) }, FdoTrick { cards: [Some(ClubNine), Some(ClubTen), Some(ClubAce), Some(SpadeTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(ClubAce) }, FdoTrick { cards: [Some(SpadeJack), Some(HeartQueen), Some(HeartJack), Some(SpadeQueen)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::TOP), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(SpadeKing), Some(SpadeQueen), Some(SpadeTen), Some(SpadeJack)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(DiamondTen), Some(ClubJack), Some(DiamondNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(DiamondQueen), Some(DiamondQueen), None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Wedding)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [16, 29, 94, 65], observing_player_hand: FdoHand::from_vec(vec![DiamondAce, SpadeNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Wedding)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![ClubJack]), FdoHand::from_vec(vec![HeartQueen]), FdoHand::from_vec(vec![DiamondAce, SpadeNine]), FdoHand::from_vec(vec![DiamondAce])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardDiamondAce);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Wedding), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondAce]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: Some(FdoPlayer::RIGHT), tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondKing), Some(DiamondNine), Some(DiamondJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondKing), Some(HeartTen), Some(HeartJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(ClubAce), Some(ClubNine), Some(ClubKing), Some(ClubTen)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(ClubAce) }, FdoTrick { cards: [Some(SpadeAce), Some(SpadeNine), Some(SpadeKing), Some(SpadeAce)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(SpadeAce) }, FdoTrick { cards: [Some(HeartAce), Some(HeartNine), Some(HeartNine), Some(ClubKing)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(HeartKing), Some(HeartAce), Some(HeartKing), Some(DiamondTen)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(DiamondTen) }, FdoTrick { cards: [Some(ClubNine), Some(ClubTen), Some(ClubAce), Some(SpadeTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(ClubAce) }, FdoTrick { cards: [Some(SpadeJack), Some(HeartQueen), Some(HeartJack), Some(SpadeQueen)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::TOP), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(SpadeKing), Some(SpadeQueen), Some(SpadeTen), Some(SpadeJack)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(DiamondTen), Some(ClubJack), Some(DiamondNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(DiamondQueen), Some(DiamondQueen), Some(DiamondAce)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Wedding)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [16, 29, 94, 85], observing_player_hand: FdoHand::from_vec(vec![DiamondAce]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Wedding)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![ClubJack]), FdoHand::from_vec(vec![HeartQueen]), FdoHand::from_vec(vec![SpadeNine]), FdoHand::from_vec(vec![DiamondAce])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardDiamondAce);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Wedding), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardClubJack]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: Some(FdoPlayer::RIGHT), tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondKing), Some(DiamondNine), Some(DiamondJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondKing), Some(HeartTen), Some(HeartJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(ClubAce), Some(ClubNine), Some(ClubKing), Some(ClubTen)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(ClubAce) }, FdoTrick { cards: [Some(SpadeAce), Some(SpadeNine), Some(SpadeKing), Some(SpadeAce)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(SpadeAce) }, FdoTrick { cards: [Some(HeartAce), Some(HeartNine), Some(HeartNine), Some(ClubKing)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(HeartKing), Some(HeartAce), Some(HeartKing), Some(DiamondTen)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(DiamondTen) }, FdoTrick { cards: [Some(ClubNine), Some(ClubTen), Some(ClubAce), Some(SpadeTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(ClubAce) }, FdoTrick { cards: [Some(SpadeJack), Some(HeartQueen), Some(HeartJack), Some(SpadeQueen)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::TOP), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(SpadeKing), Some(SpadeQueen), Some(SpadeTen), Some(SpadeJack)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(DiamondTen), Some(ClubJack), Some(DiamondNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(DiamondQueen), Some(DiamondQueen), Some(DiamondAce)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(DiamondAce), None, None, None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Wedding)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [16, 29, 94, 85], observing_player_hand: FdoHand::from_vec(vec![ClubJack]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Wedding)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![ClubJack]), FdoHand::from_vec(vec![HeartQueen]), FdoHand::from_vec(vec![SpadeNine]), FdoHand::from_vec(vec![])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardClubJack);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Wedding), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardHeartQueen]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: Some(FdoPlayer::RIGHT), tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondKing), Some(DiamondNine), Some(DiamondJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondKing), Some(HeartTen), Some(HeartJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(ClubAce), Some(ClubNine), Some(ClubKing), Some(ClubTen)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(ClubAce) }, FdoTrick { cards: [Some(SpadeAce), Some(SpadeNine), Some(SpadeKing), Some(SpadeAce)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(SpadeAce) }, FdoTrick { cards: [Some(HeartAce), Some(HeartNine), Some(HeartNine), Some(ClubKing)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(HeartKing), Some(HeartAce), Some(HeartKing), Some(DiamondTen)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(DiamondTen) }, FdoTrick { cards: [Some(ClubNine), Some(ClubTen), Some(ClubAce), Some(SpadeTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(ClubAce) }, FdoTrick { cards: [Some(SpadeJack), Some(HeartQueen), Some(HeartJack), Some(SpadeQueen)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::TOP), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(SpadeKing), Some(SpadeQueen), Some(SpadeTen), Some(SpadeJack)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(DiamondTen), Some(ClubJack), Some(DiamondNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(DiamondQueen), Some(DiamondQueen), Some(DiamondAce)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(DiamondAce), Some(ClubJack), None, None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Wedding)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [16, 29, 94, 85], observing_player_hand: FdoHand::from_vec(vec![HeartQueen]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Wedding)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![]), FdoHand::from_vec(vec![HeartQueen]), FdoHand::from_vec(vec![SpadeNine]), FdoHand::from_vec(vec![])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardHeartQueen);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Wedding), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardSpadeNine]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: Some(FdoPlayer::RIGHT), tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondKing), Some(DiamondNine), Some(DiamondJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondKing), Some(HeartTen), Some(HeartJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(ClubAce), Some(ClubNine), Some(ClubKing), Some(ClubTen)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(ClubAce) }, FdoTrick { cards: [Some(SpadeAce), Some(SpadeNine), Some(SpadeKing), Some(SpadeAce)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(SpadeAce) }, FdoTrick { cards: [Some(HeartAce), Some(HeartNine), Some(HeartNine), Some(ClubKing)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(HeartKing), Some(HeartAce), Some(HeartKing), Some(DiamondTen)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(DiamondTen) }, FdoTrick { cards: [Some(ClubNine), Some(ClubTen), Some(ClubAce), Some(SpadeTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(ClubAce) }, FdoTrick { cards: [Some(SpadeJack), Some(HeartQueen), Some(HeartJack), Some(SpadeQueen)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::TOP), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(SpadeKing), Some(SpadeQueen), Some(SpadeTen), Some(SpadeJack)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(DiamondTen), Some(ClubJack), Some(DiamondNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(DiamondQueen), Some(DiamondQueen), Some(DiamondAce)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(DiamondAce), Some(ClubJack), Some(HeartQueen), None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Wedding)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [16, 29, 94, 85], observing_player_hand: FdoHand::from_vec(vec![SpadeNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Wedding)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![]), FdoHand::from_vec(vec![]), FdoHand::from_vec(vec![SpadeNine]), FdoHand::from_vec(vec![])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardSpadeNine);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Wedding), phase: FdoPhase::Finished, observing_player: FdoPlayer::BOTTOM, current_player: None, allowed_actions_current_player: FdoAllowedActions::from_vec(vec![]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: Some(FdoPlayer::RIGHT), tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartTen), Some(DiamondKing), Some(DiamondNine), Some(DiamondJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondKing), Some(HeartTen), Some(HeartJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(ClubAce), Some(ClubNine), Some(ClubKing), Some(ClubTen)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(ClubAce) }, FdoTrick { cards: [Some(SpadeAce), Some(SpadeNine), Some(SpadeKing), Some(SpadeAce)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(SpadeAce) }, FdoTrick { cards: [Some(HeartAce), Some(HeartNine), Some(HeartNine), Some(ClubKing)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::TOP), winning_card: Some(HeartAce) }, FdoTrick { cards: [Some(HeartKing), Some(HeartAce), Some(HeartKing), Some(DiamondTen)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(DiamondTen) }, FdoTrick { cards: [Some(ClubNine), Some(ClubTen), Some(ClubAce), Some(SpadeTen)], start_player: FdoPlayer::LEFT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(ClubAce) }, FdoTrick { cards: [Some(SpadeJack), Some(HeartQueen), Some(HeartJack), Some(SpadeQueen)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::TOP), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(SpadeKing), Some(SpadeQueen), Some(SpadeTen), Some(SpadeJack)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(DiamondTen), Some(ClubJack), Some(DiamondNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(ClubQueen), Some(DiamondQueen), Some(DiamondQueen), Some(DiamondAce)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(DiamondAce), Some(ClubJack), Some(HeartQueen), Some(SpadeNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartQueen) }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Wedding)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [16, 45, 94, 85], observing_player_hand: FdoHand::from_vec(vec![]), finished_stats: Some(FdoEndOfGameStats { re_players: FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT]), is_solo: false, player_eyes: [16, 45, 94, 85], re_eyes: 101, kontra_eyes: 139, re_points: -2, kontra_points: 2, player_points: [-2, 2, 2, -2], basic_winning_point_details: Some(FdoBasicWinningPointsDetails { winning_points: 1, winning_under_90: 0, winning_under_60: 0, winning_under_30: 0, winning_black: 0, re_announcement: 0, kontra_announcement: 0, re_under_90_announcement: 0, re_under_60_announcement: 0, re_under_30_announcement: 0, re_black_announcement: 0, kontra_under_90_announcement: 0, kontra_under_60_announcement: 0, kontra_under_30_announcement: 0, kontra_black_announcement: 0, re_reached_120_against_no_90: 0, re_reached_90_against_no_60: 0, re_reached_60_against_no_30: 0, re_reached_30_against_black: 0, kontra_reached_120_against_no_90: 0, kontra_reached_90_against_no_60: 0, kontra_reached_60_against_no_30: 0, kontra_reached_30_against_black: 0 }), basic_draw_points_details: None, additional_points_details: Some(FdoAdditionalPointsDetails { against_club_queens: true, number_of_doppelkopf_re: 0, number_of_doppelkopf_kontra: 0, fuchs_gefangen_re: 1, fuchs_gefangen_kontra: 1, karlchen_last_trick_re: false, karlchen_last_trick_kontra: false }) }), phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::BOTTOM, FdoPlayer::RIGHT])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Wedding)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![]), FdoHand::from_vec(vec![]), FdoHand::from_vec(vec![]), FdoHand::from_vec(vec![])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//
//     }
//
//     #[test]
//     pub fn test_full4() {
//         // Stilles Solo
//         // https://www.online-doppelkopf.com/spiele/99.514.292
//         let mut state = FdoState::new_game_from_hand_and_start_player(
//             [
//                 // Bottom
//                 FdoHand::from_vec(vec![HeartNine, DiamondAce, DiamondJack, HeartJack, SpadeJack, DiamondQueen, ClubJack, HeartAce, SpadeQueen, HeartKing, HeartTen, HeartNine]),
//                 // Left
//                 FdoHand::from_vec(vec![DiamondTen, SpadeTen, DiamondTen, ClubNine, DiamondNine, SpadeAce, HeartJack, ClubAce, ClubJack, ClubTen, ClubKing, HeartQueen]),
//                 // Top
//                 FdoHand::from_vec(vec![HeartKing, SpadeNine, ClubQueen, ClubNine, DiamondJack, SpadeNine, ClubQueen, HeartAce, DiamondAce, SpadeTen, ClubAce, SpadeKing]),
//                 // Right
//                 FdoHand::from_vec(vec![SpadeJack, SpadeAce, HeartTen, ClubKing, DiamondQueen, SpadeKing, DiamondNine, SpadeQueen, DiamondKing, DiamondKing, ClubTen, HeartQueen]),
//             ],
//             FdoPlayer::BOTTOM,
//         );
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: None, phase: FdoPhase::Reservation, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![ReservationHealthy, ReservationDiamondsSolo, ReservationHeartsSolo, ReservationSpadesSolo, ReservationClubsSolo, ReservationTrumplessSolo, ReservationQueensSolo, ReservationJacksSolo]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[]).unwrap(), visible_reservations: [None, None, None, None], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondJack, DiamondAce, HeartAce, HeartKing, HeartNine, HeartNine]), finished_stats: None, phi_re_players: None, phi_real_reservations: FdoReservationRound { reservations: [None, None, None, None], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondJack, DiamondAce, HeartAce, HeartKing, HeartNine, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, DiamondTen, DiamondTen, DiamondNine, ClubAce, ClubTen, ClubKing, ClubNine, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, DiamondJack, DiamondAce, ClubAce, ClubNine, SpadeTen, SpadeKing, SpadeNine, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, SpadeQueen, HeartQueen, DiamondQueen, SpadeJack, DiamondKing, DiamondKing, DiamondNine, ClubTen, ClubKing, SpadeAce, SpadeKing])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(ReservationHealthy);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: None, phase: FdoPhase::Reservation, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![ReservationHealthy, ReservationDiamondsSolo, ReservationHeartsSolo, ReservationSpadesSolo, ReservationClubsSolo, ReservationTrumplessSolo, ReservationQueensSolo, ReservationJacksSolo]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), None, None, None], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, DiamondTen, DiamondTen, DiamondNine, ClubAce, ClubTen, ClubKing, ClubNine, SpadeAce, SpadeTen]), finished_stats: None, phi_re_players: None, phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), None, None, None], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondJack, DiamondAce, HeartAce, HeartKing, HeartNine, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, DiamondTen, DiamondTen, DiamondNine, ClubAce, ClubTen, ClubKing, ClubNine, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, DiamondJack, DiamondAce, ClubAce, ClubNine, SpadeTen, SpadeKing, SpadeNine, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, SpadeQueen, HeartQueen, DiamondQueen, SpadeJack, DiamondKing, DiamondKing, DiamondNine, ClubTen, ClubKing, SpadeAce, SpadeKing])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(ReservationHealthy);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: None, phase: FdoPhase::Reservation, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![ReservationHealthy, ReservationWedding, ReservationDiamondsSolo, ReservationHeartsSolo, ReservationSpadesSolo, ReservationClubsSolo, ReservationTrumplessSolo, ReservationQueensSolo, ReservationJacksSolo]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), None, None], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![ClubQueen, ClubQueen, DiamondJack, DiamondAce, ClubAce, ClubNine, SpadeTen, SpadeKing, SpadeNine, SpadeNine, HeartAce, HeartKing]), finished_stats: None, phi_re_players: None, phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), None, None], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondJack, DiamondAce, HeartAce, HeartKing, HeartNine, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, DiamondTen, DiamondTen, DiamondNine, ClubAce, ClubTen, ClubKing, ClubNine, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, DiamondJack, DiamondAce, ClubAce, ClubNine, SpadeTen, SpadeKing, SpadeNine, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, SpadeQueen, HeartQueen, DiamondQueen, SpadeJack, DiamondKing, DiamondKing, DiamondNine, ClubTen, ClubKing, SpadeAce, SpadeKing])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(ReservationHealthy);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: None, phase: FdoPhase::Reservation, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![ReservationHealthy, ReservationDiamondsSolo, ReservationHeartsSolo, ReservationSpadesSolo, ReservationClubsSolo, ReservationTrumplessSolo, ReservationQueensSolo, ReservationJacksSolo]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), None], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartTen, SpadeQueen, HeartQueen, DiamondQueen, SpadeJack, DiamondKing, DiamondKing, DiamondNine, ClubTen, ClubKing, SpadeAce, SpadeKing]), finished_stats: None, phi_re_players: None, phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), None], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondJack, DiamondAce, HeartAce, HeartKing, HeartNine, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, DiamondTen, DiamondTen, DiamondNine, ClubAce, ClubTen, ClubKing, ClubNine, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, DiamondJack, DiamondAce, ClubAce, ClubNine, SpadeTen, SpadeKing, SpadeNine, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, SpadeQueen, HeartQueen, DiamondQueen, SpadeJack, DiamondKing, DiamondKing, DiamondNine, ClubTen, ClubKing, SpadeAce, SpadeKing])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(ReservationHealthy);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondJack, DiamondAce, HeartAce, HeartKing, HeartNine, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::TOP])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondJack, DiamondAce, HeartAce, HeartKing, HeartNine, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, DiamondTen, DiamondTen, DiamondNine, ClubAce, ClubTen, ClubKing, ClubNine, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, DiamondJack, DiamondAce, ClubAce, ClubNine, SpadeTen, SpadeKing, SpadeNine, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, SpadeQueen, HeartQueen, DiamondQueen, SpadeJack, DiamondKing, DiamondKing, DiamondNine, ClubTen, ClubKing, SpadeAce, SpadeKing])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, DiamondTen, DiamondTen, DiamondNine, ClubAce, ClubTen, ClubKing, ClubNine, SpadeAce, SpadeTen]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::TOP])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondJack, DiamondAce, HeartAce, HeartKing, HeartNine, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, DiamondTen, DiamondTen, DiamondNine, ClubAce, ClubTen, ClubKing, ClubNine, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, DiamondJack, DiamondAce, ClubAce, ClubNine, SpadeTen, SpadeKing, SpadeNine, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, SpadeQueen, HeartQueen, DiamondQueen, SpadeJack, DiamondKing, DiamondKing, DiamondNine, ClubTen, ClubKing, SpadeAce, SpadeKing])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![ClubQueen, ClubQueen, DiamondJack, DiamondAce, ClubAce, ClubNine, SpadeTen, SpadeKing, SpadeNine, SpadeNine, HeartAce, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::TOP])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondJack, DiamondAce, HeartAce, HeartKing, HeartNine, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, DiamondTen, DiamondTen, DiamondNine, ClubAce, ClubTen, ClubKing, ClubNine, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, DiamondJack, DiamondAce, ClubAce, ClubNine, SpadeTen, SpadeKing, SpadeNine, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, SpadeQueen, HeartQueen, DiamondQueen, SpadeJack, DiamondKing, DiamondKing, DiamondNine, ClubTen, ClubKing, SpadeAce, SpadeKing])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartTen, SpadeQueen, HeartQueen, DiamondQueen, SpadeJack, DiamondKing, DiamondKing, DiamondNine, ClubTen, ClubKing, SpadeAce, SpadeKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::TOP])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondJack, DiamondAce, HeartAce, HeartKing, HeartNine, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, DiamondTen, DiamondTen, DiamondNine, ClubAce, ClubTen, ClubKing, ClubNine, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, DiamondJack, DiamondAce, ClubAce, ClubNine, SpadeTen, SpadeKing, SpadeNine, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, SpadeQueen, HeartQueen, DiamondQueen, SpadeJack, DiamondKing, DiamondKing, DiamondNine, ClubTen, ClubKing, SpadeAce, SpadeKing])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondJack, CardDiamondQueen, CardDiamondAce, CardHeartNine, CardHeartTen, CardHeartJack, CardHeartKing, CardHeartAce, CardClubJack, CardSpadeJack, CardSpadeQueen]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondJack, DiamondAce, HeartAce, HeartKing, HeartNine, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::TOP])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondJack, DiamondAce, HeartAce, HeartKing, HeartNine, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, DiamondTen, DiamondTen, DiamondNine, ClubAce, ClubTen, ClubKing, ClubNine, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, DiamondJack, DiamondAce, ClubAce, ClubNine, SpadeTen, SpadeKing, SpadeNine, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, SpadeQueen, HeartQueen, DiamondQueen, SpadeJack, DiamondKing, DiamondKing, DiamondNine, ClubTen, ClubKing, SpadeAce, SpadeKing])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardHeartNine);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartNine), None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, DiamondTen, DiamondTen, DiamondNine, ClubAce, ClubTen, ClubKing, ClubNine, SpadeAce, SpadeTen]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::TOP])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondJack, DiamondAce, HeartAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, DiamondTen, DiamondTen, DiamondNine, ClubAce, ClubTen, ClubKing, ClubNine, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, DiamondJack, DiamondAce, ClubAce, ClubNine, SpadeTen, SpadeKing, SpadeNine, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, SpadeQueen, HeartQueen, DiamondQueen, SpadeJack, DiamondKing, DiamondKing, DiamondNine, ClubTen, ClubKing, SpadeAce, SpadeKing])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartNine), None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![ClubQueen, ClubQueen, DiamondJack, DiamondAce, ClubAce, ClubNine, SpadeTen, SpadeKing, SpadeNine, SpadeNine, HeartAce, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::TOP])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondJack, DiamondAce, HeartAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, DiamondTen, DiamondTen, DiamondNine, ClubAce, ClubTen, ClubKing, ClubNine, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, DiamondJack, DiamondAce, ClubAce, ClubNine, SpadeTen, SpadeKing, SpadeNine, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, SpadeQueen, HeartQueen, DiamondQueen, SpadeJack, DiamondKing, DiamondKing, DiamondNine, ClubTen, ClubKing, SpadeAce, SpadeKing])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartNine), None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartTen, SpadeQueen, HeartQueen, DiamondQueen, SpadeJack, DiamondKing, DiamondKing, DiamondNine, ClubTen, ClubKing, SpadeAce, SpadeKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::TOP])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondJack, DiamondAce, HeartAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, DiamondTen, DiamondTen, DiamondNine, ClubAce, ClubTen, ClubKing, ClubNine, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, DiamondJack, DiamondAce, ClubAce, ClubNine, SpadeTen, SpadeKing, SpadeNine, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, SpadeQueen, HeartQueen, DiamondQueen, SpadeJack, DiamondKing, DiamondKing, DiamondNine, ClubTen, ClubKing, SpadeAce, SpadeKing])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartNine), None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondJack, DiamondAce, HeartAce, HeartKing, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::TOP])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondJack, DiamondAce, HeartAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, DiamondTen, DiamondTen, DiamondNine, ClubAce, ClubTen, ClubKing, ClubNine, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, DiamondJack, DiamondAce, ClubAce, ClubNine, SpadeTen, SpadeKing, SpadeNine, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, SpadeQueen, HeartQueen, DiamondQueen, SpadeJack, DiamondKing, DiamondKing, DiamondNine, ClubTen, ClubKing, SpadeAce, SpadeKing])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondNine, CardDiamondTen, CardHeartJack, CardHeartQueen, CardClubNine, CardClubTen, CardClubJack, CardClubKing, CardClubAce, CardSpadeTen, CardSpadeAce]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartNine), None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, DiamondTen, DiamondTen, DiamondNine, ClubAce, ClubTen, ClubKing, ClubNine, SpadeAce, SpadeTen]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::TOP])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondJack, DiamondAce, HeartAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, DiamondTen, DiamondTen, DiamondNine, ClubAce, ClubTen, ClubKing, ClubNine, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, DiamondJack, DiamondAce, ClubAce, ClubNine, SpadeTen, SpadeKing, SpadeNine, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, SpadeQueen, HeartQueen, DiamondQueen, SpadeJack, DiamondKing, DiamondKing, DiamondNine, ClubTen, ClubKing, SpadeAce, SpadeKing])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardDiamondTen);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartNine), Some(DiamondTen), None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![ClubQueen, ClubQueen, DiamondJack, DiamondAce, ClubAce, ClubNine, SpadeTen, SpadeKing, SpadeNine, SpadeNine, HeartAce, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::TOP])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondJack, DiamondAce, HeartAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, DiamondTen, DiamondNine, ClubAce, ClubTen, ClubKing, ClubNine, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, DiamondJack, DiamondAce, ClubAce, ClubNine, SpadeTen, SpadeKing, SpadeNine, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, SpadeQueen, HeartQueen, DiamondQueen, SpadeJack, DiamondKing, DiamondKing, DiamondNine, ClubTen, ClubKing, SpadeAce, SpadeKing])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartNine), Some(DiamondTen), None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartTen, SpadeQueen, HeartQueen, DiamondQueen, SpadeJack, DiamondKing, DiamondKing, DiamondNine, ClubTen, ClubKing, SpadeAce, SpadeKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::TOP])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondJack, DiamondAce, HeartAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, DiamondTen, DiamondNine, ClubAce, ClubTen, ClubKing, ClubNine, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, DiamondJack, DiamondAce, ClubAce, ClubNine, SpadeTen, SpadeKing, SpadeNine, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, SpadeQueen, HeartQueen, DiamondQueen, SpadeJack, DiamondKing, DiamondKing, DiamondNine, ClubTen, ClubKing, SpadeAce, SpadeKing])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartNine), Some(DiamondTen), None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondJack, DiamondAce, HeartAce, HeartKing, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::TOP])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondJack, DiamondAce, HeartAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, DiamondTen, DiamondNine, ClubAce, ClubTen, ClubKing, ClubNine, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, DiamondJack, DiamondAce, ClubAce, ClubNine, SpadeTen, SpadeKing, SpadeNine, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, SpadeQueen, HeartQueen, DiamondQueen, SpadeJack, DiamondKing, DiamondKing, DiamondNine, ClubTen, ClubKing, SpadeAce, SpadeKing])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartNine), Some(DiamondTen), None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, DiamondTen, DiamondNine, ClubAce, ClubTen, ClubKing, ClubNine, SpadeAce, SpadeTen]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::TOP])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondJack, DiamondAce, HeartAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, DiamondTen, DiamondNine, ClubAce, ClubTen, ClubKing, ClubNine, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, DiamondJack, DiamondAce, ClubAce, ClubNine, SpadeTen, SpadeKing, SpadeNine, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, SpadeQueen, HeartQueen, DiamondQueen, SpadeJack, DiamondKing, DiamondKing, DiamondNine, ClubTen, ClubKing, SpadeAce, SpadeKing])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardHeartKing, CardHeartAce]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartNine), Some(DiamondTen), None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![ClubQueen, ClubQueen, DiamondJack, DiamondAce, ClubAce, ClubNine, SpadeTen, SpadeKing, SpadeNine, SpadeNine, HeartAce, HeartKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::TOP])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondJack, DiamondAce, HeartAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, DiamondTen, DiamondNine, ClubAce, ClubTen, ClubKing, ClubNine, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, DiamondJack, DiamondAce, ClubAce, ClubNine, SpadeTen, SpadeKing, SpadeNine, SpadeNine, HeartAce, HeartKing]), FdoHand::from_vec(vec![HeartTen, SpadeQueen, HeartQueen, DiamondQueen, SpadeJack, DiamondKing, DiamondKing, DiamondNine, ClubTen, ClubKing, SpadeAce, SpadeKing])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardHeartKing);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartNine), Some(DiamondTen), Some(HeartKing), None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartTen, SpadeQueen, HeartQueen, DiamondQueen, SpadeJack, DiamondKing, DiamondKing, DiamondNine, ClubTen, ClubKing, SpadeAce, SpadeKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::TOP])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondJack, DiamondAce, HeartAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, DiamondTen, DiamondNine, ClubAce, ClubTen, ClubKing, ClubNine, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, DiamondJack, DiamondAce, ClubAce, ClubNine, SpadeTen, SpadeKing, SpadeNine, SpadeNine, HeartAce]), FdoHand::from_vec(vec![HeartTen, SpadeQueen, HeartQueen, DiamondQueen, SpadeJack, DiamondKing, DiamondKing, DiamondNine, ClubTen, ClubKing, SpadeAce, SpadeKing])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartNine), Some(DiamondTen), Some(HeartKing), None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondJack, DiamondAce, HeartAce, HeartKing, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::TOP])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondJack, DiamondAce, HeartAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, DiamondTen, DiamondNine, ClubAce, ClubTen, ClubKing, ClubNine, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, DiamondJack, DiamondAce, ClubAce, ClubNine, SpadeTen, SpadeKing, SpadeNine, SpadeNine, HeartAce]), FdoHand::from_vec(vec![HeartTen, SpadeQueen, HeartQueen, DiamondQueen, SpadeJack, DiamondKing, DiamondKing, DiamondNine, ClubTen, ClubKing, SpadeAce, SpadeKing])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartNine), Some(DiamondTen), Some(HeartKing), None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, DiamondTen, DiamondNine, ClubAce, ClubTen, ClubKing, ClubNine, SpadeAce, SpadeTen]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::TOP])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondJack, DiamondAce, HeartAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, DiamondTen, DiamondNine, ClubAce, ClubTen, ClubKing, ClubNine, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, DiamondJack, DiamondAce, ClubAce, ClubNine, SpadeTen, SpadeKing, SpadeNine, SpadeNine, HeartAce]), FdoHand::from_vec(vec![HeartTen, SpadeQueen, HeartQueen, DiamondQueen, SpadeJack, DiamondKing, DiamondKing, DiamondNine, ClubTen, ClubKing, SpadeAce, SpadeKing])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartNine), Some(DiamondTen), Some(HeartKing), None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![ClubQueen, ClubQueen, DiamondJack, DiamondAce, ClubAce, ClubNine, SpadeTen, SpadeKing, SpadeNine, SpadeNine, HeartAce]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::TOP])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondJack, DiamondAce, HeartAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, DiamondTen, DiamondNine, ClubAce, ClubTen, ClubKing, ClubNine, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, DiamondJack, DiamondAce, ClubAce, ClubNine, SpadeTen, SpadeKing, SpadeNine, SpadeNine, HeartAce]), FdoHand::from_vec(vec![HeartTen, SpadeQueen, HeartQueen, DiamondQueen, SpadeJack, DiamondKing, DiamondKing, DiamondNine, ClubTen, ClubKing, SpadeAce, SpadeKing])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondNine, CardDiamondQueen, CardDiamondKing, CardHeartTen, CardHeartQueen, CardClubTen, CardClubKing, CardSpadeJack, CardSpadeQueen, CardSpadeKing, CardSpadeAce]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartNine), Some(DiamondTen), Some(HeartKing), None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 0], observing_player_hand: FdoHand::from_vec(vec![HeartTen, SpadeQueen, HeartQueen, DiamondQueen, SpadeJack, DiamondKing, DiamondKing, DiamondNine, ClubTen, ClubKing, SpadeAce, SpadeKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::TOP])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondJack, DiamondAce, HeartAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, DiamondTen, DiamondNine, ClubAce, ClubTen, ClubKing, ClubNine, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, DiamondJack, DiamondAce, ClubAce, ClubNine, SpadeTen, SpadeKing, SpadeNine, SpadeNine, HeartAce]), FdoHand::from_vec(vec![HeartTen, SpadeQueen, HeartQueen, DiamondQueen, SpadeJack, DiamondKing, DiamondKing, DiamondNine, ClubTen, ClubKing, SpadeAce, SpadeKing])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardSpadeJack);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartNine), Some(DiamondTen), Some(HeartKing), Some(SpadeJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeJack) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 16], observing_player_hand: FdoHand::from_vec(vec![HeartTen, SpadeQueen, HeartQueen, DiamondQueen, DiamondKing, DiamondKing, DiamondNine, ClubTen, ClubKing, SpadeAce, SpadeKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::TOP])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondJack, DiamondAce, HeartAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, DiamondTen, DiamondNine, ClubAce, ClubTen, ClubKing, ClubNine, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, DiamondJack, DiamondAce, ClubAce, ClubNine, SpadeTen, SpadeKing, SpadeNine, SpadeNine, HeartAce]), FdoHand::from_vec(vec![HeartTen, SpadeQueen, HeartQueen, DiamondQueen, DiamondKing, DiamondKing, DiamondNine, ClubTen, ClubKing, SpadeAce, SpadeKing])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartNine), Some(DiamondTen), Some(HeartKing), Some(SpadeJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeJack) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 16], observing_player_hand: FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondJack, DiamondAce, HeartAce, HeartKing, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::TOP])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondJack, DiamondAce, HeartAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, DiamondTen, DiamondNine, ClubAce, ClubTen, ClubKing, ClubNine, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, DiamondJack, DiamondAce, ClubAce, ClubNine, SpadeTen, SpadeKing, SpadeNine, SpadeNine, HeartAce]), FdoHand::from_vec(vec![HeartTen, SpadeQueen, HeartQueen, DiamondQueen, DiamondKing, DiamondKing, DiamondNine, ClubTen, ClubKing, SpadeAce, SpadeKing])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartNine), Some(DiamondTen), Some(HeartKing), Some(SpadeJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeJack) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 16], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, DiamondTen, DiamondNine, ClubAce, ClubTen, ClubKing, ClubNine, SpadeAce, SpadeTen]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::TOP])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondJack, DiamondAce, HeartAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, DiamondTen, DiamondNine, ClubAce, ClubTen, ClubKing, ClubNine, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, DiamondJack, DiamondAce, ClubAce, ClubNine, SpadeTen, SpadeKing, SpadeNine, SpadeNine, HeartAce]), FdoHand::from_vec(vec![HeartTen, SpadeQueen, HeartQueen, DiamondQueen, DiamondKing, DiamondKing, DiamondNine, ClubTen, ClubKing, SpadeAce, SpadeKing])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartNine), Some(DiamondTen), Some(HeartKing), Some(SpadeJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeJack) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 16], observing_player_hand: FdoHand::from_vec(vec![ClubQueen, ClubQueen, DiamondJack, DiamondAce, ClubAce, ClubNine, SpadeTen, SpadeKing, SpadeNine, SpadeNine, HeartAce]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::TOP])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondJack, DiamondAce, HeartAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, DiamondTen, DiamondNine, ClubAce, ClubTen, ClubKing, ClubNine, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, DiamondJack, DiamondAce, ClubAce, ClubNine, SpadeTen, SpadeKing, SpadeNine, SpadeNine, HeartAce]), FdoHand::from_vec(vec![HeartTen, SpadeQueen, HeartQueen, DiamondQueen, DiamondKing, DiamondKing, DiamondNine, ClubTen, ClubKing, SpadeAce, SpadeKing])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondNine, CardDiamondQueen, CardDiamondKing, CardHeartTen, CardHeartQueen, CardClubTen, CardClubKing, CardSpadeQueen, CardSpadeKing, CardSpadeAce]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartNine), Some(DiamondTen), Some(HeartKing), Some(SpadeJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeJack) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 16], observing_player_hand: FdoHand::from_vec(vec![HeartTen, SpadeQueen, HeartQueen, DiamondQueen, DiamondKing, DiamondKing, DiamondNine, ClubTen, ClubKing, SpadeAce, SpadeKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::TOP])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondJack, DiamondAce, HeartAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, DiamondTen, DiamondNine, ClubAce, ClubTen, ClubKing, ClubNine, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, DiamondJack, DiamondAce, ClubAce, ClubNine, SpadeTen, SpadeKing, SpadeNine, SpadeNine, HeartAce]), FdoHand::from_vec(vec![HeartTen, SpadeQueen, HeartQueen, DiamondQueen, DiamondKing, DiamondKing, DiamondNine, ClubTen, ClubKing, SpadeAce, SpadeKing])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardSpadeAce);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartNine), Some(DiamondTen), Some(HeartKing), Some(SpadeJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeJack) }, FdoTrick { cards: [Some(SpadeAce), None, None, None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 16], observing_player_hand: FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondJack, DiamondAce, HeartAce, HeartKing, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::TOP])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondJack, DiamondAce, HeartAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, DiamondTen, DiamondNine, ClubAce, ClubTen, ClubKing, ClubNine, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, DiamondJack, DiamondAce, ClubAce, ClubNine, SpadeTen, SpadeKing, SpadeNine, SpadeNine, HeartAce]), FdoHand::from_vec(vec![HeartTen, SpadeQueen, HeartQueen, DiamondQueen, DiamondKing, DiamondKing, DiamondNine, ClubTen, ClubKing, SpadeKing])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartNine), Some(DiamondTen), Some(HeartKing), Some(SpadeJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeJack) }, FdoTrick { cards: [Some(SpadeAce), None, None, None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 16], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, DiamondTen, DiamondNine, ClubAce, ClubTen, ClubKing, ClubNine, SpadeAce, SpadeTen]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::TOP])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondJack, DiamondAce, HeartAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, DiamondTen, DiamondNine, ClubAce, ClubTen, ClubKing, ClubNine, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, DiamondJack, DiamondAce, ClubAce, ClubNine, SpadeTen, SpadeKing, SpadeNine, SpadeNine, HeartAce]), FdoHand::from_vec(vec![HeartTen, SpadeQueen, HeartQueen, DiamondQueen, DiamondKing, DiamondKing, DiamondNine, ClubTen, ClubKing, SpadeKing])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartNine), Some(DiamondTen), Some(HeartKing), Some(SpadeJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeJack) }, FdoTrick { cards: [Some(SpadeAce), None, None, None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 16], observing_player_hand: FdoHand::from_vec(vec![ClubQueen, ClubQueen, DiamondJack, DiamondAce, ClubAce, ClubNine, SpadeTen, SpadeKing, SpadeNine, SpadeNine, HeartAce]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::TOP])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondJack, DiamondAce, HeartAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, DiamondTen, DiamondNine, ClubAce, ClubTen, ClubKing, ClubNine, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, DiamondJack, DiamondAce, ClubAce, ClubNine, SpadeTen, SpadeKing, SpadeNine, SpadeNine, HeartAce]), FdoHand::from_vec(vec![HeartTen, SpadeQueen, HeartQueen, DiamondQueen, DiamondKing, DiamondKing, DiamondNine, ClubTen, ClubKing, SpadeKing])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondJack, CardDiamondQueen, CardDiamondAce, CardHeartNine, CardHeartTen, CardHeartJack, CardHeartKing, CardHeartAce, CardClubJack, CardSpadeJack, CardSpadeQueen]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartNine), Some(DiamondTen), Some(HeartKing), Some(SpadeJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeJack) }, FdoTrick { cards: [Some(SpadeAce), None, None, None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 16], observing_player_hand: FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondJack, DiamondAce, HeartAce, HeartKing, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::TOP])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondJack, DiamondAce, HeartAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, DiamondTen, DiamondNine, ClubAce, ClubTen, ClubKing, ClubNine, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, DiamondJack, DiamondAce, ClubAce, ClubNine, SpadeTen, SpadeKing, SpadeNine, SpadeNine, HeartAce]), FdoHand::from_vec(vec![HeartTen, SpadeQueen, HeartQueen, DiamondQueen, DiamondKing, DiamondKing, DiamondNine, ClubTen, ClubKing, SpadeKing])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardDiamondAce);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartNine), Some(DiamondTen), Some(HeartKing), Some(SpadeJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeJack) }, FdoTrick { cards: [Some(SpadeAce), Some(DiamondAce), None, None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 16], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, DiamondTen, DiamondNine, ClubAce, ClubTen, ClubKing, ClubNine, SpadeAce, SpadeTen]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::TOP])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondJack, HeartAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, DiamondTen, DiamondNine, ClubAce, ClubTen, ClubKing, ClubNine, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, DiamondJack, DiamondAce, ClubAce, ClubNine, SpadeTen, SpadeKing, SpadeNine, SpadeNine, HeartAce]), FdoHand::from_vec(vec![HeartTen, SpadeQueen, HeartQueen, DiamondQueen, DiamondKing, DiamondKing, DiamondNine, ClubTen, ClubKing, SpadeKing])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartNine), Some(DiamondTen), Some(HeartKing), Some(SpadeJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeJack) }, FdoTrick { cards: [Some(SpadeAce), Some(DiamondAce), None, None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 16], observing_player_hand: FdoHand::from_vec(vec![ClubQueen, ClubQueen, DiamondJack, DiamondAce, ClubAce, ClubNine, SpadeTen, SpadeKing, SpadeNine, SpadeNine, HeartAce]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::TOP])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondJack, HeartAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, DiamondTen, DiamondNine, ClubAce, ClubTen, ClubKing, ClubNine, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, DiamondJack, DiamondAce, ClubAce, ClubNine, SpadeTen, SpadeKing, SpadeNine, SpadeNine, HeartAce]), FdoHand::from_vec(vec![HeartTen, SpadeQueen, HeartQueen, DiamondQueen, DiamondKing, DiamondKing, DiamondNine, ClubTen, ClubKing, SpadeKing])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardSpadeTen, CardSpadeAce]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartNine), Some(DiamondTen), Some(HeartKing), Some(SpadeJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeJack) }, FdoTrick { cards: [Some(SpadeAce), Some(DiamondAce), None, None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 16], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, DiamondTen, DiamondNine, ClubAce, ClubTen, ClubKing, ClubNine, SpadeAce, SpadeTen]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::TOP])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondJack, HeartAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, DiamondTen, DiamondNine, ClubAce, ClubTen, ClubKing, ClubNine, SpadeAce, SpadeTen]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, DiamondJack, DiamondAce, ClubAce, ClubNine, SpadeTen, SpadeKing, SpadeNine, SpadeNine, HeartAce]), FdoHand::from_vec(vec![HeartTen, SpadeQueen, HeartQueen, DiamondQueen, DiamondKing, DiamondKing, DiamondNine, ClubTen, ClubKing, SpadeKing])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardSpadeTen);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Announcement, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![AnnouncementReContra, AnnouncementNo90, AnnouncementNo60, AnnouncementNo30, AnnouncementBlack, NoAnnouncement]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartNine), Some(DiamondTen), Some(HeartKing), Some(SpadeJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeJack) }, FdoTrick { cards: [Some(SpadeAce), Some(DiamondAce), Some(SpadeTen), None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 16], observing_player_hand: FdoHand::from_vec(vec![ClubQueen, ClubQueen, DiamondJack, DiamondAce, ClubAce, ClubNine, SpadeTen, SpadeKing, SpadeNine, SpadeNine, HeartAce]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::TOP])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondJack, HeartAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, DiamondTen, DiamondNine, ClubAce, ClubTen, ClubKing, ClubNine, SpadeAce]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, DiamondJack, DiamondAce, ClubAce, ClubNine, SpadeTen, SpadeKing, SpadeNine, SpadeNine, HeartAce]), FdoHand::from_vec(vec![HeartTen, SpadeQueen, HeartQueen, DiamondQueen, DiamondKing, DiamondKing, DiamondNine, ClubTen, ClubKing, SpadeKing])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(NoAnnouncement);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardSpadeNine, CardSpadeTen, CardSpadeKing]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartNine), Some(DiamondTen), Some(HeartKing), Some(SpadeJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeJack) }, FdoTrick { cards: [Some(SpadeAce), Some(DiamondAce), Some(SpadeTen), None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [0, 0, 0, 16], observing_player_hand: FdoHand::from_vec(vec![ClubQueen, ClubQueen, DiamondJack, DiamondAce, ClubAce, ClubNine, SpadeTen, SpadeKing, SpadeNine, SpadeNine, HeartAce]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::TOP])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondJack, HeartAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, DiamondTen, DiamondNine, ClubAce, ClubTen, ClubKing, ClubNine, SpadeAce]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, DiamondJack, DiamondAce, ClubAce, ClubNine, SpadeTen, SpadeKing, SpadeNine, SpadeNine, HeartAce]), FdoHand::from_vec(vec![HeartTen, SpadeQueen, HeartQueen, DiamondQueen, DiamondKing, DiamondKing, DiamondNine, ClubTen, ClubKing, SpadeKing])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardSpadeNine);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondJack, CardDiamondQueen, CardHeartNine, CardHeartTen, CardHeartJack, CardHeartKing, CardHeartAce, CardClubJack, CardSpadeJack, CardSpadeQueen]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartNine), Some(DiamondTen), Some(HeartKing), Some(SpadeJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeJack) }, FdoTrick { cards: [Some(SpadeAce), Some(DiamondAce), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondAce) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [32, 0, 0, 16], observing_player_hand: FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondJack, HeartAce, HeartKing, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::TOP])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, DiamondJack, HeartAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, DiamondTen, DiamondNine, ClubAce, ClubTen, ClubKing, ClubNine, SpadeAce]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, DiamondJack, DiamondAce, ClubAce, ClubNine, SpadeTen, SpadeKing, SpadeNine, HeartAce]), FdoHand::from_vec(vec![HeartTen, SpadeQueen, HeartQueen, DiamondQueen, DiamondKing, DiamondKing, DiamondNine, ClubTen, ClubKing, SpadeKing])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardDiamondJack);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondNine, CardDiamondTen, CardHeartJack, CardHeartQueen, CardClubJack]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartNine), Some(DiamondTen), Some(HeartKing), Some(SpadeJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeJack) }, FdoTrick { cards: [Some(SpadeAce), Some(DiamondAce), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondAce) }, FdoTrick { cards: [Some(DiamondJack), None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [32, 0, 0, 16], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, DiamondTen, DiamondNine, ClubAce, ClubTen, ClubKing, ClubNine, SpadeAce]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::TOP])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, HeartAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, DiamondTen, DiamondNine, ClubAce, ClubTen, ClubKing, ClubNine, SpadeAce]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, DiamondJack, DiamondAce, ClubAce, ClubNine, SpadeTen, SpadeKing, SpadeNine, HeartAce]), FdoHand::from_vec(vec![HeartTen, SpadeQueen, HeartQueen, DiamondQueen, DiamondKing, DiamondKing, DiamondNine, ClubTen, ClubKing, SpadeKing])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardDiamondTen);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondJack, CardDiamondAce, CardClubQueen]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartNine), Some(DiamondTen), Some(HeartKing), Some(SpadeJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeJack) }, FdoTrick { cards: [Some(SpadeAce), Some(DiamondAce), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondAce) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondTen), None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [32, 0, 0, 16], observing_player_hand: FdoHand::from_vec(vec![ClubQueen, ClubQueen, DiamondJack, DiamondAce, ClubAce, ClubNine, SpadeTen, SpadeKing, SpadeNine, HeartAce]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::TOP])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, HeartAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, DiamondNine, ClubAce, ClubTen, ClubKing, ClubNine, SpadeAce]), FdoHand::from_vec(vec![ClubQueen, ClubQueen, DiamondJack, DiamondAce, ClubAce, ClubNine, SpadeTen, SpadeKing, SpadeNine, HeartAce]), FdoHand::from_vec(vec![HeartTen, SpadeQueen, HeartQueen, DiamondQueen, DiamondKing, DiamondKing, DiamondNine, ClubTen, ClubKing, SpadeKing])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardClubQueen);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondNine, CardDiamondQueen, CardDiamondKing, CardHeartTen, CardHeartQueen, CardSpadeQueen]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartNine), Some(DiamondTen), Some(HeartKing), Some(SpadeJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeJack) }, FdoTrick { cards: [Some(SpadeAce), Some(DiamondAce), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondAce) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondTen), Some(ClubQueen), None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [32, 0, 0, 16], observing_player_hand: FdoHand::from_vec(vec![HeartTen, SpadeQueen, HeartQueen, DiamondQueen, DiamondKing, DiamondKing, DiamondNine, ClubTen, ClubKing, SpadeKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::TOP])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, HeartAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, DiamondNine, ClubAce, ClubTen, ClubKing, ClubNine, SpadeAce]), FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondAce, ClubAce, ClubNine, SpadeTen, SpadeKing, SpadeNine, HeartAce]), FdoHand::from_vec(vec![HeartTen, SpadeQueen, HeartQueen, DiamondQueen, DiamondKing, DiamondKing, DiamondNine, ClubTen, ClubKing, SpadeKing])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardHeartTen);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondNine, CardDiamondQueen, CardDiamondKing, CardHeartQueen, CardClubTen, CardClubKing, CardSpadeQueen, CardSpadeKing]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartNine), Some(DiamondTen), Some(HeartKing), Some(SpadeJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeJack) }, FdoTrick { cards: [Some(SpadeAce), Some(DiamondAce), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondAce) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondTen), Some(ClubQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [32, 0, 0, 41], observing_player_hand: FdoHand::from_vec(vec![SpadeQueen, HeartQueen, DiamondQueen, DiamondKing, DiamondKing, DiamondNine, ClubTen, ClubKing, SpadeKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::TOP])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, HeartAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, DiamondNine, ClubAce, ClubTen, ClubKing, ClubNine, SpadeAce]), FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondAce, ClubAce, ClubNine, SpadeTen, SpadeKing, SpadeNine, HeartAce]), FdoHand::from_vec(vec![SpadeQueen, HeartQueen, DiamondQueen, DiamondKing, DiamondKing, DiamondNine, ClubTen, ClubKing, SpadeKing])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardClubKing);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondQueen, CardHeartNine, CardHeartTen, CardHeartJack, CardHeartKing, CardHeartAce, CardClubJack, CardSpadeJack, CardSpadeQueen]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartNine), Some(DiamondTen), Some(HeartKing), Some(SpadeJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeJack) }, FdoTrick { cards: [Some(SpadeAce), Some(DiamondAce), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondAce) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondTen), Some(ClubQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(ClubKing), None, None, None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [32, 0, 0, 41], observing_player_hand: FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, HeartAce, HeartKing, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::TOP])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondQueen, ClubJack, SpadeJack, HeartJack, HeartAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, DiamondNine, ClubAce, ClubTen, ClubKing, ClubNine, SpadeAce]), FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondAce, ClubAce, ClubNine, SpadeTen, SpadeKing, SpadeNine, HeartAce]), FdoHand::from_vec(vec![SpadeQueen, HeartQueen, DiamondQueen, DiamondKing, DiamondKing, DiamondNine, ClubTen, SpadeKing])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardHeartJack);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardClubNine, CardClubTen, CardClubKing, CardClubAce]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartNine), Some(DiamondTen), Some(HeartKing), Some(SpadeJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeJack) }, FdoTrick { cards: [Some(SpadeAce), Some(DiamondAce), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondAce) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondTen), Some(ClubQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(ClubKing), Some(HeartJack), None, None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [32, 0, 0, 41], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, DiamondNine, ClubAce, ClubTen, ClubKing, ClubNine, SpadeAce]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::TOP])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondQueen, ClubJack, SpadeJack, HeartAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, DiamondNine, ClubAce, ClubTen, ClubKing, ClubNine, SpadeAce]), FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondAce, ClubAce, ClubNine, SpadeTen, SpadeKing, SpadeNine, HeartAce]), FdoHand::from_vec(vec![SpadeQueen, HeartQueen, DiamondQueen, DiamondKing, DiamondKing, DiamondNine, ClubTen, SpadeKing])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardClubNine);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardClubNine, CardClubAce]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartNine), Some(DiamondTen), Some(HeartKing), Some(SpadeJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeJack) }, FdoTrick { cards: [Some(SpadeAce), Some(DiamondAce), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondAce) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondTen), Some(ClubQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(ClubKing), Some(HeartJack), Some(ClubNine), None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [32, 0, 0, 41], observing_player_hand: FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondAce, ClubAce, ClubNine, SpadeTen, SpadeKing, SpadeNine, HeartAce]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::TOP])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondQueen, ClubJack, SpadeJack, HeartAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, DiamondNine, ClubAce, ClubTen, ClubKing, SpadeAce]), FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondAce, ClubAce, ClubNine, SpadeTen, SpadeKing, SpadeNine, HeartAce]), FdoHand::from_vec(vec![SpadeQueen, HeartQueen, DiamondQueen, DiamondKing, DiamondKing, DiamondNine, ClubTen, SpadeKing])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardClubNine);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondQueen, CardHeartNine, CardHeartTen, CardHeartKing, CardHeartAce, CardClubJack, CardSpadeJack, CardSpadeQueen]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartNine), Some(DiamondTen), Some(HeartKing), Some(SpadeJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeJack) }, FdoTrick { cards: [Some(SpadeAce), Some(DiamondAce), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondAce) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondTen), Some(ClubQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(ClubKing), Some(HeartJack), Some(ClubNine), Some(ClubNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartJack) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [38, 0, 0, 41], observing_player_hand: FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondQueen, ClubJack, SpadeJack, HeartAce, HeartKing, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::TOP])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondQueen, ClubJack, SpadeJack, HeartAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, DiamondNine, ClubAce, ClubTen, ClubKing, SpadeAce]), FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondAce, ClubAce, SpadeTen, SpadeKing, SpadeNine, HeartAce]), FdoHand::from_vec(vec![SpadeQueen, HeartQueen, DiamondQueen, DiamondKing, DiamondKing, DiamondNine, ClubTen, SpadeKing])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardSpadeJack);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondNine, CardHeartJack, CardHeartQueen, CardClubJack]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartNine), Some(DiamondTen), Some(HeartKing), Some(SpadeJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeJack) }, FdoTrick { cards: [Some(SpadeAce), Some(DiamondAce), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondAce) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondTen), Some(ClubQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(ClubKing), Some(HeartJack), Some(ClubNine), Some(ClubNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartJack) }, FdoTrick { cards: [Some(SpadeJack), None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [38, 0, 0, 41], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, DiamondNine, ClubAce, ClubTen, ClubKing, SpadeAce]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::TOP])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondQueen, ClubJack, HeartAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, DiamondNine, ClubAce, ClubTen, ClubKing, SpadeAce]), FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondAce, ClubAce, SpadeTen, SpadeKing, SpadeNine, HeartAce]), FdoHand::from_vec(vec![SpadeQueen, HeartQueen, DiamondQueen, DiamondKing, DiamondKing, DiamondNine, ClubTen, SpadeKing])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardDiamondNine);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondJack, CardDiamondAce, CardClubQueen]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartNine), Some(DiamondTen), Some(HeartKing), Some(SpadeJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeJack) }, FdoTrick { cards: [Some(SpadeAce), Some(DiamondAce), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondAce) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondTen), Some(ClubQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(ClubKing), Some(HeartJack), Some(ClubNine), Some(ClubNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartJack) }, FdoTrick { cards: [Some(SpadeJack), Some(DiamondNine), None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [38, 0, 0, 41], observing_player_hand: FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondAce, ClubAce, SpadeTen, SpadeKing, SpadeNine, HeartAce]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::TOP])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondQueen, ClubJack, HeartAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, ClubAce, ClubTen, ClubKing, SpadeAce]), FdoHand::from_vec(vec![ClubQueen, DiamondJack, DiamondAce, ClubAce, SpadeTen, SpadeKing, SpadeNine, HeartAce]), FdoHand::from_vec(vec![SpadeQueen, HeartQueen, DiamondQueen, DiamondKing, DiamondKing, DiamondNine, ClubTen, SpadeKing])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardDiamondJack);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondNine, CardDiamondQueen, CardDiamondKing, CardHeartQueen, CardSpadeQueen]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartNine), Some(DiamondTen), Some(HeartKing), Some(SpadeJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeJack) }, FdoTrick { cards: [Some(SpadeAce), Some(DiamondAce), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondAce) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondTen), Some(ClubQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(ClubKing), Some(HeartJack), Some(ClubNine), Some(ClubNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartJack) }, FdoTrick { cards: [Some(SpadeJack), Some(DiamondNine), Some(DiamondJack), None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [38, 0, 0, 41], observing_player_hand: FdoHand::from_vec(vec![SpadeQueen, HeartQueen, DiamondQueen, DiamondKing, DiamondKing, DiamondNine, ClubTen, SpadeKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::TOP])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondQueen, ClubJack, HeartAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, ClubAce, ClubTen, ClubKing, SpadeAce]), FdoHand::from_vec(vec![ClubQueen, DiamondAce, ClubAce, SpadeTen, SpadeKing, SpadeNine, HeartAce]), FdoHand::from_vec(vec![SpadeQueen, HeartQueen, DiamondQueen, DiamondKing, DiamondKing, DiamondNine, ClubTen, SpadeKing])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardDiamondQueen);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondNine, CardDiamondKing, CardHeartQueen, CardClubTen, CardSpadeQueen, CardSpadeKing]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartNine), Some(DiamondTen), Some(HeartKing), Some(SpadeJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeJack) }, FdoTrick { cards: [Some(SpadeAce), Some(DiamondAce), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondAce) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondTen), Some(ClubQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(ClubKing), Some(HeartJack), Some(ClubNine), Some(ClubNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartJack) }, FdoTrick { cards: [Some(SpadeJack), Some(DiamondNine), Some(DiamondJack), Some(DiamondQueen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(DiamondQueen) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [38, 0, 0, 48], observing_player_hand: FdoHand::from_vec(vec![SpadeQueen, HeartQueen, DiamondKing, DiamondKing, DiamondNine, ClubTen, SpadeKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::TOP])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondQueen, ClubJack, HeartAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, ClubAce, ClubTen, ClubKing, SpadeAce]), FdoHand::from_vec(vec![ClubQueen, DiamondAce, ClubAce, SpadeTen, SpadeKing, SpadeNine, HeartAce]), FdoHand::from_vec(vec![SpadeQueen, HeartQueen, DiamondKing, DiamondKing, DiamondNine, ClubTen, SpadeKing])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardSpadeKing);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondQueen, CardHeartNine, CardHeartTen, CardHeartKing, CardHeartAce, CardClubJack, CardSpadeQueen]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartNine), Some(DiamondTen), Some(HeartKing), Some(SpadeJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeJack) }, FdoTrick { cards: [Some(SpadeAce), Some(DiamondAce), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondAce) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondTen), Some(ClubQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(ClubKing), Some(HeartJack), Some(ClubNine), Some(ClubNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartJack) }, FdoTrick { cards: [Some(SpadeJack), Some(DiamondNine), Some(DiamondJack), Some(DiamondQueen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(DiamondQueen) }, FdoTrick { cards: [Some(SpadeKing), None, None, None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [38, 0, 0, 48], observing_player_hand: FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondQueen, ClubJack, HeartAce, HeartKing, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::TOP])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, SpadeQueen, DiamondQueen, ClubJack, HeartAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, ClubAce, ClubTen, ClubKing, SpadeAce]), FdoHand::from_vec(vec![ClubQueen, DiamondAce, ClubAce, SpadeTen, SpadeKing, SpadeNine, HeartAce]), FdoHand::from_vec(vec![SpadeQueen, HeartQueen, DiamondKing, DiamondKing, DiamondNine, ClubTen])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardDiamondQueen);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardSpadeAce]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartNine), Some(DiamondTen), Some(HeartKing), Some(SpadeJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeJack) }, FdoTrick { cards: [Some(SpadeAce), Some(DiamondAce), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondAce) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondTen), Some(ClubQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(ClubKing), Some(HeartJack), Some(ClubNine), Some(ClubNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartJack) }, FdoTrick { cards: [Some(SpadeJack), Some(DiamondNine), Some(DiamondJack), Some(DiamondQueen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(DiamondQueen) }, FdoTrick { cards: [Some(SpadeKing), Some(DiamondQueen), None, None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [38, 0, 0, 48], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, ClubAce, ClubTen, ClubKing, SpadeAce]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::TOP])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, SpadeQueen, ClubJack, HeartAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, ClubAce, ClubTen, ClubKing, SpadeAce]), FdoHand::from_vec(vec![ClubQueen, DiamondAce, ClubAce, SpadeTen, SpadeKing, SpadeNine, HeartAce]), FdoHand::from_vec(vec![SpadeQueen, HeartQueen, DiamondKing, DiamondKing, DiamondNine, ClubTen])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardSpadeAce);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardSpadeNine, CardSpadeTen, CardSpadeKing]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartNine), Some(DiamondTen), Some(HeartKing), Some(SpadeJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeJack) }, FdoTrick { cards: [Some(SpadeAce), Some(DiamondAce), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondAce) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondTen), Some(ClubQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(ClubKing), Some(HeartJack), Some(ClubNine), Some(ClubNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartJack) }, FdoTrick { cards: [Some(SpadeJack), Some(DiamondNine), Some(DiamondJack), Some(DiamondQueen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(DiamondQueen) }, FdoTrick { cards: [Some(SpadeKing), Some(DiamondQueen), Some(SpadeAce), None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [38, 0, 0, 48], observing_player_hand: FdoHand::from_vec(vec![ClubQueen, DiamondAce, ClubAce, SpadeTen, SpadeKing, SpadeNine, HeartAce]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::TOP])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, SpadeQueen, ClubJack, HeartAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, ClubAce, ClubTen, ClubKing]), FdoHand::from_vec(vec![ClubQueen, DiamondAce, ClubAce, SpadeTen, SpadeKing, SpadeNine, HeartAce]), FdoHand::from_vec(vec![SpadeQueen, HeartQueen, DiamondKing, DiamondKing, DiamondNine, ClubTen])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardSpadeNine);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardHeartNine, CardHeartTen, CardHeartKing, CardHeartAce, CardClubJack, CardSpadeQueen]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartNine), Some(DiamondTen), Some(HeartKing), Some(SpadeJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeJack) }, FdoTrick { cards: [Some(SpadeAce), Some(DiamondAce), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondAce) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondTen), Some(ClubQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(ClubKing), Some(HeartJack), Some(ClubNine), Some(ClubNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartJack) }, FdoTrick { cards: [Some(SpadeJack), Some(DiamondNine), Some(DiamondJack), Some(DiamondQueen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(DiamondQueen) }, FdoTrick { cards: [Some(SpadeKing), Some(DiamondQueen), Some(SpadeAce), Some(SpadeNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondQueen) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [56, 0, 0, 48], observing_player_hand: FdoHand::from_vec(vec![HeartTen, SpadeQueen, ClubJack, HeartAce, HeartKing, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::TOP])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, SpadeQueen, ClubJack, HeartAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, ClubAce, ClubTen, ClubKing]), FdoHand::from_vec(vec![ClubQueen, DiamondAce, ClubAce, SpadeTen, SpadeKing, HeartAce]), FdoHand::from_vec(vec![SpadeQueen, HeartQueen, DiamondKing, DiamondKing, DiamondNine, ClubTen])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardClubJack);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardHeartJack, CardHeartQueen, CardClubJack]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartNine), Some(DiamondTen), Some(HeartKing), Some(SpadeJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeJack) }, FdoTrick { cards: [Some(SpadeAce), Some(DiamondAce), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondAce) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondTen), Some(ClubQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(ClubKing), Some(HeartJack), Some(ClubNine), Some(ClubNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartJack) }, FdoTrick { cards: [Some(SpadeJack), Some(DiamondNine), Some(DiamondJack), Some(DiamondQueen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(DiamondQueen) }, FdoTrick { cards: [Some(SpadeKing), Some(DiamondQueen), Some(SpadeAce), Some(SpadeNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondQueen) }, FdoTrick { cards: [Some(ClubJack), None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [56, 0, 0, 48], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, ClubAce, ClubTen, ClubKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::TOP])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, SpadeQueen, HeartAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, HeartJack, ClubAce, ClubTen, ClubKing]), FdoHand::from_vec(vec![ClubQueen, DiamondAce, ClubAce, SpadeTen, SpadeKing, HeartAce]), FdoHand::from_vec(vec![SpadeQueen, HeartQueen, DiamondKing, DiamondKing, DiamondNine, ClubTen])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardHeartJack);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondAce, CardClubQueen]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartNine), Some(DiamondTen), Some(HeartKing), Some(SpadeJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeJack) }, FdoTrick { cards: [Some(SpadeAce), Some(DiamondAce), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondAce) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondTen), Some(ClubQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(ClubKing), Some(HeartJack), Some(ClubNine), Some(ClubNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartJack) }, FdoTrick { cards: [Some(SpadeJack), Some(DiamondNine), Some(DiamondJack), Some(DiamondQueen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(DiamondQueen) }, FdoTrick { cards: [Some(SpadeKing), Some(DiamondQueen), Some(SpadeAce), Some(SpadeNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondQueen) }, FdoTrick { cards: [Some(ClubJack), Some(HeartJack), None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [56, 0, 0, 48], observing_player_hand: FdoHand::from_vec(vec![ClubQueen, DiamondAce, ClubAce, SpadeTen, SpadeKing, HeartAce]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::TOP])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, SpadeQueen, HeartAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubAce, ClubTen, ClubKing]), FdoHand::from_vec(vec![ClubQueen, DiamondAce, ClubAce, SpadeTen, SpadeKing, HeartAce]), FdoHand::from_vec(vec![SpadeQueen, HeartQueen, DiamondKing, DiamondKing, DiamondNine, ClubTen])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardClubQueen);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondNine, CardDiamondKing, CardHeartQueen, CardSpadeQueen]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartNine), Some(DiamondTen), Some(HeartKing), Some(SpadeJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeJack) }, FdoTrick { cards: [Some(SpadeAce), Some(DiamondAce), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondAce) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondTen), Some(ClubQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(ClubKing), Some(HeartJack), Some(ClubNine), Some(ClubNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartJack) }, FdoTrick { cards: [Some(SpadeJack), Some(DiamondNine), Some(DiamondJack), Some(DiamondQueen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(DiamondQueen) }, FdoTrick { cards: [Some(SpadeKing), Some(DiamondQueen), Some(SpadeAce), Some(SpadeNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondQueen) }, FdoTrick { cards: [Some(ClubJack), Some(HeartJack), Some(ClubQueen), None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [56, 0, 0, 48], observing_player_hand: FdoHand::from_vec(vec![SpadeQueen, HeartQueen, DiamondKing, DiamondKing, DiamondNine, ClubTen]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::TOP])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, SpadeQueen, HeartAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubAce, ClubTen, ClubKing]), FdoHand::from_vec(vec![DiamondAce, ClubAce, SpadeTen, SpadeKing, HeartAce]), FdoHand::from_vec(vec![SpadeQueen, HeartQueen, DiamondKing, DiamondKing, DiamondNine, ClubTen])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardDiamondNine);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondAce, CardHeartAce, CardClubAce, CardSpadeTen, CardSpadeKing]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartNine), Some(DiamondTen), Some(HeartKing), Some(SpadeJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeJack) }, FdoTrick { cards: [Some(SpadeAce), Some(DiamondAce), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondAce) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondTen), Some(ClubQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(ClubKing), Some(HeartJack), Some(ClubNine), Some(ClubNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartJack) }, FdoTrick { cards: [Some(SpadeJack), Some(DiamondNine), Some(DiamondJack), Some(DiamondQueen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(DiamondQueen) }, FdoTrick { cards: [Some(SpadeKing), Some(DiamondQueen), Some(SpadeAce), Some(SpadeNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondQueen) }, FdoTrick { cards: [Some(ClubJack), Some(HeartJack), Some(ClubQueen), Some(DiamondNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::TOP), winning_card: Some(ClubQueen) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::TOP, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [56, 0, 7, 48], observing_player_hand: FdoHand::from_vec(vec![DiamondAce, ClubAce, SpadeTen, SpadeKing, HeartAce]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::TOP])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, SpadeQueen, HeartAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubAce, ClubTen, ClubKing]), FdoHand::from_vec(vec![DiamondAce, ClubAce, SpadeTen, SpadeKing, HeartAce]), FdoHand::from_vec(vec![SpadeQueen, HeartQueen, DiamondKing, DiamondKing, ClubTen])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardHeartAce);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondKing, CardHeartQueen, CardClubTen, CardSpadeQueen]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartNine), Some(DiamondTen), Some(HeartKing), Some(SpadeJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeJack) }, FdoTrick { cards: [Some(SpadeAce), Some(DiamondAce), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondAce) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondTen), Some(ClubQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(ClubKing), Some(HeartJack), Some(ClubNine), Some(ClubNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartJack) }, FdoTrick { cards: [Some(SpadeJack), Some(DiamondNine), Some(DiamondJack), Some(DiamondQueen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(DiamondQueen) }, FdoTrick { cards: [Some(SpadeKing), Some(DiamondQueen), Some(SpadeAce), Some(SpadeNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondQueen) }, FdoTrick { cards: [Some(ClubJack), Some(HeartJack), Some(ClubQueen), Some(DiamondNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::TOP), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(HeartAce), None, None, None], start_player: FdoPlayer::TOP, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [56, 0, 7, 48], observing_player_hand: FdoHand::from_vec(vec![SpadeQueen, HeartQueen, DiamondKing, DiamondKing, ClubTen]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::TOP])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, SpadeQueen, HeartAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubAce, ClubTen, ClubKing]), FdoHand::from_vec(vec![DiamondAce, ClubAce, SpadeTen, SpadeKing]), FdoHand::from_vec(vec![SpadeQueen, HeartQueen, DiamondKing, DiamondKing, ClubTen])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardSpadeQueen);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardHeartNine, CardHeartKing, CardHeartAce]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartNine), Some(DiamondTen), Some(HeartKing), Some(SpadeJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeJack) }, FdoTrick { cards: [Some(SpadeAce), Some(DiamondAce), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondAce) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondTen), Some(ClubQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(ClubKing), Some(HeartJack), Some(ClubNine), Some(ClubNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartJack) }, FdoTrick { cards: [Some(SpadeJack), Some(DiamondNine), Some(DiamondJack), Some(DiamondQueen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(DiamondQueen) }, FdoTrick { cards: [Some(SpadeKing), Some(DiamondQueen), Some(SpadeAce), Some(SpadeNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondQueen) }, FdoTrick { cards: [Some(ClubJack), Some(HeartJack), Some(ClubQueen), Some(DiamondNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::TOP), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeQueen), None, None], start_player: FdoPlayer::TOP, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [56, 0, 7, 48], observing_player_hand: FdoHand::from_vec(vec![HeartTen, SpadeQueen, HeartAce, HeartKing, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::TOP])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, SpadeQueen, HeartAce, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubAce, ClubTen, ClubKing]), FdoHand::from_vec(vec![DiamondAce, ClubAce, SpadeTen, SpadeKing]), FdoHand::from_vec(vec![HeartQueen, DiamondKing, DiamondKing, ClubTen])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardHeartAce);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardHeartQueen, CardClubTen, CardClubJack, CardClubKing, CardClubAce]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartNine), Some(DiamondTen), Some(HeartKing), Some(SpadeJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeJack) }, FdoTrick { cards: [Some(SpadeAce), Some(DiamondAce), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondAce) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondTen), Some(ClubQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(ClubKing), Some(HeartJack), Some(ClubNine), Some(ClubNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartJack) }, FdoTrick { cards: [Some(SpadeJack), Some(DiamondNine), Some(DiamondJack), Some(DiamondQueen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(DiamondQueen) }, FdoTrick { cards: [Some(SpadeKing), Some(DiamondQueen), Some(SpadeAce), Some(SpadeNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondQueen) }, FdoTrick { cards: [Some(ClubJack), Some(HeartJack), Some(ClubQueen), Some(DiamondNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::TOP), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeQueen), Some(HeartAce), None], start_player: FdoPlayer::TOP, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [56, 0, 7, 48], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubAce, ClubTen, ClubKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::TOP])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, SpadeQueen, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubAce, ClubTen, ClubKing]), FdoHand::from_vec(vec![DiamondAce, ClubAce, SpadeTen, SpadeKing]), FdoHand::from_vec(vec![HeartQueen, DiamondKing, DiamondKing, ClubTen])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardClubAce);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondKing, CardHeartQueen, CardClubTen]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartNine), Some(DiamondTen), Some(HeartKing), Some(SpadeJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeJack) }, FdoTrick { cards: [Some(SpadeAce), Some(DiamondAce), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondAce) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondTen), Some(ClubQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(ClubKing), Some(HeartJack), Some(ClubNine), Some(ClubNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartJack) }, FdoTrick { cards: [Some(SpadeJack), Some(DiamondNine), Some(DiamondJack), Some(DiamondQueen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(DiamondQueen) }, FdoTrick { cards: [Some(SpadeKing), Some(DiamondQueen), Some(SpadeAce), Some(SpadeNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondQueen) }, FdoTrick { cards: [Some(ClubJack), Some(HeartJack), Some(ClubQueen), Some(DiamondNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::TOP), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeQueen), Some(HeartAce), Some(ClubAce)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [56, 0, 7, 84], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, DiamondKing, DiamondKing, ClubTen]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::TOP])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, SpadeQueen, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubTen, ClubKing]), FdoHand::from_vec(vec![DiamondAce, ClubAce, SpadeTen, SpadeKing]), FdoHand::from_vec(vec![HeartQueen, DiamondKing, DiamondKing, ClubTen])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardDiamondKing);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardHeartTen, CardSpadeQueen]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartNine), Some(DiamondTen), Some(HeartKing), Some(SpadeJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeJack) }, FdoTrick { cards: [Some(SpadeAce), Some(DiamondAce), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondAce) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondTen), Some(ClubQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(ClubKing), Some(HeartJack), Some(ClubNine), Some(ClubNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartJack) }, FdoTrick { cards: [Some(SpadeJack), Some(DiamondNine), Some(DiamondJack), Some(DiamondQueen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(DiamondQueen) }, FdoTrick { cards: [Some(SpadeKing), Some(DiamondQueen), Some(SpadeAce), Some(SpadeNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondQueen) }, FdoTrick { cards: [Some(ClubJack), Some(HeartJack), Some(ClubQueen), Some(DiamondNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::TOP), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeQueen), Some(HeartAce), Some(ClubAce)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(DiamondKing), None, None, None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [56, 0, 7, 84], observing_player_hand: FdoHand::from_vec(vec![HeartTen, SpadeQueen, HeartKing, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::TOP])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, SpadeQueen, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubTen, ClubKing]), FdoHand::from_vec(vec![DiamondAce, ClubAce, SpadeTen, SpadeKing]), FdoHand::from_vec(vec![HeartQueen, DiamondKing, ClubTen])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardSpadeQueen);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardHeartQueen, CardClubJack]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartNine), Some(DiamondTen), Some(HeartKing), Some(SpadeJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeJack) }, FdoTrick { cards: [Some(SpadeAce), Some(DiamondAce), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondAce) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondTen), Some(ClubQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(ClubKing), Some(HeartJack), Some(ClubNine), Some(ClubNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartJack) }, FdoTrick { cards: [Some(SpadeJack), Some(DiamondNine), Some(DiamondJack), Some(DiamondQueen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(DiamondQueen) }, FdoTrick { cards: [Some(SpadeKing), Some(DiamondQueen), Some(SpadeAce), Some(SpadeNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondQueen) }, FdoTrick { cards: [Some(ClubJack), Some(HeartJack), Some(ClubQueen), Some(DiamondNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::TOP), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeQueen), Some(HeartAce), Some(ClubAce)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(DiamondKing), Some(SpadeQueen), None, None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [56, 0, 7, 84], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubTen, ClubKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::TOP])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubJack, ClubTen, ClubKing]), FdoHand::from_vec(vec![DiamondAce, ClubAce, SpadeTen, SpadeKing]), FdoHand::from_vec(vec![HeartQueen, DiamondKing, ClubTen])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardClubJack);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondAce]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartNine), Some(DiamondTen), Some(HeartKing), Some(SpadeJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeJack) }, FdoTrick { cards: [Some(SpadeAce), Some(DiamondAce), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondAce) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondTen), Some(ClubQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(ClubKing), Some(HeartJack), Some(ClubNine), Some(ClubNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartJack) }, FdoTrick { cards: [Some(SpadeJack), Some(DiamondNine), Some(DiamondJack), Some(DiamondQueen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(DiamondQueen) }, FdoTrick { cards: [Some(SpadeKing), Some(DiamondQueen), Some(SpadeAce), Some(SpadeNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondQueen) }, FdoTrick { cards: [Some(ClubJack), Some(HeartJack), Some(ClubQueen), Some(DiamondNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::TOP), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeQueen), Some(HeartAce), Some(ClubAce)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(DiamondKing), Some(SpadeQueen), Some(ClubJack), None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [56, 0, 7, 84], observing_player_hand: FdoHand::from_vec(vec![DiamondAce, ClubAce, SpadeTen, SpadeKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::TOP])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubTen, ClubKing]), FdoHand::from_vec(vec![DiamondAce, ClubAce, SpadeTen, SpadeKing]), FdoHand::from_vec(vec![HeartQueen, DiamondKing, ClubTen])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardDiamondAce);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardHeartNine, CardHeartTen, CardHeartKing]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartNine), Some(DiamondTen), Some(HeartKing), Some(SpadeJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeJack) }, FdoTrick { cards: [Some(SpadeAce), Some(DiamondAce), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondAce) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondTen), Some(ClubQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(ClubKing), Some(HeartJack), Some(ClubNine), Some(ClubNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartJack) }, FdoTrick { cards: [Some(SpadeJack), Some(DiamondNine), Some(DiamondJack), Some(DiamondQueen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(DiamondQueen) }, FdoTrick { cards: [Some(SpadeKing), Some(DiamondQueen), Some(SpadeAce), Some(SpadeNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondQueen) }, FdoTrick { cards: [Some(ClubJack), Some(HeartJack), Some(ClubQueen), Some(DiamondNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::TOP), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeQueen), Some(HeartAce), Some(ClubAce)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(DiamondKing), Some(SpadeQueen), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [76, 0, 7, 84], observing_player_hand: FdoHand::from_vec(vec![HeartTen, HeartKing, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::TOP])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, HeartKing, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubTen, ClubKing]), FdoHand::from_vec(vec![ClubAce, SpadeTen, SpadeKing]), FdoHand::from_vec(vec![HeartQueen, DiamondKing, ClubTen])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardHeartKing);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardHeartQueen, CardClubTen, CardClubKing]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartNine), Some(DiamondTen), Some(HeartKing), Some(SpadeJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeJack) }, FdoTrick { cards: [Some(SpadeAce), Some(DiamondAce), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondAce) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondTen), Some(ClubQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(ClubKing), Some(HeartJack), Some(ClubNine), Some(ClubNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartJack) }, FdoTrick { cards: [Some(SpadeJack), Some(DiamondNine), Some(DiamondJack), Some(DiamondQueen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(DiamondQueen) }, FdoTrick { cards: [Some(SpadeKing), Some(DiamondQueen), Some(SpadeAce), Some(SpadeNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondQueen) }, FdoTrick { cards: [Some(ClubJack), Some(HeartJack), Some(ClubQueen), Some(DiamondNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::TOP), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeQueen), Some(HeartAce), Some(ClubAce)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(DiamondKing), Some(SpadeQueen), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(HeartKing), None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [76, 0, 7, 84], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, ClubTen, ClubKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::TOP])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubTen, ClubKing]), FdoHand::from_vec(vec![ClubAce, SpadeTen, SpadeKing]), FdoHand::from_vec(vec![HeartQueen, DiamondKing, ClubTen])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardClubTen);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardClubAce, CardSpadeTen, CardSpadeKing]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartNine), Some(DiamondTen), Some(HeartKing), Some(SpadeJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeJack) }, FdoTrick { cards: [Some(SpadeAce), Some(DiamondAce), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondAce) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondTen), Some(ClubQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(ClubKing), Some(HeartJack), Some(ClubNine), Some(ClubNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartJack) }, FdoTrick { cards: [Some(SpadeJack), Some(DiamondNine), Some(DiamondJack), Some(DiamondQueen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(DiamondQueen) }, FdoTrick { cards: [Some(SpadeKing), Some(DiamondQueen), Some(SpadeAce), Some(SpadeNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondQueen) }, FdoTrick { cards: [Some(ClubJack), Some(HeartJack), Some(ClubQueen), Some(DiamondNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::TOP), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeQueen), Some(HeartAce), Some(ClubAce)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(DiamondKing), Some(SpadeQueen), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(HeartKing), Some(ClubTen), None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [76, 0, 7, 84], observing_player_hand: FdoHand::from_vec(vec![ClubAce, SpadeTen, SpadeKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::TOP])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubKing]), FdoHand::from_vec(vec![ClubAce, SpadeTen, SpadeKing]), FdoHand::from_vec(vec![HeartQueen, DiamondKing, ClubTen])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardSpadeTen);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardDiamondKing, CardHeartQueen, CardClubTen]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartNine), Some(DiamondTen), Some(HeartKing), Some(SpadeJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeJack) }, FdoTrick { cards: [Some(SpadeAce), Some(DiamondAce), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondAce) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondTen), Some(ClubQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(ClubKing), Some(HeartJack), Some(ClubNine), Some(ClubNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartJack) }, FdoTrick { cards: [Some(SpadeJack), Some(DiamondNine), Some(DiamondJack), Some(DiamondQueen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(DiamondQueen) }, FdoTrick { cards: [Some(SpadeKing), Some(DiamondQueen), Some(SpadeAce), Some(SpadeNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondQueen) }, FdoTrick { cards: [Some(ClubJack), Some(HeartJack), Some(ClubQueen), Some(DiamondNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::TOP), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeQueen), Some(HeartAce), Some(ClubAce)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(DiamondKing), Some(SpadeQueen), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(HeartKing), Some(ClubTen), Some(SpadeTen), None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [76, 0, 7, 84], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, DiamondKing, ClubTen]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::TOP])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubKing]), FdoHand::from_vec(vec![ClubAce, SpadeKing]), FdoHand::from_vec(vec![HeartQueen, DiamondKing, ClubTen])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardDiamondKing);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardHeartQueen, CardClubTen]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartNine), Some(DiamondTen), Some(HeartKing), Some(SpadeJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeJack) }, FdoTrick { cards: [Some(SpadeAce), Some(DiamondAce), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondAce) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondTen), Some(ClubQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(ClubKing), Some(HeartJack), Some(ClubNine), Some(ClubNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartJack) }, FdoTrick { cards: [Some(SpadeJack), Some(DiamondNine), Some(DiamondJack), Some(DiamondQueen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(DiamondQueen) }, FdoTrick { cards: [Some(SpadeKing), Some(DiamondQueen), Some(SpadeAce), Some(SpadeNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondQueen) }, FdoTrick { cards: [Some(ClubJack), Some(HeartJack), Some(ClubQueen), Some(DiamondNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::TOP), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeQueen), Some(HeartAce), Some(ClubAce)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(DiamondKing), Some(SpadeQueen), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(HeartKing), Some(ClubTen), Some(SpadeTen), Some(DiamondKing)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(DiamondKing) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [76, 0, 7, 112], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, ClubTen]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::TOP])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubKing]), FdoHand::from_vec(vec![ClubAce, SpadeKing]), FdoHand::from_vec(vec![HeartQueen, ClubTen])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardClubTen);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardHeartNine, CardHeartTen]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartNine), Some(DiamondTen), Some(HeartKing), Some(SpadeJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeJack) }, FdoTrick { cards: [Some(SpadeAce), Some(DiamondAce), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondAce) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondTen), Some(ClubQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(ClubKing), Some(HeartJack), Some(ClubNine), Some(ClubNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartJack) }, FdoTrick { cards: [Some(SpadeJack), Some(DiamondNine), Some(DiamondJack), Some(DiamondQueen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(DiamondQueen) }, FdoTrick { cards: [Some(SpadeKing), Some(DiamondQueen), Some(SpadeAce), Some(SpadeNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondQueen) }, FdoTrick { cards: [Some(ClubJack), Some(HeartJack), Some(ClubQueen), Some(DiamondNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::TOP), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeQueen), Some(HeartAce), Some(ClubAce)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(DiamondKing), Some(SpadeQueen), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(HeartKing), Some(ClubTen), Some(SpadeTen), Some(DiamondKing)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(DiamondKing) }, FdoTrick { cards: [Some(ClubTen), None, None, None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [76, 0, 7, 112], observing_player_hand: FdoHand::from_vec(vec![HeartTen, HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::TOP])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartTen, HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubKing]), FdoHand::from_vec(vec![ClubAce, SpadeKing]), FdoHand::from_vec(vec![HeartQueen])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardHeartTen);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardClubKing]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartNine), Some(DiamondTen), Some(HeartKing), Some(SpadeJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeJack) }, FdoTrick { cards: [Some(SpadeAce), Some(DiamondAce), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondAce) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondTen), Some(ClubQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(ClubKing), Some(HeartJack), Some(ClubNine), Some(ClubNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartJack) }, FdoTrick { cards: [Some(SpadeJack), Some(DiamondNine), Some(DiamondJack), Some(DiamondQueen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(DiamondQueen) }, FdoTrick { cards: [Some(SpadeKing), Some(DiamondQueen), Some(SpadeAce), Some(SpadeNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondQueen) }, FdoTrick { cards: [Some(ClubJack), Some(HeartJack), Some(ClubQueen), Some(DiamondNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::TOP), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeQueen), Some(HeartAce), Some(ClubAce)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(DiamondKing), Some(SpadeQueen), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(HeartKing), Some(ClubTen), Some(SpadeTen), Some(DiamondKing)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(DiamondKing) }, FdoTrick { cards: [Some(ClubTen), Some(HeartTen), None, None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [76, 0, 7, 112], observing_player_hand: FdoHand::from_vec(vec![HeartQueen, ClubKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::TOP])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartNine]), FdoHand::from_vec(vec![HeartQueen, ClubKing]), FdoHand::from_vec(vec![ClubAce, SpadeKing]), FdoHand::from_vec(vec![HeartQueen])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardClubKing);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardClubAce]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartNine), Some(DiamondTen), Some(HeartKing), Some(SpadeJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeJack) }, FdoTrick { cards: [Some(SpadeAce), Some(DiamondAce), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondAce) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondTen), Some(ClubQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(ClubKing), Some(HeartJack), Some(ClubNine), Some(ClubNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartJack) }, FdoTrick { cards: [Some(SpadeJack), Some(DiamondNine), Some(DiamondJack), Some(DiamondQueen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(DiamondQueen) }, FdoTrick { cards: [Some(SpadeKing), Some(DiamondQueen), Some(SpadeAce), Some(SpadeNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondQueen) }, FdoTrick { cards: [Some(ClubJack), Some(HeartJack), Some(ClubQueen), Some(DiamondNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::TOP), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeQueen), Some(HeartAce), Some(ClubAce)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(DiamondKing), Some(SpadeQueen), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(HeartKing), Some(ClubTen), Some(SpadeTen), Some(DiamondKing)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(DiamondKing) }, FdoTrick { cards: [Some(ClubTen), Some(HeartTen), Some(ClubKing), None], start_player: FdoPlayer::RIGHT, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [76, 0, 7, 112], observing_player_hand: FdoHand::from_vec(vec![ClubAce, SpadeKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::TOP])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartNine]), FdoHand::from_vec(vec![HeartQueen]), FdoHand::from_vec(vec![ClubAce, SpadeKing]), FdoHand::from_vec(vec![HeartQueen])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardClubAce);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::BOTTOM, current_player: Some(FdoPlayer::BOTTOM), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardHeartNine]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartNine), Some(DiamondTen), Some(HeartKing), Some(SpadeJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeJack) }, FdoTrick { cards: [Some(SpadeAce), Some(DiamondAce), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondAce) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondTen), Some(ClubQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(ClubKing), Some(HeartJack), Some(ClubNine), Some(ClubNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartJack) }, FdoTrick { cards: [Some(SpadeJack), Some(DiamondNine), Some(DiamondJack), Some(DiamondQueen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(DiamondQueen) }, FdoTrick { cards: [Some(SpadeKing), Some(DiamondQueen), Some(SpadeAce), Some(SpadeNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondQueen) }, FdoTrick { cards: [Some(ClubJack), Some(HeartJack), Some(ClubQueen), Some(DiamondNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::TOP), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeQueen), Some(HeartAce), Some(ClubAce)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(DiamondKing), Some(SpadeQueen), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(HeartKing), Some(ClubTen), Some(SpadeTen), Some(DiamondKing)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(DiamondKing) }, FdoTrick { cards: [Some(ClubTen), Some(HeartTen), Some(ClubKing), Some(ClubAce)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [None, None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [111, 0, 7, 112], observing_player_hand: FdoHand::from_vec(vec![HeartNine]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::TOP])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![HeartNine]), FdoHand::from_vec(vec![HeartQueen]), FdoHand::from_vec(vec![SpadeKing]), FdoHand::from_vec(vec![HeartQueen])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardHeartNine);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::LEFT, current_player: Some(FdoPlayer::LEFT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardHeartQueen]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartNine), Some(DiamondTen), Some(HeartKing), Some(SpadeJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeJack) }, FdoTrick { cards: [Some(SpadeAce), Some(DiamondAce), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondAce) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondTen), Some(ClubQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(ClubKing), Some(HeartJack), Some(ClubNine), Some(ClubNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartJack) }, FdoTrick { cards: [Some(SpadeJack), Some(DiamondNine), Some(DiamondJack), Some(DiamondQueen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(DiamondQueen) }, FdoTrick { cards: [Some(SpadeKing), Some(DiamondQueen), Some(SpadeAce), Some(SpadeNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondQueen) }, FdoTrick { cards: [Some(ClubJack), Some(HeartJack), Some(ClubQueen), Some(DiamondNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::TOP), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeQueen), Some(HeartAce), Some(ClubAce)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(DiamondKing), Some(SpadeQueen), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(HeartKing), Some(ClubTen), Some(SpadeTen), Some(DiamondKing)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(DiamondKing) }, FdoTrick { cards: [Some(ClubTen), Some(HeartTen), Some(ClubKing), Some(ClubAce)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartNine), None, None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [111, 0, 7, 112], observing_player_hand: FdoHand::from_vec(vec![HeartQueen]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::TOP])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![]), FdoHand::from_vec(vec![HeartQueen]), FdoHand::from_vec(vec![SpadeKing]), FdoHand::from_vec(vec![HeartQueen])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardHeartQueen);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::TOP, current_player: Some(FdoPlayer::TOP), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardSpadeKing]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartNine), Some(DiamondTen), Some(HeartKing), Some(SpadeJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeJack) }, FdoTrick { cards: [Some(SpadeAce), Some(DiamondAce), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondAce) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondTen), Some(ClubQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(ClubKing), Some(HeartJack), Some(ClubNine), Some(ClubNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartJack) }, FdoTrick { cards: [Some(SpadeJack), Some(DiamondNine), Some(DiamondJack), Some(DiamondQueen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(DiamondQueen) }, FdoTrick { cards: [Some(SpadeKing), Some(DiamondQueen), Some(SpadeAce), Some(SpadeNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondQueen) }, FdoTrick { cards: [Some(ClubJack), Some(HeartJack), Some(ClubQueen), Some(DiamondNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::TOP), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeQueen), Some(HeartAce), Some(ClubAce)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(DiamondKing), Some(SpadeQueen), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(HeartKing), Some(ClubTen), Some(SpadeTen), Some(DiamondKing)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(DiamondKing) }, FdoTrick { cards: [Some(ClubTen), Some(HeartTen), Some(ClubKing), Some(ClubAce)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartNine), Some(HeartQueen), None, None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [111, 0, 7, 112], observing_player_hand: FdoHand::from_vec(vec![SpadeKing]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::TOP])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![]), FdoHand::from_vec(vec![]), FdoHand::from_vec(vec![SpadeKing]), FdoHand::from_vec(vec![HeartQueen])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardSpadeKing);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::PlayCard, observing_player: FdoPlayer::RIGHT, current_player: Some(FdoPlayer::RIGHT), allowed_actions_current_player: FdoAllowedActions::from_vec(vec![CardHeartQueen]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartNine), Some(DiamondTen), Some(HeartKing), Some(SpadeJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeJack) }, FdoTrick { cards: [Some(SpadeAce), Some(DiamondAce), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondAce) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondTen), Some(ClubQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(ClubKing), Some(HeartJack), Some(ClubNine), Some(ClubNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartJack) }, FdoTrick { cards: [Some(SpadeJack), Some(DiamondNine), Some(DiamondJack), Some(DiamondQueen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(DiamondQueen) }, FdoTrick { cards: [Some(SpadeKing), Some(DiamondQueen), Some(SpadeAce), Some(SpadeNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondQueen) }, FdoTrick { cards: [Some(ClubJack), Some(HeartJack), Some(ClubQueen), Some(DiamondNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::TOP), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeQueen), Some(HeartAce), Some(ClubAce)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(DiamondKing), Some(SpadeQueen), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(HeartKing), Some(ClubTen), Some(SpadeTen), Some(DiamondKing)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(DiamondKing) }, FdoTrick { cards: [Some(ClubTen), Some(HeartTen), Some(ClubKing), Some(ClubAce)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartNine), Some(HeartQueen), Some(SpadeKing), None], start_player: FdoPlayer::BOTTOM, winning_player: None, winning_card: None }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [111, 0, 7, 112], observing_player_hand: FdoHand::from_vec(vec![HeartQueen]), finished_stats: None, phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::TOP])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![]), FdoHand::from_vec(vec![]), FdoHand::from_vec(vec![]), FdoHand::from_vec(vec![HeartQueen])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//         state.play_action(CardHeartQueen);
//         assert_eq!(state.observation_for_current_player(), FdoObservation { game_type: Some(FdoGameType::Normal), phase: FdoPhase::Finished, observing_player: FdoPlayer::BOTTOM, current_player: None, allowed_actions_current_player: FdoAllowedActions::from_vec(vec![]), game_starting_player: FdoPlayer::BOTTOM, wedding_player_if_wedding_announced: None, tricks: heapless::Vec::from_slice(&[FdoTrick { cards: [Some(HeartNine), Some(DiamondTen), Some(HeartKing), Some(SpadeJack)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeJack) }, FdoTrick { cards: [Some(SpadeAce), Some(DiamondAce), Some(SpadeTen), Some(SpadeNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondAce) }, FdoTrick { cards: [Some(DiamondJack), Some(DiamondTen), Some(ClubQueen), Some(HeartTen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(ClubKing), Some(HeartJack), Some(ClubNine), Some(ClubNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartJack) }, FdoTrick { cards: [Some(SpadeJack), Some(DiamondNine), Some(DiamondJack), Some(DiamondQueen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(DiamondQueen) }, FdoTrick { cards: [Some(SpadeKing), Some(DiamondQueen), Some(SpadeAce), Some(SpadeNine)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(DiamondQueen) }, FdoTrick { cards: [Some(ClubJack), Some(HeartJack), Some(ClubQueen), Some(DiamondNine)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::TOP), winning_card: Some(ClubQueen) }, FdoTrick { cards: [Some(HeartAce), Some(SpadeQueen), Some(HeartAce), Some(ClubAce)], start_player: FdoPlayer::TOP, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(DiamondKing), Some(SpadeQueen), Some(ClubJack), Some(DiamondAce)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(SpadeQueen) }, FdoTrick { cards: [Some(HeartKing), Some(ClubTen), Some(SpadeTen), Some(DiamondKing)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::RIGHT), winning_card: Some(DiamondKing) }, FdoTrick { cards: [Some(ClubTen), Some(HeartTen), Some(ClubKing), Some(ClubAce)], start_player: FdoPlayer::RIGHT, winning_player: Some(FdoPlayer::BOTTOM), winning_card: Some(HeartTen) }, FdoTrick { cards: [Some(HeartNine), Some(HeartQueen), Some(SpadeKing), Some(HeartQueen)], start_player: FdoPlayer::BOTTOM, winning_player: Some(FdoPlayer::LEFT), winning_card: Some(HeartQueen) }]).unwrap(), visible_reservations: [Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy), Some(FdoVisibleReservation::Healthy)], announcements: heapless::Vec::from_slice(&[]).unwrap(), player_eyes: [111, 10, 7, 112], observing_player_hand: FdoHand::from_vec(vec![]), finished_stats: Some(FdoEndOfGameStats { re_players: FdoPlayerSet::from_vec(vec![FdoPlayer::TOP]), is_solo: true, player_eyes: [111, 10, 7, 112], re_eyes: 7, kontra_eyes: 233, re_points: -12, kontra_points: 4, player_points: [4, 4, -12, 4], basic_winning_point_details: Some(FdoBasicWinningPointsDetails { winning_points: 1, winning_under_90: 1, winning_under_60: 1, winning_under_30: 1, winning_black: 0, re_announcement: 0, kontra_announcement: 0, re_under_90_announcement: 0, re_under_60_announcement: 0, re_under_30_announcement: 0, re_black_announcement: 0, kontra_under_90_announcement: 0, kontra_under_60_announcement: 0, kontra_under_30_announcement: 0, kontra_black_announcement: 0, re_reached_120_against_no_90: 0, re_reached_90_against_no_60: 0, re_reached_60_against_no_30: 0, re_reached_30_against_black: 0, kontra_reached_120_against_no_90: 0, kontra_reached_90_against_no_60: 0, kontra_reached_60_against_no_30: 0, kontra_reached_30_against_black: 0 }), basic_draw_points_details: None, additional_points_details: None }), phi_re_players: Some(FdoPlayerSet::from_vec(vec![FdoPlayer::TOP])), phi_real_reservations: FdoReservationRound { reservations: [Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy), Some(FdoReservation::Healthy)], start_player: FdoPlayer::BOTTOM }, phi_real_hands: [FdoHand::from_vec(vec![]), FdoHand::from_vec(vec![]), FdoHand::from_vec(vec![]), FdoHand::from_vec(vec![])], phi_team_eyes: [0, 0], re_lowest_announcement: None, contra_lowest_announcement: None });
//
//
//     }
// }